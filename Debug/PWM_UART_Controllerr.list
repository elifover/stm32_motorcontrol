
PWM_UART_Controllerr.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cc04  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000490  0800cd8c  0800cd8c  0000dd8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d21c  0800d21c  0000f084  2**0
                  CONTENTS
  4 .ARM          00000008  0800d21c  0800d21c  0000e21c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d224  0800d224  0000f084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d224  0800d224  0000e224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d228  0800d228  0000e228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000084  20000000  0800d22c  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000f084  2**0
                  CONTENTS
 10 .bss          00000b10  20000084  20000084  0000f084  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000b94  20000b94  0000f084  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000f084  2**0
                  CONTENTS, READONLY
 13 .debug_info   00020a92  00000000  00000000  0000f0b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000052ce  00000000  00000000  0002fb46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b58  00000000  00000000  00034e18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000154b  00000000  00000000  00036970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027cf8  00000000  00000000  00037ebb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002b219  00000000  00000000  0005fbb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e34c9  00000000  00000000  0008adcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0016e295  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000076a4  00000000  00000000  0016e2d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000070  00000000  00000000  0017597c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000084 	.word	0x20000084
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800cd74 	.word	0x0800cd74

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000088 	.word	0x20000088
 80001c4:	0800cd74 	.word	0x0800cd74

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b084      	sub	sp, #16
 80004cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004ce:	463b      	mov	r3, r7
 80004d0:	2200      	movs	r2, #0
 80004d2:	601a      	str	r2, [r3, #0]
 80004d4:	605a      	str	r2, [r3, #4]
 80004d6:	609a      	str	r2, [r3, #8]
 80004d8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80004da:	4b21      	ldr	r3, [pc, #132]	@ (8000560 <MX_ADC1_Init+0x98>)
 80004dc:	4a21      	ldr	r2, [pc, #132]	@ (8000564 <MX_ADC1_Init+0x9c>)
 80004de:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80004e0:	4b1f      	ldr	r3, [pc, #124]	@ (8000560 <MX_ADC1_Init+0x98>)
 80004e2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80004e6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80004e8:	4b1d      	ldr	r3, [pc, #116]	@ (8000560 <MX_ADC1_Init+0x98>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80004ee:	4b1c      	ldr	r3, [pc, #112]	@ (8000560 <MX_ADC1_Init+0x98>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80004f4:	4b1a      	ldr	r3, [pc, #104]	@ (8000560 <MX_ADC1_Init+0x98>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80004fa:	4b19      	ldr	r3, [pc, #100]	@ (8000560 <MX_ADC1_Init+0x98>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000502:	4b17      	ldr	r3, [pc, #92]	@ (8000560 <MX_ADC1_Init+0x98>)
 8000504:	2200      	movs	r2, #0
 8000506:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000508:	4b15      	ldr	r3, [pc, #84]	@ (8000560 <MX_ADC1_Init+0x98>)
 800050a:	4a17      	ldr	r2, [pc, #92]	@ (8000568 <MX_ADC1_Init+0xa0>)
 800050c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800050e:	4b14      	ldr	r3, [pc, #80]	@ (8000560 <MX_ADC1_Init+0x98>)
 8000510:	2200      	movs	r2, #0
 8000512:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000514:	4b12      	ldr	r3, [pc, #72]	@ (8000560 <MX_ADC1_Init+0x98>)
 8000516:	2201      	movs	r2, #1
 8000518:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800051a:	4b11      	ldr	r3, [pc, #68]	@ (8000560 <MX_ADC1_Init+0x98>)
 800051c:	2200      	movs	r2, #0
 800051e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000522:	4b0f      	ldr	r3, [pc, #60]	@ (8000560 <MX_ADC1_Init+0x98>)
 8000524:	2201      	movs	r2, #1
 8000526:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000528:	480d      	ldr	r0, [pc, #52]	@ (8000560 <MX_ADC1_Init+0x98>)
 800052a:	f001 f879 	bl	8001620 <HAL_ADC_Init>
 800052e:	4603      	mov	r3, r0
 8000530:	2b00      	cmp	r3, #0
 8000532:	d001      	beq.n	8000538 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000534:	f000 fadd 	bl	8000af2 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000538:	2300      	movs	r3, #0
 800053a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800053c:	2301      	movs	r3, #1
 800053e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000540:	2300      	movs	r3, #0
 8000542:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000544:	463b      	mov	r3, r7
 8000546:	4619      	mov	r1, r3
 8000548:	4805      	ldr	r0, [pc, #20]	@ (8000560 <MX_ADC1_Init+0x98>)
 800054a:	f001 fbb3 	bl	8001cb4 <HAL_ADC_ConfigChannel>
 800054e:	4603      	mov	r3, r0
 8000550:	2b00      	cmp	r3, #0
 8000552:	d001      	beq.n	8000558 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000554:	f000 facd 	bl	8000af2 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000558:	bf00      	nop
 800055a:	3710      	adds	r7, #16
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	200000a0 	.word	0x200000a0
 8000564:	40012000 	.word	0x40012000
 8000568:	0f000001 	.word	0x0f000001

0800056c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b08a      	sub	sp, #40	@ 0x28
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000574:	f107 0314 	add.w	r3, r7, #20
 8000578:	2200      	movs	r2, #0
 800057a:	601a      	str	r2, [r3, #0]
 800057c:	605a      	str	r2, [r3, #4]
 800057e:	609a      	str	r2, [r3, #8]
 8000580:	60da      	str	r2, [r3, #12]
 8000582:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a17      	ldr	r2, [pc, #92]	@ (80005e8 <HAL_ADC_MspInit+0x7c>)
 800058a:	4293      	cmp	r3, r2
 800058c:	d127      	bne.n	80005de <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800058e:	2300      	movs	r3, #0
 8000590:	613b      	str	r3, [r7, #16]
 8000592:	4b16      	ldr	r3, [pc, #88]	@ (80005ec <HAL_ADC_MspInit+0x80>)
 8000594:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000596:	4a15      	ldr	r2, [pc, #84]	@ (80005ec <HAL_ADC_MspInit+0x80>)
 8000598:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800059c:	6453      	str	r3, [r2, #68]	@ 0x44
 800059e:	4b13      	ldr	r3, [pc, #76]	@ (80005ec <HAL_ADC_MspInit+0x80>)
 80005a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80005a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80005a6:	613b      	str	r3, [r7, #16]
 80005a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005aa:	2300      	movs	r3, #0
 80005ac:	60fb      	str	r3, [r7, #12]
 80005ae:	4b0f      	ldr	r3, [pc, #60]	@ (80005ec <HAL_ADC_MspInit+0x80>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005b2:	4a0e      	ldr	r2, [pc, #56]	@ (80005ec <HAL_ADC_MspInit+0x80>)
 80005b4:	f043 0301 	orr.w	r3, r3, #1
 80005b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80005ba:	4b0c      	ldr	r3, [pc, #48]	@ (80005ec <HAL_ADC_MspInit+0x80>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005be:	f003 0301 	and.w	r3, r3, #1
 80005c2:	60fb      	str	r3, [r7, #12]
 80005c4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80005c6:	2301      	movs	r3, #1
 80005c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005ca:	2303      	movs	r3, #3
 80005cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ce:	2300      	movs	r3, #0
 80005d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005d2:	f107 0314 	add.w	r3, r7, #20
 80005d6:	4619      	mov	r1, r3
 80005d8:	4805      	ldr	r0, [pc, #20]	@ (80005f0 <HAL_ADC_MspInit+0x84>)
 80005da:	f001 ffa5 	bl	8002528 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80005de:	bf00      	nop
 80005e0:	3728      	adds	r7, #40	@ 0x28
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	40012000 	.word	0x40012000
 80005ec:	40023800 	.word	0x40023800
 80005f0:	40020000 	.word	0x40020000

080005f4 <MX_GPIO_Init>:
        * the Code Generation settings)
     PC3   ------> I2S2_SD
     PB10   ------> I2S2_CK
*/
void MX_GPIO_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b08c      	sub	sp, #48	@ 0x30
 80005f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005fa:	f107 031c 	add.w	r3, r7, #28
 80005fe:	2200      	movs	r2, #0
 8000600:	601a      	str	r2, [r3, #0]
 8000602:	605a      	str	r2, [r3, #4]
 8000604:	609a      	str	r2, [r3, #8]
 8000606:	60da      	str	r2, [r3, #12]
 8000608:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800060a:	2300      	movs	r3, #0
 800060c:	61bb      	str	r3, [r7, #24]
 800060e:	4b9c      	ldr	r3, [pc, #624]	@ (8000880 <MX_GPIO_Init+0x28c>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000612:	4a9b      	ldr	r2, [pc, #620]	@ (8000880 <MX_GPIO_Init+0x28c>)
 8000614:	f043 0310 	orr.w	r3, r3, #16
 8000618:	6313      	str	r3, [r2, #48]	@ 0x30
 800061a:	4b99      	ldr	r3, [pc, #612]	@ (8000880 <MX_GPIO_Init+0x28c>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800061e:	f003 0310 	and.w	r3, r3, #16
 8000622:	61bb      	str	r3, [r7, #24]
 8000624:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000626:	2300      	movs	r3, #0
 8000628:	617b      	str	r3, [r7, #20]
 800062a:	4b95      	ldr	r3, [pc, #596]	@ (8000880 <MX_GPIO_Init+0x28c>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800062e:	4a94      	ldr	r2, [pc, #592]	@ (8000880 <MX_GPIO_Init+0x28c>)
 8000630:	f043 0304 	orr.w	r3, r3, #4
 8000634:	6313      	str	r3, [r2, #48]	@ 0x30
 8000636:	4b92      	ldr	r3, [pc, #584]	@ (8000880 <MX_GPIO_Init+0x28c>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800063a:	f003 0304 	and.w	r3, r3, #4
 800063e:	617b      	str	r3, [r7, #20]
 8000640:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000642:	2300      	movs	r3, #0
 8000644:	613b      	str	r3, [r7, #16]
 8000646:	4b8e      	ldr	r3, [pc, #568]	@ (8000880 <MX_GPIO_Init+0x28c>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800064a:	4a8d      	ldr	r2, [pc, #564]	@ (8000880 <MX_GPIO_Init+0x28c>)
 800064c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000650:	6313      	str	r3, [r2, #48]	@ 0x30
 8000652:	4b8b      	ldr	r3, [pc, #556]	@ (8000880 <MX_GPIO_Init+0x28c>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000656:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800065a:	613b      	str	r3, [r7, #16]
 800065c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800065e:	2300      	movs	r3, #0
 8000660:	60fb      	str	r3, [r7, #12]
 8000662:	4b87      	ldr	r3, [pc, #540]	@ (8000880 <MX_GPIO_Init+0x28c>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000666:	4a86      	ldr	r2, [pc, #536]	@ (8000880 <MX_GPIO_Init+0x28c>)
 8000668:	f043 0301 	orr.w	r3, r3, #1
 800066c:	6313      	str	r3, [r2, #48]	@ 0x30
 800066e:	4b84      	ldr	r3, [pc, #528]	@ (8000880 <MX_GPIO_Init+0x28c>)
 8000670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000672:	f003 0301 	and.w	r3, r3, #1
 8000676:	60fb      	str	r3, [r7, #12]
 8000678:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800067a:	2300      	movs	r3, #0
 800067c:	60bb      	str	r3, [r7, #8]
 800067e:	4b80      	ldr	r3, [pc, #512]	@ (8000880 <MX_GPIO_Init+0x28c>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000682:	4a7f      	ldr	r2, [pc, #508]	@ (8000880 <MX_GPIO_Init+0x28c>)
 8000684:	f043 0302 	orr.w	r3, r3, #2
 8000688:	6313      	str	r3, [r2, #48]	@ 0x30
 800068a:	4b7d      	ldr	r3, [pc, #500]	@ (8000880 <MX_GPIO_Init+0x28c>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800068e:	f003 0302 	and.w	r3, r3, #2
 8000692:	60bb      	str	r3, [r7, #8]
 8000694:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000696:	2300      	movs	r3, #0
 8000698:	607b      	str	r3, [r7, #4]
 800069a:	4b79      	ldr	r3, [pc, #484]	@ (8000880 <MX_GPIO_Init+0x28c>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800069e:	4a78      	ldr	r2, [pc, #480]	@ (8000880 <MX_GPIO_Init+0x28c>)
 80006a0:	f043 0308 	orr.w	r3, r3, #8
 80006a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006a6:	4b76      	ldr	r3, [pc, #472]	@ (8000880 <MX_GPIO_Init+0x28c>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006aa:	f003 0308 	and.w	r3, r3, #8
 80006ae:	607b      	str	r3, [r7, #4]
 80006b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80006b2:	2200      	movs	r2, #0
 80006b4:	2108      	movs	r1, #8
 80006b6:	4873      	ldr	r0, [pc, #460]	@ (8000884 <MX_GPIO_Init+0x290>)
 80006b8:	f002 fa36 	bl	8002b28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80006bc:	2201      	movs	r2, #1
 80006be:	2101      	movs	r1, #1
 80006c0:	4871      	ldr	r0, [pc, #452]	@ (8000888 <MX_GPIO_Init+0x294>)
 80006c2:	f002 fa31 	bl	8002b28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 80006c6:	2200      	movs	r2, #0
 80006c8:	2103      	movs	r1, #3
 80006ca:	4870      	ldr	r0, [pc, #448]	@ (800088c <MX_GPIO_Init+0x298>)
 80006cc:	f002 fa2c 	bl	8002b28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80006d0:	2200      	movs	r2, #0
 80006d2:	f24f 0110 	movw	r1, #61456	@ 0xf010
 80006d6:	486e      	ldr	r0, [pc, #440]	@ (8000890 <MX_GPIO_Init+0x29c>)
 80006d8:	f002 fa26 	bl	8002b28 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE4 PE5 PE6
                           PE7 PE8 PE9 PE10
                           PE11 PE12 PE13 PE14
                           PE15 PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 80006dc:	f64f 73f5 	movw	r3, #65525	@ 0xfff5
 80006e0:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006e2:	2303      	movs	r3, #3
 80006e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e6:	2300      	movs	r3, #0
 80006e8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80006ea:	f107 031c 	add.w	r3, r7, #28
 80006ee:	4619      	mov	r1, r3
 80006f0:	4864      	ldr	r0, [pc, #400]	@ (8000884 <MX_GPIO_Init+0x290>)
 80006f2:	f001 ff19 	bl	8002528 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80006f6:	2308      	movs	r3, #8
 80006f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006fa:	2301      	movs	r3, #1
 80006fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fe:	2300      	movs	r3, #0
 8000700:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000702:	2300      	movs	r3, #0
 8000704:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000706:	f107 031c 	add.w	r3, r7, #28
 800070a:	4619      	mov	r1, r3
 800070c:	485d      	ldr	r0, [pc, #372]	@ (8000884 <MX_GPIO_Init+0x290>)
 800070e:	f001 ff0b 	bl	8002528 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000712:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000716:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000718:	2300      	movs	r3, #0
 800071a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071c:	2300      	movs	r3, #0
 800071e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000720:	f107 031c 	add.w	r3, r7, #28
 8000724:	4619      	mov	r1, r3
 8000726:	4858      	ldr	r0, [pc, #352]	@ (8000888 <MX_GPIO_Init+0x294>)
 8000728:	f001 fefe 	bl	8002528 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800072c:	2301      	movs	r3, #1
 800072e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000730:	2301      	movs	r3, #1
 8000732:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000734:	2300      	movs	r3, #0
 8000736:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000738:	2300      	movs	r3, #0
 800073a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800073c:	f107 031c 	add.w	r3, r7, #28
 8000740:	4619      	mov	r1, r3
 8000742:	4851      	ldr	r0, [pc, #324]	@ (8000888 <MX_GPIO_Init+0x294>)
 8000744:	f001 fef0 	bl	8002528 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC2 PC4 PC5
                           PC6 PC8 PC9 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5
 8000748:	f640 3376 	movw	r3, #2934	@ 0xb76
 800074c:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800074e:	2303      	movs	r3, #3
 8000750:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000752:	2300      	movs	r3, #0
 8000754:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000756:	f107 031c 	add.w	r3, r7, #28
 800075a:	4619      	mov	r1, r3
 800075c:	484a      	ldr	r0, [pc, #296]	@ (8000888 <MX_GPIO_Init+0x294>)
 800075e:	f001 fee3 	bl	8002528 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000762:	2308      	movs	r3, #8
 8000764:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000766:	2302      	movs	r3, #2
 8000768:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076a:	2300      	movs	r3, #0
 800076c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800076e:	2300      	movs	r3, #0
 8000770:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000772:	2305      	movs	r3, #5
 8000774:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000776:	f107 031c 	add.w	r3, r7, #28
 800077a:	4619      	mov	r1, r3
 800077c:	4842      	ldr	r0, [pc, #264]	@ (8000888 <MX_GPIO_Init+0x294>)
 800077e:	f001 fed3 	bl	8002528 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_8;
 8000782:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8000786:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000788:	2303      	movs	r3, #3
 800078a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078c:	2300      	movs	r3, #0
 800078e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000790:	f107 031c 	add.w	r3, r7, #28
 8000794:	4619      	mov	r1, r3
 8000796:	483f      	ldr	r0, [pc, #252]	@ (8000894 <MX_GPIO_Init+0x2a0>)
 8000798:	f001 fec6 	bl	8002528 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800079c:	2303      	movs	r3, #3
 800079e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a0:	2301      	movs	r3, #1
 80007a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a4:	2300      	movs	r3, #0
 80007a6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a8:	2300      	movs	r3, #0
 80007aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ac:	f107 031c 	add.w	r3, r7, #28
 80007b0:	4619      	mov	r1, r3
 80007b2:	4836      	ldr	r0, [pc, #216]	@ (800088c <MX_GPIO_Init+0x298>)
 80007b4:	f001 feb8 	bl	8002528 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80007b8:	2304      	movs	r3, #4
 80007ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007bc:	2300      	movs	r3, #0
 80007be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c0:	2300      	movs	r3, #0
 80007c2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80007c4:	f107 031c 	add.w	r3, r7, #28
 80007c8:	4619      	mov	r1, r3
 80007ca:	4830      	ldr	r0, [pc, #192]	@ (800088c <MX_GPIO_Init+0x298>)
 80007cc:	f001 feac 	bl	8002528 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80007d0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80007d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007d6:	2302      	movs	r3, #2
 80007d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007da:	2300      	movs	r3, #0
 80007dc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007de:	2300      	movs	r3, #0
 80007e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80007e2:	2305      	movs	r3, #5
 80007e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80007e6:	f107 031c 	add.w	r3, r7, #28
 80007ea:	4619      	mov	r1, r3
 80007ec:	4827      	ldr	r0, [pc, #156]	@ (800088c <MX_GPIO_Init+0x298>)
 80007ee:	f001 fe9b 	bl	8002528 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB11 PB12 PB13 PB14
                           PB15 PB4 PB5 PB7
                           PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 80007f2:	f64f 13b0 	movw	r3, #63920	@ 0xf9b0
 80007f6:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007f8:	2303      	movs	r3, #3
 80007fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fc:	2300      	movs	r3, #0
 80007fe:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000800:	f107 031c 	add.w	r3, r7, #28
 8000804:	4619      	mov	r1, r3
 8000806:	4821      	ldr	r0, [pc, #132]	@ (800088c <MX_GPIO_Init+0x298>)
 8000808:	f001 fe8e 	bl	8002528 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD0 PD1 PD2 PD3
                           PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800080c:	f640 73cf 	movw	r3, #4047	@ 0xfcf
 8000810:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000812:	2303      	movs	r3, #3
 8000814:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000816:	2300      	movs	r3, #0
 8000818:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800081a:	f107 031c 	add.w	r3, r7, #28
 800081e:	4619      	mov	r1, r3
 8000820:	481b      	ldr	r0, [pc, #108]	@ (8000890 <MX_GPIO_Init+0x29c>)
 8000822:	f001 fe81 	bl	8002528 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000826:	f24f 0310 	movw	r3, #61456	@ 0xf010
 800082a:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082c:	2301      	movs	r3, #1
 800082e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000830:	2300      	movs	r3, #0
 8000832:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000834:	2300      	movs	r3, #0
 8000836:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000838:	f107 031c 	add.w	r3, r7, #28
 800083c:	4619      	mov	r1, r3
 800083e:	4814      	ldr	r0, [pc, #80]	@ (8000890 <MX_GPIO_Init+0x29c>)
 8000840:	f001 fe72 	bl	8002528 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000844:	2320      	movs	r3, #32
 8000846:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000848:	2300      	movs	r3, #0
 800084a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084c:	2300      	movs	r3, #0
 800084e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000850:	f107 031c 	add.w	r3, r7, #28
 8000854:	4619      	mov	r1, r3
 8000856:	480e      	ldr	r0, [pc, #56]	@ (8000890 <MX_GPIO_Init+0x29c>)
 8000858:	f001 fe66 	bl	8002528 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800085c:	2302      	movs	r3, #2
 800085e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000860:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000864:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000866:	2300      	movs	r3, #0
 8000868:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800086a:	f107 031c 	add.w	r3, r7, #28
 800086e:	4619      	mov	r1, r3
 8000870:	4804      	ldr	r0, [pc, #16]	@ (8000884 <MX_GPIO_Init+0x290>)
 8000872:	f001 fe59 	bl	8002528 <HAL_GPIO_Init>

}
 8000876:	bf00      	nop
 8000878:	3730      	adds	r7, #48	@ 0x30
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	40023800 	.word	0x40023800
 8000884:	40021000 	.word	0x40021000
 8000888:	40020800 	.word	0x40020800
 800088c:	40020400 	.word	0x40020400
 8000890:	40020c00 	.word	0x40020c00
 8000894:	40020000 	.word	0x40020000

08000898 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800089c:	4b12      	ldr	r3, [pc, #72]	@ (80008e8 <MX_I2C1_Init+0x50>)
 800089e:	4a13      	ldr	r2, [pc, #76]	@ (80008ec <MX_I2C1_Init+0x54>)
 80008a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80008a2:	4b11      	ldr	r3, [pc, #68]	@ (80008e8 <MX_I2C1_Init+0x50>)
 80008a4:	4a12      	ldr	r2, [pc, #72]	@ (80008f0 <MX_I2C1_Init+0x58>)
 80008a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008a8:	4b0f      	ldr	r3, [pc, #60]	@ (80008e8 <MX_I2C1_Init+0x50>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80008ae:	4b0e      	ldr	r3, [pc, #56]	@ (80008e8 <MX_I2C1_Init+0x50>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008b4:	4b0c      	ldr	r3, [pc, #48]	@ (80008e8 <MX_I2C1_Init+0x50>)
 80008b6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80008ba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008bc:	4b0a      	ldr	r3, [pc, #40]	@ (80008e8 <MX_I2C1_Init+0x50>)
 80008be:	2200      	movs	r2, #0
 80008c0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80008c2:	4b09      	ldr	r3, [pc, #36]	@ (80008e8 <MX_I2C1_Init+0x50>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008c8:	4b07      	ldr	r3, [pc, #28]	@ (80008e8 <MX_I2C1_Init+0x50>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008ce:	4b06      	ldr	r3, [pc, #24]	@ (80008e8 <MX_I2C1_Init+0x50>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008d4:	4804      	ldr	r0, [pc, #16]	@ (80008e8 <MX_I2C1_Init+0x50>)
 80008d6:	f004 fa9b 	bl	8004e10 <HAL_I2C_Init>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80008e0:	f000 f907 	bl	8000af2 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008e4:	bf00      	nop
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	200000e8 	.word	0x200000e8
 80008ec:	40005400 	.word	0x40005400
 80008f0:	000186a0 	.word	0x000186a0

080008f4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b08a      	sub	sp, #40	@ 0x28
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008fc:	f107 0314 	add.w	r3, r7, #20
 8000900:	2200      	movs	r2, #0
 8000902:	601a      	str	r2, [r3, #0]
 8000904:	605a      	str	r2, [r3, #4]
 8000906:	609a      	str	r2, [r3, #8]
 8000908:	60da      	str	r2, [r3, #12]
 800090a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4a19      	ldr	r2, [pc, #100]	@ (8000978 <HAL_I2C_MspInit+0x84>)
 8000912:	4293      	cmp	r3, r2
 8000914:	d12c      	bne.n	8000970 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000916:	2300      	movs	r3, #0
 8000918:	613b      	str	r3, [r7, #16]
 800091a:	4b18      	ldr	r3, [pc, #96]	@ (800097c <HAL_I2C_MspInit+0x88>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091e:	4a17      	ldr	r2, [pc, #92]	@ (800097c <HAL_I2C_MspInit+0x88>)
 8000920:	f043 0302 	orr.w	r3, r3, #2
 8000924:	6313      	str	r3, [r2, #48]	@ 0x30
 8000926:	4b15      	ldr	r3, [pc, #84]	@ (800097c <HAL_I2C_MspInit+0x88>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092a:	f003 0302 	and.w	r3, r3, #2
 800092e:	613b      	str	r3, [r7, #16]
 8000930:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000932:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000936:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000938:	2312      	movs	r3, #18
 800093a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800093c:	2301      	movs	r3, #1
 800093e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000940:	2300      	movs	r3, #0
 8000942:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000944:	2304      	movs	r3, #4
 8000946:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000948:	f107 0314 	add.w	r3, r7, #20
 800094c:	4619      	mov	r1, r3
 800094e:	480c      	ldr	r0, [pc, #48]	@ (8000980 <HAL_I2C_MspInit+0x8c>)
 8000950:	f001 fdea 	bl	8002528 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000954:	2300      	movs	r3, #0
 8000956:	60fb      	str	r3, [r7, #12]
 8000958:	4b08      	ldr	r3, [pc, #32]	@ (800097c <HAL_I2C_MspInit+0x88>)
 800095a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800095c:	4a07      	ldr	r2, [pc, #28]	@ (800097c <HAL_I2C_MspInit+0x88>)
 800095e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000962:	6413      	str	r3, [r2, #64]	@ 0x40
 8000964:	4b05      	ldr	r3, [pc, #20]	@ (800097c <HAL_I2C_MspInit+0x88>)
 8000966:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000968:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800096c:	60fb      	str	r3, [r7, #12]
 800096e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000970:	bf00      	nop
 8000972:	3728      	adds	r7, #40	@ 0x28
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	40005400 	.word	0x40005400
 800097c:	40023800 	.word	0x40023800
 8000980:	40020400 	.word	0x40020400

08000984 <MX_I2S3_Init>:

I2S_HandleTypeDef hi2s3;

/* I2S3 init function */
void MX_I2S3_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000988:	4b13      	ldr	r3, [pc, #76]	@ (80009d8 <MX_I2S3_Init+0x54>)
 800098a:	4a14      	ldr	r2, [pc, #80]	@ (80009dc <MX_I2S3_Init+0x58>)
 800098c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800098e:	4b12      	ldr	r3, [pc, #72]	@ (80009d8 <MX_I2S3_Init+0x54>)
 8000990:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000994:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000996:	4b10      	ldr	r3, [pc, #64]	@ (80009d8 <MX_I2S3_Init+0x54>)
 8000998:	2200      	movs	r2, #0
 800099a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 800099c:	4b0e      	ldr	r3, [pc, #56]	@ (80009d8 <MX_I2S3_Init+0x54>)
 800099e:	2200      	movs	r2, #0
 80009a0:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80009a2:	4b0d      	ldr	r3, [pc, #52]	@ (80009d8 <MX_I2S3_Init+0x54>)
 80009a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80009a8:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80009aa:	4b0b      	ldr	r3, [pc, #44]	@ (80009d8 <MX_I2S3_Init+0x54>)
 80009ac:	4a0c      	ldr	r2, [pc, #48]	@ (80009e0 <MX_I2S3_Init+0x5c>)
 80009ae:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80009b0:	4b09      	ldr	r3, [pc, #36]	@ (80009d8 <MX_I2S3_Init+0x54>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80009b6:	4b08      	ldr	r3, [pc, #32]	@ (80009d8 <MX_I2S3_Init+0x54>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80009bc:	4b06      	ldr	r3, [pc, #24]	@ (80009d8 <MX_I2S3_Init+0x54>)
 80009be:	2200      	movs	r2, #0
 80009c0:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80009c2:	4805      	ldr	r0, [pc, #20]	@ (80009d8 <MX_I2S3_Init+0x54>)
 80009c4:	f004 fbec 	bl	80051a0 <HAL_I2S_Init>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80009ce:	f000 f890 	bl	8000af2 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80009d2:	bf00      	nop
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	2000013c 	.word	0x2000013c
 80009dc:	40003c00 	.word	0x40003c00
 80009e0:	00017700 	.word	0x00017700

080009e4 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b08e      	sub	sp, #56	@ 0x38
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009f0:	2200      	movs	r2, #0
 80009f2:	601a      	str	r2, [r3, #0]
 80009f4:	605a      	str	r2, [r3, #4]
 80009f6:	609a      	str	r2, [r3, #8]
 80009f8:	60da      	str	r2, [r3, #12]
 80009fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009fc:	f107 0314 	add.w	r3, r7, #20
 8000a00:	2200      	movs	r2, #0
 8000a02:	601a      	str	r2, [r3, #0]
 8000a04:	605a      	str	r2, [r3, #4]
 8000a06:	609a      	str	r2, [r3, #8]
 8000a08:	60da      	str	r2, [r3, #12]
  if(i2sHandle->Instance==SPI3)
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	4a31      	ldr	r2, [pc, #196]	@ (8000ad4 <HAL_I2S_MspInit+0xf0>)
 8000a10:	4293      	cmp	r3, r2
 8000a12:	d15a      	bne.n	8000aca <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000a14:	2301      	movs	r3, #1
 8000a16:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000a18:	23c0      	movs	r3, #192	@ 0xc0
 8000a1a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000a1c:	2302      	movs	r3, #2
 8000a1e:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a20:	f107 0314 	add.w	r3, r7, #20
 8000a24:	4618      	mov	r0, r3
 8000a26:	f005 fef7 	bl	8006818 <HAL_RCCEx_PeriphCLKConfig>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000a30:	f000 f85f 	bl	8000af2 <Error_Handler>
    }

    /* I2S3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000a34:	2300      	movs	r3, #0
 8000a36:	613b      	str	r3, [r7, #16]
 8000a38:	4b27      	ldr	r3, [pc, #156]	@ (8000ad8 <HAL_I2S_MspInit+0xf4>)
 8000a3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a3c:	4a26      	ldr	r2, [pc, #152]	@ (8000ad8 <HAL_I2S_MspInit+0xf4>)
 8000a3e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000a42:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a44:	4b24      	ldr	r3, [pc, #144]	@ (8000ad8 <HAL_I2S_MspInit+0xf4>)
 8000a46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a48:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000a4c:	613b      	str	r3, [r7, #16]
 8000a4e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a50:	2300      	movs	r3, #0
 8000a52:	60fb      	str	r3, [r7, #12]
 8000a54:	4b20      	ldr	r3, [pc, #128]	@ (8000ad8 <HAL_I2S_MspInit+0xf4>)
 8000a56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a58:	4a1f      	ldr	r2, [pc, #124]	@ (8000ad8 <HAL_I2S_MspInit+0xf4>)
 8000a5a:	f043 0301 	orr.w	r3, r3, #1
 8000a5e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a60:	4b1d      	ldr	r3, [pc, #116]	@ (8000ad8 <HAL_I2S_MspInit+0xf4>)
 8000a62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a64:	f003 0301 	and.w	r3, r3, #1
 8000a68:	60fb      	str	r3, [r7, #12]
 8000a6a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	60bb      	str	r3, [r7, #8]
 8000a70:	4b19      	ldr	r3, [pc, #100]	@ (8000ad8 <HAL_I2S_MspInit+0xf4>)
 8000a72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a74:	4a18      	ldr	r2, [pc, #96]	@ (8000ad8 <HAL_I2S_MspInit+0xf4>)
 8000a76:	f043 0304 	orr.w	r3, r3, #4
 8000a7a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a7c:	4b16      	ldr	r3, [pc, #88]	@ (8000ad8 <HAL_I2S_MspInit+0xf4>)
 8000a7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a80:	f003 0304 	and.w	r3, r3, #4
 8000a84:	60bb      	str	r3, [r7, #8]
 8000a86:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000a88:	2310      	movs	r3, #16
 8000a8a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a90:	2300      	movs	r3, #0
 8000a92:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a94:	2300      	movs	r3, #0
 8000a96:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000a98:	2306      	movs	r3, #6
 8000a9a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000a9c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	480e      	ldr	r0, [pc, #56]	@ (8000adc <HAL_I2S_MspInit+0xf8>)
 8000aa4:	f001 fd40 	bl	8002528 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000aa8:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000aac:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aae:	2302      	movs	r3, #2
 8000ab0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000aba:	2306      	movs	r3, #6
 8000abc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000abe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	4806      	ldr	r0, [pc, #24]	@ (8000ae0 <HAL_I2S_MspInit+0xfc>)
 8000ac6:	f001 fd2f 	bl	8002528 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000aca:	bf00      	nop
 8000acc:	3738      	adds	r7, #56	@ 0x38
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	40003c00 	.word	0x40003c00
 8000ad8:	40023800 	.word	0x40023800
 8000adc:	40020000 	.word	0x40020000
 8000ae0:	40020800 	.word	0x40020800

08000ae4 <assert_failed>:
void logError(const char* message);
void MX_ADC1_Init(void); // Prototipi burada tanımla

// assert_failed fonksiyonu
void assert_failed(uint8_t *file, uint32_t line)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b083      	sub	sp, #12
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
 8000aec:	6039      	str	r1, [r7, #0]
    // Hata durumu için sonsuz döngü
    while (1)
 8000aee:	bf00      	nop
 8000af0:	e7fd      	b.n	8000aee <assert_failed+0xa>

08000af2 <Error_Handler>:
    }
}

// Error_Handler fonksiyonu
void Error_Handler(void)
{
 8000af2:	b480      	push	{r7}
 8000af4:	af00      	add	r7, sp, #0
    // Hata durumu için sonsuz döngü
    while (1)
 8000af6:	bf00      	nop
 8000af8:	e7fd      	b.n	8000af6 <Error_Handler+0x4>

08000afa <SystemClock_Config>:
    }
}

// SystemClock_Config fonksiyonu
void SystemClock_Config(void)
{
 8000afa:	b580      	push	{r7, lr}
 8000afc:	b092      	sub	sp, #72	@ 0x48
 8000afe:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b00:	f107 0318 	add.w	r3, r7, #24
 8000b04:	2230      	movs	r2, #48	@ 0x30
 8000b06:	2100      	movs	r1, #0
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f00c f87f 	bl	800cc0c <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b0e:	1d3b      	adds	r3, r7, #4
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	605a      	str	r2, [r3, #4]
 8000b16:	609a      	str	r2, [r3, #8]
 8000b18:	60da      	str	r2, [r3, #12]
 8000b1a:	611a      	str	r2, [r3, #16]

    // HSI'yi başlat
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b1c:	2302      	movs	r3, #2
 8000b1e:	61bb      	str	r3, [r7, #24]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b20:	2301      	movs	r3, #1
 8000b22:	627b      	str	r3, [r7, #36]	@ 0x24
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b24:	2310      	movs	r3, #16
 8000b26:	62bb      	str	r3, [r7, #40]	@ 0x28
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b28:	2302      	movs	r3, #2
 8000b2a:	633b      	str	r3, [r7, #48]	@ 0x30
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	637b      	str	r3, [r7, #52]	@ 0x34
    RCC_OscInitStruct.PLL.PLLM = 16; // HSI 16 MHz
 8000b30:	2310      	movs	r3, #16
 8000b32:	63bb      	str	r3, [r7, #56]	@ 0x38
    RCC_OscInitStruct.PLL.PLLN = 336; // 336 MHz
 8000b34:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000b38:	63fb      	str	r3, [r7, #60]	@ 0x3c
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2; // 168 MHz
 8000b3a:	2302      	movs	r3, #2
 8000b3c:	643b      	str	r3, [r7, #64]	@ 0x40
    RCC_OscInitStruct.PLL.PLLQ = 7; // 48 MHz
 8000b3e:	2307      	movs	r3, #7
 8000b40:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000b42:	f107 0318 	add.w	r3, r7, #24
 8000b46:	4618      	mov	r0, r3
 8000b48:	f005 f872 	bl	8005c30 <HAL_RCC_OscConfig>

    // Saat kaynağını ve saat ağaçlarını ayarla
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000b4c:	230f      	movs	r3, #15
 8000b4e:	607b      	str	r3, [r7, #4]
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b50:	2302      	movs	r3, #2
 8000b52:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b54:	2300      	movs	r3, #0
 8000b56:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b58:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000b5c:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b5e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b62:	617b      	str	r3, [r7, #20]
    HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 8000b64:	1d3b      	adds	r3, r7, #4
 8000b66:	2105      	movs	r1, #5
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f005 fb8d 	bl	8006288 <HAL_RCC_ClockConfig>
}
 8000b6e:	bf00      	nop
 8000b70:	3748      	adds	r7, #72	@ 0x48
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
	...

08000b78 <PID_Control>:

// PID Kontrol Fonksiyonu
uint16_t PID_Control(uint16_t setpoint, uint16_t measuredSpeed) {
 8000b78:	b480      	push	{r7}
 8000b7a:	b087      	sub	sp, #28
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	4603      	mov	r3, r0
 8000b80:	460a      	mov	r2, r1
 8000b82:	80fb      	strh	r3, [r7, #6]
 8000b84:	4613      	mov	r3, r2
 8000b86:	80bb      	strh	r3, [r7, #4]
    float error = setpoint - measuredSpeed;
 8000b88:	88fa      	ldrh	r2, [r7, #6]
 8000b8a:	88bb      	ldrh	r3, [r7, #4]
 8000b8c:	1ad3      	subs	r3, r2, r3
 8000b8e:	ee07 3a90 	vmov	s15, r3
 8000b92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b96:	edc7 7a04 	vstr	s15, [r7, #16]
    integral += error;
 8000b9a:	4b2a      	ldr	r3, [pc, #168]	@ (8000c44 <PID_Control+0xcc>)
 8000b9c:	ed93 7a00 	vldr	s14, [r3]
 8000ba0:	edd7 7a04 	vldr	s15, [r7, #16]
 8000ba4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ba8:	4b26      	ldr	r3, [pc, #152]	@ (8000c44 <PID_Control+0xcc>)
 8000baa:	edc3 7a00 	vstr	s15, [r3]
    float derivative = error - previousError;
 8000bae:	4b26      	ldr	r3, [pc, #152]	@ (8000c48 <PID_Control+0xd0>)
 8000bb0:	edd3 7a00 	vldr	s15, [r3]
 8000bb4:	ed97 7a04 	vldr	s14, [r7, #16]
 8000bb8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000bbc:	edc7 7a03 	vstr	s15, [r7, #12]
    float output = (Kp * error) + (Ki * integral) + (Kd * derivative);
 8000bc0:	4b22      	ldr	r3, [pc, #136]	@ (8000c4c <PID_Control+0xd4>)
 8000bc2:	ed93 7a00 	vldr	s14, [r3]
 8000bc6:	edd7 7a04 	vldr	s15, [r7, #16]
 8000bca:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000bce:	4b20      	ldr	r3, [pc, #128]	@ (8000c50 <PID_Control+0xd8>)
 8000bd0:	edd3 6a00 	vldr	s13, [r3]
 8000bd4:	4b1b      	ldr	r3, [pc, #108]	@ (8000c44 <PID_Control+0xcc>)
 8000bd6:	edd3 7a00 	vldr	s15, [r3]
 8000bda:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000bde:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000be2:	4b1c      	ldr	r3, [pc, #112]	@ (8000c54 <PID_Control+0xdc>)
 8000be4:	edd3 6a00 	vldr	s13, [r3]
 8000be8:	edd7 7a03 	vldr	s15, [r7, #12]
 8000bec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000bf0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000bf4:	edc7 7a05 	vstr	s15, [r7, #20]

    previousError = error;
 8000bf8:	4a13      	ldr	r2, [pc, #76]	@ (8000c48 <PID_Control+0xd0>)
 8000bfa:	693b      	ldr	r3, [r7, #16]
 8000bfc:	6013      	str	r3, [r2, #0]

    // Çıkışı geçerli PWM aralığında tut
    if (output > 1000) {
 8000bfe:	edd7 7a05 	vldr	s15, [r7, #20]
 8000c02:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8000c58 <PID_Control+0xe0>
 8000c06:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c0e:	dd02      	ble.n	8000c16 <PID_Control+0x9e>
        output = 1000;
 8000c10:	4b12      	ldr	r3, [pc, #72]	@ (8000c5c <PID_Control+0xe4>)
 8000c12:	617b      	str	r3, [r7, #20]
 8000c14:	e009      	b.n	8000c2a <PID_Control+0xb2>
    } else if (output < 0) {
 8000c16:	edd7 7a05 	vldr	s15, [r7, #20]
 8000c1a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000c1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c22:	d502      	bpl.n	8000c2a <PID_Control+0xb2>
        output = 0;
 8000c24:	f04f 0300 	mov.w	r3, #0
 8000c28:	617b      	str	r3, [r7, #20]
    }

    return (uint16_t)output;
 8000c2a:	edd7 7a05 	vldr	s15, [r7, #20]
 8000c2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000c32:	ee17 3a90 	vmov	r3, s15
 8000c36:	b29b      	uxth	r3, r3
}
 8000c38:	4618      	mov	r0, r3
 8000c3a:	371c      	adds	r7, #28
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr
 8000c44:	20000198 	.word	0x20000198
 8000c48:	20000194 	.word	0x20000194
 8000c4c:	20000000 	.word	0x20000000
 8000c50:	2000018c 	.word	0x2000018c
 8000c54:	20000190 	.word	0x20000190
 8000c58:	447a0000 	.word	0x447a0000
 8000c5c:	447a0000 	.word	0x447a0000

08000c60 <logError>:
        encoderCount++;  // Her pulse'ta encoder sayısını artır
    }
}

// Hata kaydetme fonksiyonu
void logError(const char* message) {
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)message, strlen(message), HAL_MAX_DELAY);
 8000c68:	6878      	ldr	r0, [r7, #4]
 8000c6a:	f7ff faad 	bl	80001c8 <strlen>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	b29a      	uxth	r2, r3
 8000c72:	f04f 33ff 	mov.w	r3, #4294967295
 8000c76:	6879      	ldr	r1, [r7, #4]
 8000c78:	4803      	ldr	r0, [pc, #12]	@ (8000c88 <logError+0x28>)
 8000c7a:	f007 f93d 	bl	8007ef8 <HAL_UART_Transmit>
}
 8000c7e:	bf00      	nop
 8000c80:	3708      	adds	r7, #8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	20000244 	.word	0x20000244

08000c8c <setMotorPWM>:

void setMotorPWM(uint16_t dutyCycle) {
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	4603      	mov	r3, r0
 8000c94:	80fb      	strh	r3, [r7, #6]
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, dutyCycle);
 8000c96:	4b05      	ldr	r3, [pc, #20]	@ (8000cac <setMotorPWM+0x20>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	88fa      	ldrh	r2, [r7, #6]
 8000c9c:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000c9e:	bf00      	nop
 8000ca0:	370c      	adds	r7, #12
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	200001fc 	.word	0x200001fc

08000cb0 <processCommand>:

void processCommand(char* command) {
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b086      	sub	sp, #24
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
    if (strlen(command) == 6 && command[5] == 'F') {
 8000cb8:	6878      	ldr	r0, [r7, #4]
 8000cba:	f7ff fa85 	bl	80001c8 <strlen>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b06      	cmp	r3, #6
 8000cc2:	d176      	bne.n	8000db2 <processCommand+0x102>
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	3305      	adds	r3, #5
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	2b46      	cmp	r3, #70	@ 0x46
 8000ccc:	d171      	bne.n	8000db2 <processCommand+0x102>
        if (command[0] == 'S') {
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	2b53      	cmp	r3, #83	@ 0x53
 8000cd4:	d151      	bne.n	8000d7a <processCommand+0xca>
            char direction = command[1];
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	785b      	ldrb	r3, [r3, #1]
 8000cda:	75fb      	strb	r3, [r7, #23]
            char duty[4];
            strncpy(duty, &command[2], 3);
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	1c99      	adds	r1, r3, #2
 8000ce0:	f107 0308 	add.w	r3, r7, #8
 8000ce4:	2203      	movs	r2, #3
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f00b ffaa 	bl	800cc40 <strncpy>
            duty[3] = '\0';
 8000cec:	2300      	movs	r3, #0
 8000cee:	72fb      	strb	r3, [r7, #11]
            int dutyCycle = atoi(duty);
 8000cf0:	f107 0308 	add.w	r3, r7, #8
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f00b fe43 	bl	800c980 <atoi>
 8000cfa:	6138      	str	r0, [r7, #16]

            if (dutyCycle >= 0 && dutyCycle <= 100) {
 8000cfc:	693b      	ldr	r3, [r7, #16]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	db34      	blt.n	8000d6c <processCommand+0xbc>
 8000d02:	693b      	ldr	r3, [r7, #16]
 8000d04:	2b64      	cmp	r3, #100	@ 0x64
 8000d06:	dc31      	bgt.n	8000d6c <processCommand+0xbc>
                uint16_t pidOutput = PID_Control(targetSpeed, currentSpeed);
 8000d08:	4b2e      	ldr	r3, [pc, #184]	@ (8000dc4 <processCommand+0x114>)
 8000d0a:	881b      	ldrh	r3, [r3, #0]
 8000d0c:	4a2e      	ldr	r2, [pc, #184]	@ (8000dc8 <processCommand+0x118>)
 8000d0e:	8812      	ldrh	r2, [r2, #0]
 8000d10:	4611      	mov	r1, r2
 8000d12:	4618      	mov	r0, r3
 8000d14:	f7ff ff30 	bl	8000b78 <PID_Control>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	81fb      	strh	r3, [r7, #14]

                if (direction == '1') {
 8000d1c:	7dfb      	ldrb	r3, [r7, #23]
 8000d1e:	2b31      	cmp	r3, #49	@ 0x31
 8000d20:	d10a      	bne.n	8000d38 <processCommand+0x88>
                    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000d22:	2201      	movs	r2, #1
 8000d24:	2101      	movs	r1, #1
 8000d26:	4829      	ldr	r0, [pc, #164]	@ (8000dcc <processCommand+0x11c>)
 8000d28:	f001 fefe 	bl	8002b28 <HAL_GPIO_WritePin>
                    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	2102      	movs	r1, #2
 8000d30:	4826      	ldr	r0, [pc, #152]	@ (8000dcc <processCommand+0x11c>)
 8000d32:	f001 fef9 	bl	8002b28 <HAL_GPIO_WritePin>
 8000d36:	e014      	b.n	8000d62 <processCommand+0xb2>
                } else if (direction == '2') {
 8000d38:	7dfb      	ldrb	r3, [r7, #23]
 8000d3a:	2b32      	cmp	r3, #50	@ 0x32
 8000d3c:	d10a      	bne.n	8000d54 <processCommand+0xa4>
                    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8000d3e:	2201      	movs	r2, #1
 8000d40:	2102      	movs	r1, #2
 8000d42:	4822      	ldr	r0, [pc, #136]	@ (8000dcc <processCommand+0x11c>)
 8000d44:	f001 fef0 	bl	8002b28 <HAL_GPIO_WritePin>
                    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000d48:	2200      	movs	r2, #0
 8000d4a:	2101      	movs	r1, #1
 8000d4c:	481f      	ldr	r0, [pc, #124]	@ (8000dcc <processCommand+0x11c>)
 8000d4e:	f001 feeb 	bl	8002b28 <HAL_GPIO_WritePin>
 8000d52:	e006      	b.n	8000d62 <processCommand+0xb2>
                } else {
                    logError("A1050F: Geçersiz yön.\r\n");
 8000d54:	481e      	ldr	r0, [pc, #120]	@ (8000dd0 <processCommand+0x120>)
 8000d56:	f7ff ff83 	bl	8000c60 <logError>
                    setMotorPWM(0);
 8000d5a:	2000      	movs	r0, #0
 8000d5c:	f7ff ff96 	bl	8000c8c <setMotorPWM>
 8000d60:	e02d      	b.n	8000dbe <processCommand+0x10e>
                    return;
                }
                setMotorPWM(pidOutput);  // PID çıkışına göre PWM ayarla
 8000d62:	89fb      	ldrh	r3, [r7, #14]
 8000d64:	4618      	mov	r0, r3
 8000d66:	f7ff ff91 	bl	8000c8c <setMotorPWM>
            if (dutyCycle >= 0 && dutyCycle <= 100) {
 8000d6a:	e021      	b.n	8000db0 <processCommand+0x100>
            } else {
                logError("A1050F: Geçersiz duty cycle.\r\n");
 8000d6c:	4819      	ldr	r0, [pc, #100]	@ (8000dd4 <processCommand+0x124>)
 8000d6e:	f7ff ff77 	bl	8000c60 <logError>
                setMotorPWM(0);
 8000d72:	2000      	movs	r0, #0
 8000d74:	f7ff ff8a 	bl	8000c8c <setMotorPWM>
        if (command[0] == 'S') {
 8000d78:	e021      	b.n	8000dbe <processCommand+0x10e>
            }
        } else if (strncmp(command, "S1000F", 6) == 0 || strncmp(command, "S2000F", 6) == 0) {
 8000d7a:	2206      	movs	r2, #6
 8000d7c:	4916      	ldr	r1, [pc, #88]	@ (8000dd8 <processCommand+0x128>)
 8000d7e:	6878      	ldr	r0, [r7, #4]
 8000d80:	f00b ff4c 	bl	800cc1c <strncmp>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d007      	beq.n	8000d9a <processCommand+0xea>
 8000d8a:	2206      	movs	r2, #6
 8000d8c:	4913      	ldr	r1, [pc, #76]	@ (8000ddc <processCommand+0x12c>)
 8000d8e:	6878      	ldr	r0, [r7, #4]
 8000d90:	f00b ff44 	bl	800cc1c <strncmp>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d103      	bne.n	8000da2 <processCommand+0xf2>
            setMotorPWM(0);
 8000d9a:	2000      	movs	r0, #0
 8000d9c:	f7ff ff76 	bl	8000c8c <setMotorPWM>
 8000da0:	e006      	b.n	8000db0 <processCommand+0x100>
        } else {
            logError("A1050F: Geçersiz mesaj formatı.\r\n");
 8000da2:	480f      	ldr	r0, [pc, #60]	@ (8000de0 <processCommand+0x130>)
 8000da4:	f7ff ff5c 	bl	8000c60 <logError>
            setMotorPWM(0);
 8000da8:	2000      	movs	r0, #0
 8000daa:	f7ff ff6f 	bl	8000c8c <setMotorPWM>
        if (command[0] == 'S') {
 8000dae:	e006      	b.n	8000dbe <processCommand+0x10e>
 8000db0:	e005      	b.n	8000dbe <processCommand+0x10e>
        }
    } else {
        logError("A1050F: Geçersiz mesaj formatı.\r\n");
 8000db2:	480b      	ldr	r0, [pc, #44]	@ (8000de0 <processCommand+0x130>)
 8000db4:	f7ff ff54 	bl	8000c60 <logError>
        setMotorPWM(0);
 8000db8:	2000      	movs	r0, #0
 8000dba:	f7ff ff67 	bl	8000c8c <setMotorPWM>
    }
}
 8000dbe:	3718      	adds	r7, #24
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	20000004 	.word	0x20000004
 8000dc8:	2000019c 	.word	0x2000019c
 8000dcc:	40020400 	.word	0x40020400
 8000dd0:	0800cd8c 	.word	0x0800cd8c
 8000dd4:	0800cda8 	.word	0x0800cda8
 8000dd8:	0800cdc8 	.word	0x0800cdc8
 8000ddc:	0800cdd0 	.word	0x0800cdd0
 8000de0:	0800cdd8 	.word	0x0800cdd8

08000de4 <emergencyStop>:

void emergencyStop(void) {
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
    setMotorPWM(0);
 8000de8:	2000      	movs	r0, #0
 8000dea:	f7ff ff4f 	bl	8000c8c <setMotorPWM>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);  // Motoru devre dışı bırak
 8000dee:	2200      	movs	r2, #0
 8000df0:	2101      	movs	r1, #1
 8000df2:	4806      	ldr	r0, [pc, #24]	@ (8000e0c <emergencyStop+0x28>)
 8000df4:	f001 fe98 	bl	8002b28 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);  // Motoru devre dışı bırak
 8000df8:	2200      	movs	r2, #0
 8000dfa:	2102      	movs	r1, #2
 8000dfc:	4803      	ldr	r0, [pc, #12]	@ (8000e0c <emergencyStop+0x28>)
 8000dfe:	f001 fe93 	bl	8002b28 <HAL_GPIO_WritePin>
    logError("Acil durdurma aktif.\r\n");
 8000e02:	4803      	ldr	r0, [pc, #12]	@ (8000e10 <emergencyStop+0x2c>)
 8000e04:	f7ff ff2c 	bl	8000c60 <logError>
}
 8000e08:	bf00      	nop
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	40020400 	.word	0x40020400
 8000e10:	0800cdfc 	.word	0x0800cdfc

08000e14 <measureMotorCurrent>:

void measureMotorCurrent(void) {
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
    HAL_ADC_Start(&hadc1);  // ADC dönüşümünü başlat
 8000e1a:	481c      	ldr	r0, [pc, #112]	@ (8000e8c <measureMotorCurrent+0x78>)
 8000e1c:	f000 fd6c 	bl	80018f8 <HAL_ADC_Start>
    if (HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK) {
 8000e20:	2164      	movs	r1, #100	@ 0x64
 8000e22:	481a      	ldr	r0, [pc, #104]	@ (8000e8c <measureMotorCurrent+0x78>)
 8000e24:	f000 feae 	bl	8001b84 <HAL_ADC_PollForConversion>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d129      	bne.n	8000e82 <measureMotorCurrent+0x6e>
        uint16_t currentSensorValue = HAL_ADC_GetValue(&hadc1);  // Akım sensöründen ADC okuması
 8000e2e:	4817      	ldr	r0, [pc, #92]	@ (8000e8c <measureMotorCurrent+0x78>)
 8000e30:	f000 ff33 	bl	8001c9a <HAL_ADC_GetValue>
 8000e34:	4603      	mov	r3, r0
 8000e36:	80fb      	strh	r3, [r7, #6]
        HAL_ADC_Stop(&hadc1);  // ADC dönüşümünü durdur
 8000e38:	4814      	ldr	r0, [pc, #80]	@ (8000e8c <measureMotorCurrent+0x78>)
 8000e3a:	f000 fe55 	bl	8001ae8 <HAL_ADC_Stop>

        float current = (float)currentSensorValue * ADC_RESOLUTION / ADC_MAX_VALUE * CURRENT_SENSOR_GAIN;
 8000e3e:	88fb      	ldrh	r3, [r7, #6]
 8000e40:	ee07 3a90 	vmov	s15, r3
 8000e44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e48:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8000e90 <measureMotorCurrent+0x7c>
 8000e4c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000e50:	eddf 6a10 	vldr	s13, [pc, #64]	@ 8000e94 <measureMotorCurrent+0x80>
 8000e54:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e58:	edc7 7a00 	vstr	s15, [r7]
        if (current > currentLimit) {
 8000e5c:	4b0e      	ldr	r3, [pc, #56]	@ (8000e98 <measureMotorCurrent+0x84>)
 8000e5e:	881b      	ldrh	r3, [r3, #0]
 8000e60:	ee07 3a90 	vmov	s15, r3
 8000e64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e68:	ed97 7a00 	vldr	s14, [r7]
 8000e6c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000e70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e74:	dc00      	bgt.n	8000e78 <measureMotorCurrent+0x64>
            logError("Aşırı akım tespit edildi.\r\n");
            emergencyStop();
        }
    }
}
 8000e76:	e004      	b.n	8000e82 <measureMotorCurrent+0x6e>
            logError("Aşırı akım tespit edildi.\r\n");
 8000e78:	4808      	ldr	r0, [pc, #32]	@ (8000e9c <measureMotorCurrent+0x88>)
 8000e7a:	f7ff fef1 	bl	8000c60 <logError>
            emergencyStop();
 8000e7e:	f7ff ffb1 	bl	8000de4 <emergencyStop>
}
 8000e82:	bf00      	nop
 8000e84:	3708      	adds	r7, #8
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	200000a0 	.word	0x200000a0
 8000e90:	45800000 	.word	0x45800000
 8000e94:	457ff000 	.word	0x457ff000
 8000e98:	20000006 	.word	0x20000006
 8000e9c:	0800ce14 	.word	0x0800ce14

08000ea0 <calculateChecksum>:

uint8_t calculateChecksum(uint8_t* data, uint8_t length) {
 8000ea0:	b480      	push	{r7}
 8000ea2:	b085      	sub	sp, #20
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
 8000ea8:	460b      	mov	r3, r1
 8000eaa:	70fb      	strb	r3, [r7, #3]
    uint8_t checksum = 0;
 8000eac:	2300      	movs	r3, #0
 8000eae:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i < length; i++) {
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	73bb      	strb	r3, [r7, #14]
 8000eb4:	e009      	b.n	8000eca <calculateChecksum+0x2a>
        checksum += data[i];
 8000eb6:	7bbb      	ldrb	r3, [r7, #14]
 8000eb8:	687a      	ldr	r2, [r7, #4]
 8000eba:	4413      	add	r3, r2
 8000ebc:	781a      	ldrb	r2, [r3, #0]
 8000ebe:	7bfb      	ldrb	r3, [r7, #15]
 8000ec0:	4413      	add	r3, r2
 8000ec2:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i < length; i++) {
 8000ec4:	7bbb      	ldrb	r3, [r7, #14]
 8000ec6:	3301      	adds	r3, #1
 8000ec8:	73bb      	strb	r3, [r7, #14]
 8000eca:	7bba      	ldrb	r2, [r7, #14]
 8000ecc:	78fb      	ldrb	r3, [r7, #3]
 8000ece:	429a      	cmp	r2, r3
 8000ed0:	d3f1      	bcc.n	8000eb6 <calculateChecksum+0x16>
    }
    return checksum;
 8000ed2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	3714      	adds	r7, #20
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr

08000ee0 <validateChecksum>:

int validateChecksum(uint8_t* data, uint8_t length) {
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b084      	sub	sp, #16
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
 8000ee8:	460b      	mov	r3, r1
 8000eea:	70fb      	strb	r3, [r7, #3]
    uint8_t receivedChecksum = data[length];
 8000eec:	78fb      	ldrb	r3, [r7, #3]
 8000eee:	687a      	ldr	r2, [r7, #4]
 8000ef0:	4413      	add	r3, r2
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	73fb      	strb	r3, [r7, #15]
    uint8_t calculatedChecksum = calculateChecksum(data, length);
 8000ef6:	78fb      	ldrb	r3, [r7, #3]
 8000ef8:	4619      	mov	r1, r3
 8000efa:	6878      	ldr	r0, [r7, #4]
 8000efc:	f7ff ffd0 	bl	8000ea0 <calculateChecksum>
 8000f00:	4603      	mov	r3, r0
 8000f02:	73bb      	strb	r3, [r7, #14]
    return receivedChecksum == calculatedChecksum;
 8000f04:	7bfa      	ldrb	r2, [r7, #15]
 8000f06:	7bbb      	ldrb	r3, [r7, #14]
 8000f08:	429a      	cmp	r2, r3
 8000f0a:	bf0c      	ite	eq
 8000f0c:	2301      	moveq	r3, #1
 8000f0e:	2300      	movne	r3, #0
 8000f10:	b2db      	uxtb	r3, r3
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3710      	adds	r7, #16
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
	...

08000f1c <isEmergencyButtonPressed>:

int isEmergencyButtonPressed(void) {
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);  // GPIO_PIN_13 acil durdurma butonunu varsayalım
 8000f20:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f24:	4802      	ldr	r0, [pc, #8]	@ (8000f30 <isEmergencyButtonPressed+0x14>)
 8000f26:	f001 fddf 	bl	8002ae8 <HAL_GPIO_ReadPin>
 8000f2a:	4603      	mov	r3, r0
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	40020800 	.word	0x40020800

08000f34 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2) {
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a12      	ldr	r2, [pc, #72]	@ (8000f8c <HAL_UART_RxCpltCallback+0x58>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d11d      	bne.n	8000f82 <HAL_UART_RxCpltCallback+0x4e>
        if (isEmergencyButtonPressed()) {
 8000f46:	f7ff ffe9 	bl	8000f1c <isEmergencyButtonPressed>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d002      	beq.n	8000f56 <HAL_UART_RxCpltCallback+0x22>
            emergencyStop();
 8000f50:	f7ff ff48 	bl	8000de4 <emergencyStop>
 8000f54:	e010      	b.n	8000f78 <HAL_UART_RxCpltCallback+0x44>
        } else {
            if (validateChecksum((uint8_t*)receivedCommand, 6)) {
 8000f56:	2106      	movs	r1, #6
 8000f58:	480d      	ldr	r0, [pc, #52]	@ (8000f90 <HAL_UART_RxCpltCallback+0x5c>)
 8000f5a:	f7ff ffc1 	bl	8000ee0 <validateChecksum>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d003      	beq.n	8000f6c <HAL_UART_RxCpltCallback+0x38>
                processCommand(receivedCommand);
 8000f64:	480a      	ldr	r0, [pc, #40]	@ (8000f90 <HAL_UART_RxCpltCallback+0x5c>)
 8000f66:	f7ff fea3 	bl	8000cb0 <processCommand>
 8000f6a:	e005      	b.n	8000f78 <HAL_UART_RxCpltCallback+0x44>
            } else {
                logError("Checksum hatası.\r\n");
 8000f6c:	4809      	ldr	r0, [pc, #36]	@ (8000f94 <HAL_UART_RxCpltCallback+0x60>)
 8000f6e:	f7ff fe77 	bl	8000c60 <logError>
                setMotorPWM(0);
 8000f72:	2000      	movs	r0, #0
 8000f74:	f7ff fe8a 	bl	8000c8c <setMotorPWM>
            }
        }
        HAL_UART_Receive_IT(&huart2, (uint8_t*)receivedCommand, 7);
 8000f78:	2207      	movs	r2, #7
 8000f7a:	4905      	ldr	r1, [pc, #20]	@ (8000f90 <HAL_UART_RxCpltCallback+0x5c>)
 8000f7c:	4806      	ldr	r0, [pc, #24]	@ (8000f98 <HAL_UART_RxCpltCallback+0x64>)
 8000f7e:	f007 f846 	bl	800800e <HAL_UART_Receive_IT>
    }
}
 8000f82:	bf00      	nop
 8000f84:	3708      	adds	r7, #8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	40004400 	.word	0x40004400
 8000f90:	20000184 	.word	0x20000184
 8000f94:	0800ce34 	.word	0x0800ce34
 8000f98:	20000244 	.word	0x20000244

08000f9c <main>:
/**
  * @brief  Uygulama giriş noktası.
  * @retval int
  */
int main(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
    HAL_Init();
 8000fa0:	f000 faa8 	bl	80014f4 <HAL_Init>
    SystemClock_Config();
 8000fa4:	f7ff fda9 	bl	8000afa <SystemClock_Config>

    MX_GPIO_Init();
 8000fa8:	f7ff fb24 	bl	80005f4 <MX_GPIO_Init>
    MX_I2C1_Init();
 8000fac:	f7ff fc74 	bl	8000898 <MX_I2C1_Init>
    MX_I2S3_Init();
 8000fb0:	f7ff fce8 	bl	8000984 <MX_I2S3_Init>
    MX_SPI1_Init();
 8000fb4:	f000 f818 	bl	8000fe8 <MX_SPI1_Init>
    MX_USB_HOST_Init();
 8000fb8:	f00b f9d8 	bl	800c36c <MX_USB_HOST_Init>
    MX_TIM2_Init();
 8000fbc:	f000 f946 	bl	800124c <MX_TIM2_Init>
    MX_USART2_UART_Init();
 8000fc0:	f000 f9f4 	bl	80013ac <MX_USART2_UART_Init>
    MX_ADC1_Init();  // ADC başlatıldı
 8000fc4:	f7ff fa80 	bl	80004c8 <MX_ADC1_Init>

    HAL_UART_Receive_IT(&huart2, (uint8_t*)receivedCommand, 7);
 8000fc8:	2207      	movs	r2, #7
 8000fca:	4905      	ldr	r1, [pc, #20]	@ (8000fe0 <main+0x44>)
 8000fcc:	4805      	ldr	r0, [pc, #20]	@ (8000fe4 <main+0x48>)
 8000fce:	f007 f81e 	bl	800800e <HAL_UART_Receive_IT>

    while (1)
    {
        MX_USB_HOST_Process();
 8000fd2:	f00b f9f1 	bl	800c3b8 <MX_USB_HOST_Process>
        measureMotorCurrent();  // Motor akımını sürekli izle
 8000fd6:	f7ff ff1d 	bl	8000e14 <measureMotorCurrent>
        MX_USB_HOST_Process();
 8000fda:	bf00      	nop
 8000fdc:	e7f9      	b.n	8000fd2 <main+0x36>
 8000fde:	bf00      	nop
 8000fe0:	20000184 	.word	0x20000184
 8000fe4:	20000244 	.word	0x20000244

08000fe8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000fec:	4b17      	ldr	r3, [pc, #92]	@ (800104c <MX_SPI1_Init+0x64>)
 8000fee:	4a18      	ldr	r2, [pc, #96]	@ (8001050 <MX_SPI1_Init+0x68>)
 8000ff0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ff2:	4b16      	ldr	r3, [pc, #88]	@ (800104c <MX_SPI1_Init+0x64>)
 8000ff4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000ff8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ffa:	4b14      	ldr	r3, [pc, #80]	@ (800104c <MX_SPI1_Init+0x64>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001000:	4b12      	ldr	r3, [pc, #72]	@ (800104c <MX_SPI1_Init+0x64>)
 8001002:	2200      	movs	r2, #0
 8001004:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001006:	4b11      	ldr	r3, [pc, #68]	@ (800104c <MX_SPI1_Init+0x64>)
 8001008:	2200      	movs	r2, #0
 800100a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800100c:	4b0f      	ldr	r3, [pc, #60]	@ (800104c <MX_SPI1_Init+0x64>)
 800100e:	2200      	movs	r2, #0
 8001010:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001012:	4b0e      	ldr	r3, [pc, #56]	@ (800104c <MX_SPI1_Init+0x64>)
 8001014:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001018:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800101a:	4b0c      	ldr	r3, [pc, #48]	@ (800104c <MX_SPI1_Init+0x64>)
 800101c:	2200      	movs	r2, #0
 800101e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001020:	4b0a      	ldr	r3, [pc, #40]	@ (800104c <MX_SPI1_Init+0x64>)
 8001022:	2200      	movs	r2, #0
 8001024:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001026:	4b09      	ldr	r3, [pc, #36]	@ (800104c <MX_SPI1_Init+0x64>)
 8001028:	2200      	movs	r2, #0
 800102a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800102c:	4b07      	ldr	r3, [pc, #28]	@ (800104c <MX_SPI1_Init+0x64>)
 800102e:	2200      	movs	r2, #0
 8001030:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001032:	4b06      	ldr	r3, [pc, #24]	@ (800104c <MX_SPI1_Init+0x64>)
 8001034:	220a      	movs	r2, #10
 8001036:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001038:	4804      	ldr	r0, [pc, #16]	@ (800104c <MX_SPI1_Init+0x64>)
 800103a:	f005 fe47 	bl	8006ccc <HAL_SPI_Init>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001044:	f7ff fd55 	bl	8000af2 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001048:	bf00      	nop
 800104a:	bd80      	pop	{r7, pc}
 800104c:	200001a0 	.word	0x200001a0
 8001050:	40013000 	.word	0x40013000

08001054 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b08a      	sub	sp, #40	@ 0x28
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800105c:	f107 0314 	add.w	r3, r7, #20
 8001060:	2200      	movs	r2, #0
 8001062:	601a      	str	r2, [r3, #0]
 8001064:	605a      	str	r2, [r3, #4]
 8001066:	609a      	str	r2, [r3, #8]
 8001068:	60da      	str	r2, [r3, #12]
 800106a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a19      	ldr	r2, [pc, #100]	@ (80010d8 <HAL_SPI_MspInit+0x84>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d12b      	bne.n	80010ce <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001076:	2300      	movs	r3, #0
 8001078:	613b      	str	r3, [r7, #16]
 800107a:	4b18      	ldr	r3, [pc, #96]	@ (80010dc <HAL_SPI_MspInit+0x88>)
 800107c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800107e:	4a17      	ldr	r2, [pc, #92]	@ (80010dc <HAL_SPI_MspInit+0x88>)
 8001080:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001084:	6453      	str	r3, [r2, #68]	@ 0x44
 8001086:	4b15      	ldr	r3, [pc, #84]	@ (80010dc <HAL_SPI_MspInit+0x88>)
 8001088:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800108a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800108e:	613b      	str	r3, [r7, #16]
 8001090:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001092:	2300      	movs	r3, #0
 8001094:	60fb      	str	r3, [r7, #12]
 8001096:	4b11      	ldr	r3, [pc, #68]	@ (80010dc <HAL_SPI_MspInit+0x88>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800109a:	4a10      	ldr	r2, [pc, #64]	@ (80010dc <HAL_SPI_MspInit+0x88>)
 800109c:	f043 0301 	orr.w	r3, r3, #1
 80010a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010a2:	4b0e      	ldr	r3, [pc, #56]	@ (80010dc <HAL_SPI_MspInit+0x88>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010a6:	f003 0301 	and.w	r3, r3, #1
 80010aa:	60fb      	str	r3, [r7, #12]
 80010ac:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80010ae:	23e0      	movs	r3, #224	@ 0xe0
 80010b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b2:	2302      	movs	r3, #2
 80010b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b6:	2300      	movs	r3, #0
 80010b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ba:	2300      	movs	r3, #0
 80010bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80010be:	2305      	movs	r3, #5
 80010c0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c2:	f107 0314 	add.w	r3, r7, #20
 80010c6:	4619      	mov	r1, r3
 80010c8:	4805      	ldr	r0, [pc, #20]	@ (80010e0 <HAL_SPI_MspInit+0x8c>)
 80010ca:	f001 fa2d 	bl	8002528 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80010ce:	bf00      	nop
 80010d0:	3728      	adds	r7, #40	@ 0x28
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	40013000 	.word	0x40013000
 80010dc:	40023800 	.word	0x40023800
 80010e0:	40020000 	.word	0x40020000

080010e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ea:	2300      	movs	r3, #0
 80010ec:	607b      	str	r3, [r7, #4]
 80010ee:	4b10      	ldr	r3, [pc, #64]	@ (8001130 <HAL_MspInit+0x4c>)
 80010f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010f2:	4a0f      	ldr	r2, [pc, #60]	@ (8001130 <HAL_MspInit+0x4c>)
 80010f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80010fa:	4b0d      	ldr	r3, [pc, #52]	@ (8001130 <HAL_MspInit+0x4c>)
 80010fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001102:	607b      	str	r3, [r7, #4]
 8001104:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001106:	2300      	movs	r3, #0
 8001108:	603b      	str	r3, [r7, #0]
 800110a:	4b09      	ldr	r3, [pc, #36]	@ (8001130 <HAL_MspInit+0x4c>)
 800110c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800110e:	4a08      	ldr	r2, [pc, #32]	@ (8001130 <HAL_MspInit+0x4c>)
 8001110:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001114:	6413      	str	r3, [r2, #64]	@ 0x40
 8001116:	4b06      	ldr	r3, [pc, #24]	@ (8001130 <HAL_MspInit+0x4c>)
 8001118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800111a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800111e:	603b      	str	r3, [r7, #0]
 8001120:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001122:	2007      	movs	r0, #7
 8001124:	f001 f8fe 	bl	8002324 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001128:	bf00      	nop
 800112a:	3708      	adds	r7, #8
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	40023800 	.word	0x40023800

08001134 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001138:	bf00      	nop
 800113a:	e7fd      	b.n	8001138 <NMI_Handler+0x4>

0800113c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001140:	bf00      	nop
 8001142:	e7fd      	b.n	8001140 <HardFault_Handler+0x4>

08001144 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001148:	bf00      	nop
 800114a:	e7fd      	b.n	8001148 <MemManage_Handler+0x4>

0800114c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001150:	bf00      	nop
 8001152:	e7fd      	b.n	8001150 <BusFault_Handler+0x4>

08001154 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001158:	bf00      	nop
 800115a:	e7fd      	b.n	8001158 <UsageFault_Handler+0x4>

0800115c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001160:	bf00      	nop
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr

0800116a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800116a:	b480      	push	{r7}
 800116c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800116e:	bf00      	nop
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr

08001178 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800117c:	bf00      	nop
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr

08001186 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001186:	b580      	push	{r7, lr}
 8001188:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800118a:	f000 fa05 	bl	8001598 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800118e:	bf00      	nop
 8001190:	bd80      	pop	{r7, pc}
	...

08001194 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001198:	4802      	ldr	r0, [pc, #8]	@ (80011a4 <USART2_IRQHandler+0x10>)
 800119a:	f006 ff5d 	bl	8008058 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800119e:	bf00      	nop
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	20000244 	.word	0x20000244

080011a8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80011ac:	4802      	ldr	r0, [pc, #8]	@ (80011b8 <OTG_FS_IRQHandler+0x10>)
 80011ae:	f001 ffdb 	bl	8003168 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80011b2:	bf00      	nop
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	2000066c 	.word	0x2000066c

080011bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b086      	sub	sp, #24
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011c4:	4a14      	ldr	r2, [pc, #80]	@ (8001218 <_sbrk+0x5c>)
 80011c6:	4b15      	ldr	r3, [pc, #84]	@ (800121c <_sbrk+0x60>)
 80011c8:	1ad3      	subs	r3, r2, r3
 80011ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011d0:	4b13      	ldr	r3, [pc, #76]	@ (8001220 <_sbrk+0x64>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d102      	bne.n	80011de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011d8:	4b11      	ldr	r3, [pc, #68]	@ (8001220 <_sbrk+0x64>)
 80011da:	4a12      	ldr	r2, [pc, #72]	@ (8001224 <_sbrk+0x68>)
 80011dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011de:	4b10      	ldr	r3, [pc, #64]	@ (8001220 <_sbrk+0x64>)
 80011e0:	681a      	ldr	r2, [r3, #0]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4413      	add	r3, r2
 80011e6:	693a      	ldr	r2, [r7, #16]
 80011e8:	429a      	cmp	r2, r3
 80011ea:	d207      	bcs.n	80011fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011ec:	f00b fd4c 	bl	800cc88 <__errno>
 80011f0:	4603      	mov	r3, r0
 80011f2:	220c      	movs	r2, #12
 80011f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011f6:	f04f 33ff 	mov.w	r3, #4294967295
 80011fa:	e009      	b.n	8001210 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011fc:	4b08      	ldr	r3, [pc, #32]	@ (8001220 <_sbrk+0x64>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001202:	4b07      	ldr	r3, [pc, #28]	@ (8001220 <_sbrk+0x64>)
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4413      	add	r3, r2
 800120a:	4a05      	ldr	r2, [pc, #20]	@ (8001220 <_sbrk+0x64>)
 800120c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800120e:	68fb      	ldr	r3, [r7, #12]
}
 8001210:	4618      	mov	r0, r3
 8001212:	3718      	adds	r7, #24
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	20020000 	.word	0x20020000
 800121c:	00000400 	.word	0x00000400
 8001220:	200001f8 	.word	0x200001f8
 8001224:	20000b98 	.word	0x20000b98

08001228 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800122c:	4b06      	ldr	r3, [pc, #24]	@ (8001248 <SystemInit+0x20>)
 800122e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001232:	4a05      	ldr	r2, [pc, #20]	@ (8001248 <SystemInit+0x20>)
 8001234:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001238:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800123c:	bf00      	nop
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	e000ed00 	.word	0xe000ed00

0800124c <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b08a      	sub	sp, #40	@ 0x28
 8001250:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001252:	f107 0320 	add.w	r3, r7, #32
 8001256:	2200      	movs	r2, #0
 8001258:	601a      	str	r2, [r3, #0]
 800125a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800125c:	1d3b      	adds	r3, r7, #4
 800125e:	2200      	movs	r2, #0
 8001260:	601a      	str	r2, [r3, #0]
 8001262:	605a      	str	r2, [r3, #4]
 8001264:	609a      	str	r2, [r3, #8]
 8001266:	60da      	str	r2, [r3, #12]
 8001268:	611a      	str	r2, [r3, #16]
 800126a:	615a      	str	r2, [r3, #20]
 800126c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800126e:	4b22      	ldr	r3, [pc, #136]	@ (80012f8 <MX_TIM2_Init+0xac>)
 8001270:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001274:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001276:	4b20      	ldr	r3, [pc, #128]	@ (80012f8 <MX_TIM2_Init+0xac>)
 8001278:	2200      	movs	r2, #0
 800127a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800127c:	4b1e      	ldr	r3, [pc, #120]	@ (80012f8 <MX_TIM2_Init+0xac>)
 800127e:	2200      	movs	r2, #0
 8001280:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001282:	4b1d      	ldr	r3, [pc, #116]	@ (80012f8 <MX_TIM2_Init+0xac>)
 8001284:	f04f 32ff 	mov.w	r2, #4294967295
 8001288:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800128a:	4b1b      	ldr	r3, [pc, #108]	@ (80012f8 <MX_TIM2_Init+0xac>)
 800128c:	2200      	movs	r2, #0
 800128e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001290:	4b19      	ldr	r3, [pc, #100]	@ (80012f8 <MX_TIM2_Init+0xac>)
 8001292:	2200      	movs	r2, #0
 8001294:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001296:	4818      	ldr	r0, [pc, #96]	@ (80012f8 <MX_TIM2_Init+0xac>)
 8001298:	f005 fea6 	bl	8006fe8 <HAL_TIM_PWM_Init>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80012a2:	f7ff fc26 	bl	8000af2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012a6:	2300      	movs	r3, #0
 80012a8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012aa:	2300      	movs	r3, #0
 80012ac:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012ae:	f107 0320 	add.w	r3, r7, #32
 80012b2:	4619      	mov	r1, r3
 80012b4:	4810      	ldr	r0, [pc, #64]	@ (80012f8 <MX_TIM2_Init+0xac>)
 80012b6:	f006 fc6d 	bl	8007b94 <HAL_TIMEx_MasterConfigSynchronization>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80012c0:	f7ff fc17 	bl	8000af2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012c4:	2360      	movs	r3, #96	@ 0x60
 80012c6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80012c8:	2300      	movs	r3, #0
 80012ca:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012cc:	2300      	movs	r3, #0
 80012ce:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012d0:	2300      	movs	r3, #0
 80012d2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012d4:	1d3b      	adds	r3, r7, #4
 80012d6:	2200      	movs	r2, #0
 80012d8:	4619      	mov	r1, r3
 80012da:	4807      	ldr	r0, [pc, #28]	@ (80012f8 <MX_TIM2_Init+0xac>)
 80012dc:	f005 ff9c 	bl	8007218 <HAL_TIM_PWM_ConfigChannel>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80012e6:	f7ff fc04 	bl	8000af2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80012ea:	4803      	ldr	r0, [pc, #12]	@ (80012f8 <MX_TIM2_Init+0xac>)
 80012ec:	f000 f826 	bl	800133c <HAL_TIM_MspPostInit>

}
 80012f0:	bf00      	nop
 80012f2:	3728      	adds	r7, #40	@ 0x28
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	200001fc 	.word	0x200001fc

080012fc <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b085      	sub	sp, #20
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800130c:	d10d      	bne.n	800132a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800130e:	2300      	movs	r3, #0
 8001310:	60fb      	str	r3, [r7, #12]
 8001312:	4b09      	ldr	r3, [pc, #36]	@ (8001338 <HAL_TIM_PWM_MspInit+0x3c>)
 8001314:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001316:	4a08      	ldr	r2, [pc, #32]	@ (8001338 <HAL_TIM_PWM_MspInit+0x3c>)
 8001318:	f043 0301 	orr.w	r3, r3, #1
 800131c:	6413      	str	r3, [r2, #64]	@ 0x40
 800131e:	4b06      	ldr	r3, [pc, #24]	@ (8001338 <HAL_TIM_PWM_MspInit+0x3c>)
 8001320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001322:	f003 0301 	and.w	r3, r3, #1
 8001326:	60fb      	str	r3, [r7, #12]
 8001328:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800132a:	bf00      	nop
 800132c:	3714      	adds	r7, #20
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	40023800 	.word	0x40023800

0800133c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b088      	sub	sp, #32
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001344:	f107 030c 	add.w	r3, r7, #12
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]
 800134c:	605a      	str	r2, [r3, #4]
 800134e:	609a      	str	r2, [r3, #8]
 8001350:	60da      	str	r2, [r3, #12]
 8001352:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800135c:	d11e      	bne.n	800139c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800135e:	2300      	movs	r3, #0
 8001360:	60bb      	str	r3, [r7, #8]
 8001362:	4b10      	ldr	r3, [pc, #64]	@ (80013a4 <HAL_TIM_MspPostInit+0x68>)
 8001364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001366:	4a0f      	ldr	r2, [pc, #60]	@ (80013a4 <HAL_TIM_MspPostInit+0x68>)
 8001368:	f043 0301 	orr.w	r3, r3, #1
 800136c:	6313      	str	r3, [r2, #48]	@ 0x30
 800136e:	4b0d      	ldr	r3, [pc, #52]	@ (80013a4 <HAL_TIM_MspPostInit+0x68>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001372:	f003 0301 	and.w	r3, r3, #1
 8001376:	60bb      	str	r3, [r7, #8]
 8001378:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800137a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800137e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001380:	2302      	movs	r3, #2
 8001382:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001384:	2300      	movs	r3, #0
 8001386:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001388:	2300      	movs	r3, #0
 800138a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800138c:	2301      	movs	r3, #1
 800138e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001390:	f107 030c 	add.w	r3, r7, #12
 8001394:	4619      	mov	r1, r3
 8001396:	4804      	ldr	r0, [pc, #16]	@ (80013a8 <HAL_TIM_MspPostInit+0x6c>)
 8001398:	f001 f8c6 	bl	8002528 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800139c:	bf00      	nop
 800139e:	3720      	adds	r7, #32
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	40023800 	.word	0x40023800
 80013a8:	40020000 	.word	0x40020000

080013ac <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013b0:	4b11      	ldr	r3, [pc, #68]	@ (80013f8 <MX_USART2_UART_Init+0x4c>)
 80013b2:	4a12      	ldr	r2, [pc, #72]	@ (80013fc <MX_USART2_UART_Init+0x50>)
 80013b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013b6:	4b10      	ldr	r3, [pc, #64]	@ (80013f8 <MX_USART2_UART_Init+0x4c>)
 80013b8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80013bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013be:	4b0e      	ldr	r3, [pc, #56]	@ (80013f8 <MX_USART2_UART_Init+0x4c>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013c4:	4b0c      	ldr	r3, [pc, #48]	@ (80013f8 <MX_USART2_UART_Init+0x4c>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013ca:	4b0b      	ldr	r3, [pc, #44]	@ (80013f8 <MX_USART2_UART_Init+0x4c>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013d0:	4b09      	ldr	r3, [pc, #36]	@ (80013f8 <MX_USART2_UART_Init+0x4c>)
 80013d2:	220c      	movs	r2, #12
 80013d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013d6:	4b08      	ldr	r3, [pc, #32]	@ (80013f8 <MX_USART2_UART_Init+0x4c>)
 80013d8:	2200      	movs	r2, #0
 80013da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013dc:	4b06      	ldr	r3, [pc, #24]	@ (80013f8 <MX_USART2_UART_Init+0x4c>)
 80013de:	2200      	movs	r2, #0
 80013e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013e2:	4805      	ldr	r0, [pc, #20]	@ (80013f8 <MX_USART2_UART_Init+0x4c>)
 80013e4:	f006 fcb4 	bl	8007d50 <HAL_UART_Init>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80013ee:	f7ff fb80 	bl	8000af2 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013f2:	bf00      	nop
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	20000244 	.word	0x20000244
 80013fc:	40004400 	.word	0x40004400

08001400 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b08a      	sub	sp, #40	@ 0x28
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001408:	f107 0314 	add.w	r3, r7, #20
 800140c:	2200      	movs	r2, #0
 800140e:	601a      	str	r2, [r3, #0]
 8001410:	605a      	str	r2, [r3, #4]
 8001412:	609a      	str	r2, [r3, #8]
 8001414:	60da      	str	r2, [r3, #12]
 8001416:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a1d      	ldr	r2, [pc, #116]	@ (8001494 <HAL_UART_MspInit+0x94>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d133      	bne.n	800148a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001422:	2300      	movs	r3, #0
 8001424:	613b      	str	r3, [r7, #16]
 8001426:	4b1c      	ldr	r3, [pc, #112]	@ (8001498 <HAL_UART_MspInit+0x98>)
 8001428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800142a:	4a1b      	ldr	r2, [pc, #108]	@ (8001498 <HAL_UART_MspInit+0x98>)
 800142c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001430:	6413      	str	r3, [r2, #64]	@ 0x40
 8001432:	4b19      	ldr	r3, [pc, #100]	@ (8001498 <HAL_UART_MspInit+0x98>)
 8001434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001436:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800143a:	613b      	str	r3, [r7, #16]
 800143c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800143e:	2300      	movs	r3, #0
 8001440:	60fb      	str	r3, [r7, #12]
 8001442:	4b15      	ldr	r3, [pc, #84]	@ (8001498 <HAL_UART_MspInit+0x98>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001446:	4a14      	ldr	r2, [pc, #80]	@ (8001498 <HAL_UART_MspInit+0x98>)
 8001448:	f043 0301 	orr.w	r3, r3, #1
 800144c:	6313      	str	r3, [r2, #48]	@ 0x30
 800144e:	4b12      	ldr	r3, [pc, #72]	@ (8001498 <HAL_UART_MspInit+0x98>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001452:	f003 0301 	and.w	r3, r3, #1
 8001456:	60fb      	str	r3, [r7, #12]
 8001458:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800145a:	230c      	movs	r3, #12
 800145c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800145e:	2302      	movs	r3, #2
 8001460:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001462:	2300      	movs	r3, #0
 8001464:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001466:	2303      	movs	r3, #3
 8001468:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800146a:	2307      	movs	r3, #7
 800146c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800146e:	f107 0314 	add.w	r3, r7, #20
 8001472:	4619      	mov	r1, r3
 8001474:	4809      	ldr	r0, [pc, #36]	@ (800149c <HAL_UART_MspInit+0x9c>)
 8001476:	f001 f857 	bl	8002528 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800147a:	2200      	movs	r2, #0
 800147c:	2100      	movs	r1, #0
 800147e:	2026      	movs	r0, #38	@ 0x26
 8001480:	f000 ff70 	bl	8002364 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001484:	2026      	movs	r0, #38	@ 0x26
 8001486:	f000 ff99 	bl	80023bc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800148a:	bf00      	nop
 800148c:	3728      	adds	r7, #40	@ 0x28
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	40004400 	.word	0x40004400
 8001498:	40023800 	.word	0x40023800
 800149c:	40020000 	.word	0x40020000

080014a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80014a0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80014d8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80014a4:	f7ff fec0 	bl	8001228 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014a8:	480c      	ldr	r0, [pc, #48]	@ (80014dc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014aa:	490d      	ldr	r1, [pc, #52]	@ (80014e0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014ac:	4a0d      	ldr	r2, [pc, #52]	@ (80014e4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014b0:	e002      	b.n	80014b8 <LoopCopyDataInit>

080014b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014b6:	3304      	adds	r3, #4

080014b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014bc:	d3f9      	bcc.n	80014b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014be:	4a0a      	ldr	r2, [pc, #40]	@ (80014e8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80014c0:	4c0a      	ldr	r4, [pc, #40]	@ (80014ec <LoopFillZerobss+0x22>)
  movs r3, #0
 80014c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014c4:	e001      	b.n	80014ca <LoopFillZerobss>

080014c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014c8:	3204      	adds	r2, #4

080014ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014cc:	d3fb      	bcc.n	80014c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014ce:	f00b fbe1 	bl	800cc94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014d2:	f7ff fd63 	bl	8000f9c <main>
  bx  lr    
 80014d6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80014d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80014dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014e0:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 80014e4:	0800d22c 	.word	0x0800d22c
  ldr r2, =_sbss
 80014e8:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 80014ec:	20000b94 	.word	0x20000b94

080014f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014f0:	e7fe      	b.n	80014f0 <ADC_IRQHandler>
	...

080014f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80014f8:	4b0e      	ldr	r3, [pc, #56]	@ (8001534 <HAL_Init+0x40>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a0d      	ldr	r2, [pc, #52]	@ (8001534 <HAL_Init+0x40>)
 80014fe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001502:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001504:	4b0b      	ldr	r3, [pc, #44]	@ (8001534 <HAL_Init+0x40>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a0a      	ldr	r2, [pc, #40]	@ (8001534 <HAL_Init+0x40>)
 800150a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800150e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001510:	4b08      	ldr	r3, [pc, #32]	@ (8001534 <HAL_Init+0x40>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a07      	ldr	r2, [pc, #28]	@ (8001534 <HAL_Init+0x40>)
 8001516:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800151a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800151c:	2003      	movs	r0, #3
 800151e:	f000 ff01 	bl	8002324 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001522:	2000      	movs	r0, #0
 8001524:	f000 f808 	bl	8001538 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001528:	f7ff fddc 	bl	80010e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800152c:	2300      	movs	r3, #0
}
 800152e:	4618      	mov	r0, r3
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	40023c00 	.word	0x40023c00

08001538 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001540:	4b12      	ldr	r3, [pc, #72]	@ (800158c <HAL_InitTick+0x54>)
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	4b12      	ldr	r3, [pc, #72]	@ (8001590 <HAL_InitTick+0x58>)
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	4619      	mov	r1, r3
 800154a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800154e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001552:	fbb2 f3f3 	udiv	r3, r2, r3
 8001556:	4618      	mov	r0, r3
 8001558:	f000 ff48 	bl	80023ec <HAL_SYSTICK_Config>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e00e      	b.n	8001584 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2b0f      	cmp	r3, #15
 800156a:	d80a      	bhi.n	8001582 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800156c:	2200      	movs	r2, #0
 800156e:	6879      	ldr	r1, [r7, #4]
 8001570:	f04f 30ff 	mov.w	r0, #4294967295
 8001574:	f000 fef6 	bl	8002364 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001578:	4a06      	ldr	r2, [pc, #24]	@ (8001594 <HAL_InitTick+0x5c>)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800157e:	2300      	movs	r3, #0
 8001580:	e000      	b.n	8001584 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
}
 8001584:	4618      	mov	r0, r3
 8001586:	3708      	adds	r7, #8
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	20000008 	.word	0x20000008
 8001590:	20000010 	.word	0x20000010
 8001594:	2000000c 	.word	0x2000000c

08001598 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800159c:	4b06      	ldr	r3, [pc, #24]	@ (80015b8 <HAL_IncTick+0x20>)
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	461a      	mov	r2, r3
 80015a2:	4b06      	ldr	r3, [pc, #24]	@ (80015bc <HAL_IncTick+0x24>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4413      	add	r3, r2
 80015a8:	4a04      	ldr	r2, [pc, #16]	@ (80015bc <HAL_IncTick+0x24>)
 80015aa:	6013      	str	r3, [r2, #0]
}
 80015ac:	bf00      	nop
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	20000010 	.word	0x20000010
 80015bc:	2000028c 	.word	0x2000028c

080015c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  return uwTick;
 80015c4:	4b03      	ldr	r3, [pc, #12]	@ (80015d4 <HAL_GetTick+0x14>)
 80015c6:	681b      	ldr	r3, [r3, #0]
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	2000028c 	.word	0x2000028c

080015d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015e0:	f7ff ffee 	bl	80015c0 <HAL_GetTick>
 80015e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015f0:	d005      	beq.n	80015fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015f2:	4b0a      	ldr	r3, [pc, #40]	@ (800161c <HAL_Delay+0x44>)
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	461a      	mov	r2, r3
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	4413      	add	r3, r2
 80015fc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80015fe:	bf00      	nop
 8001600:	f7ff ffde 	bl	80015c0 <HAL_GetTick>
 8001604:	4602      	mov	r2, r0
 8001606:	68bb      	ldr	r3, [r7, #8]
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	68fa      	ldr	r2, [r7, #12]
 800160c:	429a      	cmp	r2, r3
 800160e:	d8f7      	bhi.n	8001600 <HAL_Delay+0x28>
  {
  }
}
 8001610:	bf00      	nop
 8001612:	bf00      	nop
 8001614:	3710      	adds	r7, #16
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	20000010 	.word	0x20000010

08001620 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001628:	2300      	movs	r3, #0
 800162a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d101      	bne.n	8001636 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e15c      	b.n	80018f0 <HAL_ADC_Init+0x2d0>
  }

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a8e      	ldr	r2, [pc, #568]	@ (8001874 <HAL_ADC_Init+0x254>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d00e      	beq.n	800165e <HAL_ADC_Init+0x3e>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a8c      	ldr	r2, [pc, #560]	@ (8001878 <HAL_ADC_Init+0x258>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d009      	beq.n	800165e <HAL_ADC_Init+0x3e>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a8b      	ldr	r2, [pc, #556]	@ (800187c <HAL_ADC_Init+0x25c>)
 8001650:	4293      	cmp	r3, r2
 8001652:	d004      	beq.n	800165e <HAL_ADC_Init+0x3e>
 8001654:	f44f 71a1 	mov.w	r1, #322	@ 0x142
 8001658:	4889      	ldr	r0, [pc, #548]	@ (8001880 <HAL_ADC_Init+0x260>)
 800165a:	f7ff fa43 	bl	8000ae4 <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d013      	beq.n	800168e <HAL_ADC_Init+0x6e>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800166e:	d00e      	beq.n	800168e <HAL_ADC_Init+0x6e>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001678:	d009      	beq.n	800168e <HAL_ADC_Init+0x6e>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8001682:	d004      	beq.n	800168e <HAL_ADC_Init+0x6e>
 8001684:	f240 1143 	movw	r1, #323	@ 0x143
 8001688:	487d      	ldr	r0, [pc, #500]	@ (8001880 <HAL_ADC_Init+0x260>)
 800168a:	f7ff fa2b 	bl	8000ae4 <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d013      	beq.n	80016be <HAL_ADC_Init+0x9e>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800169e:	d00e      	beq.n	80016be <HAL_ADC_Init+0x9e>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80016a8:	d009      	beq.n	80016be <HAL_ADC_Init+0x9e>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80016b2:	d004      	beq.n	80016be <HAL_ADC_Init+0x9e>
 80016b4:	f44f 71a2 	mov.w	r1, #324	@ 0x144
 80016b8:	4871      	ldr	r0, [pc, #452]	@ (8001880 <HAL_ADC_Init+0x260>)
 80016ba:	f7ff fa13 	bl	8000ae4 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ScanConvMode));
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	691b      	ldr	r3, [r3, #16]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d008      	beq.n	80016d8 <HAL_ADC_Init+0xb8>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	691b      	ldr	r3, [r3, #16]
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d004      	beq.n	80016d8 <HAL_ADC_Init+0xb8>
 80016ce:	f240 1145 	movw	r1, #325	@ 0x145
 80016d2:	486b      	ldr	r0, [pc, #428]	@ (8001880 <HAL_ADC_Init+0x260>)
 80016d4:	f7ff fa06 	bl	8000ae4 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	7e1b      	ldrb	r3, [r3, #24]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d008      	beq.n	80016f2 <HAL_ADC_Init+0xd2>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	7e1b      	ldrb	r3, [r3, #24]
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d004      	beq.n	80016f2 <HAL_ADC_Init+0xd2>
 80016e8:	f44f 71a3 	mov.w	r1, #326	@ 0x146
 80016ec:	4864      	ldr	r0, [pc, #400]	@ (8001880 <HAL_ADC_Init+0x260>)
 80016ee:	f7ff f9f9 	bl	8000ae4 <assert_failed>
  assert_param(IS_ADC_EXT_TRIG(hadc->Init.ExternalTrigConv));
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d054      	beq.n	80017a4 <HAL_ADC_Init+0x184>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016fe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001702:	d04f      	beq.n	80017a4 <HAL_ADC_Init+0x184>
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001708:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800170c:	d04a      	beq.n	80017a4 <HAL_ADC_Init+0x184>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001712:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001716:	d045      	beq.n	80017a4 <HAL_ADC_Init+0x184>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800171c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8001720:	d040      	beq.n	80017a4 <HAL_ADC_Init+0x184>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001726:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800172a:	d03b      	beq.n	80017a4 <HAL_ADC_Init+0x184>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001730:	f1b3 6fc0 	cmp.w	r3, #100663296	@ 0x6000000
 8001734:	d036      	beq.n	80017a4 <HAL_ADC_Init+0x184>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800173a:	f1b3 6fe0 	cmp.w	r3, #117440512	@ 0x7000000
 800173e:	d031      	beq.n	80017a4 <HAL_ADC_Init+0x184>
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001744:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001748:	d02c      	beq.n	80017a4 <HAL_ADC_Init+0x184>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800174e:	f1b3 6f10 	cmp.w	r3, #150994944	@ 0x9000000
 8001752:	d027      	beq.n	80017a4 <HAL_ADC_Init+0x184>
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001758:	f1b3 6f20 	cmp.w	r3, #167772160	@ 0xa000000
 800175c:	d022      	beq.n	80017a4 <HAL_ADC_Init+0x184>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001762:	f1b3 6f30 	cmp.w	r3, #184549376	@ 0xb000000
 8001766:	d01d      	beq.n	80017a4 <HAL_ADC_Init+0x184>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800176c:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8001770:	d018      	beq.n	80017a4 <HAL_ADC_Init+0x184>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001776:	f1b3 6f50 	cmp.w	r3, #218103808	@ 0xd000000
 800177a:	d013      	beq.n	80017a4 <HAL_ADC_Init+0x184>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001780:	f1b3 6f60 	cmp.w	r3, #234881024	@ 0xe000000
 8001784:	d00e      	beq.n	80017a4 <HAL_ADC_Init+0x184>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800178a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800178e:	d009      	beq.n	80017a4 <HAL_ADC_Init+0x184>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001794:	4a3b      	ldr	r2, [pc, #236]	@ (8001884 <HAL_ADC_Init+0x264>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d004      	beq.n	80017a4 <HAL_ADC_Init+0x184>
 800179a:	f240 1147 	movw	r1, #327	@ 0x147
 800179e:	4838      	ldr	r0, [pc, #224]	@ (8001880 <HAL_ADC_Init+0x260>)
 80017a0:	f7ff f9a0 	bl	8000ae4 <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d009      	beq.n	80017c0 <HAL_ADC_Init+0x1a0>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80017b4:	d004      	beq.n	80017c0 <HAL_ADC_Init+0x1a0>
 80017b6:	f44f 71a4 	mov.w	r1, #328	@ 0x148
 80017ba:	4831      	ldr	r0, [pc, #196]	@ (8001880 <HAL_ADC_Init+0x260>)
 80017bc:	f7ff f992 	bl	8000ae4 <assert_failed>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	69db      	ldr	r3, [r3, #28]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d003      	beq.n	80017d0 <HAL_ADC_Init+0x1b0>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	69db      	ldr	r3, [r3, #28]
 80017cc:	2b10      	cmp	r3, #16
 80017ce:	d904      	bls.n	80017da <HAL_ADC_Init+0x1ba>
 80017d0:	f240 1149 	movw	r1, #329	@ 0x149
 80017d4:	482a      	ldr	r0, [pc, #168]	@ (8001880 <HAL_ADC_Init+0x260>)
 80017d6:	f7ff f985 	bl	8000ae4 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d009      	beq.n	80017f8 <HAL_ADC_Init+0x1d8>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d004      	beq.n	80017f8 <HAL_ADC_Init+0x1d8>
 80017ee:	f44f 71a5 	mov.w	r1, #330	@ 0x14a
 80017f2:	4823      	ldr	r0, [pc, #140]	@ (8001880 <HAL_ADC_Init+0x260>)
 80017f4:	f7ff f976 	bl	8000ae4 <assert_failed>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	695b      	ldr	r3, [r3, #20]
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d00c      	beq.n	800181a <HAL_ADC_Init+0x1fa>
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	695b      	ldr	r3, [r3, #20]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d008      	beq.n	800181a <HAL_ADC_Init+0x1fa>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	695b      	ldr	r3, [r3, #20]
 800180c:	2b02      	cmp	r3, #2
 800180e:	d004      	beq.n	800181a <HAL_ADC_Init+0x1fa>
 8001810:	f240 114b 	movw	r1, #331	@ 0x14b
 8001814:	481a      	ldr	r0, [pc, #104]	@ (8001880 <HAL_ADC_Init+0x260>)
 8001816:	f7ff f965 	bl	8000ae4 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d009      	beq.n	8001838 <HAL_ADC_Init+0x218>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	f893 3020 	ldrb.w	r3, [r3, #32]
 800182a:	2b01      	cmp	r3, #1
 800182c:	d004      	beq.n	8001838 <HAL_ADC_Init+0x218>
 800182e:	f44f 71a6 	mov.w	r1, #332	@ 0x14c
 8001832:	4813      	ldr	r0, [pc, #76]	@ (8001880 <HAL_ADC_Init+0x260>)
 8001834:	f7ff f956 	bl	8000ae4 <assert_failed>

  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800183c:	4a11      	ldr	r2, [pc, #68]	@ (8001884 <HAL_ADC_Init+0x264>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d022      	beq.n	8001888 <HAL_ADC_Init+0x268>
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001846:	2b00      	cmp	r3, #0
 8001848:	d01e      	beq.n	8001888 <HAL_ADC_Init+0x268>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800184e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001852:	d019      	beq.n	8001888 <HAL_ADC_Init+0x268>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001858:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800185c:	d014      	beq.n	8001888 <HAL_ADC_Init+0x268>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001862:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8001866:	d00f      	beq.n	8001888 <HAL_ADC_Init+0x268>
 8001868:	f44f 71a8 	mov.w	r1, #336	@ 0x150
 800186c:	4804      	ldr	r0, [pc, #16]	@ (8001880 <HAL_ADC_Init+0x260>)
 800186e:	f7ff f939 	bl	8000ae4 <assert_failed>
 8001872:	e009      	b.n	8001888 <HAL_ADC_Init+0x268>
 8001874:	40012000 	.word	0x40012000
 8001878:	40012100 	.word	0x40012100
 800187c:	40012200 	.word	0x40012200
 8001880:	0800ce48 	.word	0x0800ce48
 8001884:	0f000001 	.word	0x0f000001
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800188c:	2b00      	cmp	r3, #0
 800188e:	d109      	bne.n	80018a4 <HAL_ADC_Init+0x284>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001890:	6878      	ldr	r0, [r7, #4]
 8001892:	f7fe fe6b 	bl	800056c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2200      	movs	r2, #0
 800189a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2200      	movs	r2, #0
 80018a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018a8:	f003 0310 	and.w	r3, r3, #16
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d118      	bne.n	80018e2 <HAL_ADC_Init+0x2c2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018b4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80018b8:	f023 0302 	bic.w	r3, r3, #2
 80018bc:	f043 0202 	orr.w	r2, r3, #2
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80018c4:	6878      	ldr	r0, [r7, #4]
 80018c6:	f000 fb53 	bl	8001f70 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2200      	movs	r2, #0
 80018ce:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018d4:	f023 0303 	bic.w	r3, r3, #3
 80018d8:	f043 0201 	orr.w	r2, r3, #1
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	641a      	str	r2, [r3, #64]	@ 0x40
 80018e0:	e001      	b.n	80018e6 <HAL_ADC_Init+0x2c6>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2200      	movs	r2, #0
 80018ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80018ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	3710      	adds	r7, #16
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}

080018f8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b084      	sub	sp, #16
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001900:	2300      	movs	r3, #0
 8001902:	60bb      	str	r3, [r7, #8]
  ADC_Common_TypeDef *tmpADC_Common;

  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	7e1b      	ldrb	r3, [r3, #24]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d008      	beq.n	800191e <HAL_ADC_Start+0x26>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	7e1b      	ldrb	r3, [r3, #24]
 8001910:	2b01      	cmp	r3, #1
 8001912:	d004      	beq.n	800191e <HAL_ADC_Start+0x26>
 8001914:	f240 21d2 	movw	r1, #722	@ 0x2d2
 8001918:	486c      	ldr	r0, [pc, #432]	@ (8001acc <HAL_ADC_Start+0x1d4>)
 800191a:	f7ff f8e3 	bl	8000ae4 <assert_failed>
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001922:	2b00      	cmp	r3, #0
 8001924:	d013      	beq.n	800194e <HAL_ADC_Start+0x56>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800192a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800192e:	d00e      	beq.n	800194e <HAL_ADC_Start+0x56>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001934:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001938:	d009      	beq.n	800194e <HAL_ADC_Start+0x56>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800193e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8001942:	d004      	beq.n	800194e <HAL_ADC_Start+0x56>
 8001944:	f240 21d3 	movw	r1, #723	@ 0x2d3
 8001948:	4860      	ldr	r0, [pc, #384]	@ (8001acc <HAL_ADC_Start+0x1d4>)
 800194a:	f7ff f8cb 	bl	8000ae4 <assert_failed>

  /* Process locked */
  __HAL_LOCK(hadc);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001954:	2b01      	cmp	r3, #1
 8001956:	d101      	bne.n	800195c <HAL_ADC_Start+0x64>
 8001958:	2302      	movs	r3, #2
 800195a:	e0b2      	b.n	8001ac2 <HAL_ADC_Start+0x1ca>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2201      	movs	r2, #1
 8001960:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	f003 0301 	and.w	r3, r3, #1
 800196e:	2b01      	cmp	r3, #1
 8001970:	d018      	beq.n	80019a4 <HAL_ADC_Start+0xac>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	689a      	ldr	r2, [r3, #8]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f042 0201 	orr.w	r2, r2, #1
 8001980:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001982:	4b53      	ldr	r3, [pc, #332]	@ (8001ad0 <HAL_ADC_Start+0x1d8>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a53      	ldr	r2, [pc, #332]	@ (8001ad4 <HAL_ADC_Start+0x1dc>)
 8001988:	fba2 2303 	umull	r2, r3, r2, r3
 800198c:	0c9a      	lsrs	r2, r3, #18
 800198e:	4613      	mov	r3, r2
 8001990:	005b      	lsls	r3, r3, #1
 8001992:	4413      	add	r3, r2
 8001994:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001996:	e002      	b.n	800199e <HAL_ADC_Start+0xa6>
    {
      counter--;
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	3b01      	subs	r3, #1
 800199c:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d1f9      	bne.n	8001998 <HAL_ADC_Start+0xa0>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	f003 0301 	and.w	r3, r3, #1
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d17a      	bne.n	8001aa8 <HAL_ADC_Start+0x1b0>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019b6:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80019ba:	f023 0301 	bic.w	r3, r3, #1
 80019be:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d007      	beq.n	80019e4 <HAL_ADC_Start+0xec>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019d8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80019dc:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019e8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80019ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80019f0:	d106      	bne.n	8001a00 <HAL_ADC_Start+0x108>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019f6:	f023 0206 	bic.w	r2, r3, #6
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	645a      	str	r2, [r3, #68]	@ 0x44
 80019fe:	e002      	b.n	8001a06 <HAL_ADC_Start+0x10e>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2200      	movs	r2, #0
 8001a04:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a0e:	4b32      	ldr	r3, [pc, #200]	@ (8001ad8 <HAL_ADC_Start+0x1e0>)
 8001a10:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001a1a:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f003 031f 	and.w	r3, r3, #31
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d12a      	bne.n	8001a7e <HAL_ADC_Start+0x186>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a2b      	ldr	r2, [pc, #172]	@ (8001adc <HAL_ADC_Start+0x1e4>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d015      	beq.n	8001a5e <HAL_ADC_Start+0x166>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a2a      	ldr	r2, [pc, #168]	@ (8001ae0 <HAL_ADC_Start+0x1e8>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d105      	bne.n	8001a48 <HAL_ADC_Start+0x150>
 8001a3c:	4b26      	ldr	r3, [pc, #152]	@ (8001ad8 <HAL_ADC_Start+0x1e0>)
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f003 031f 	and.w	r3, r3, #31
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d00a      	beq.n	8001a5e <HAL_ADC_Start+0x166>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a25      	ldr	r2, [pc, #148]	@ (8001ae4 <HAL_ADC_Start+0x1ec>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d136      	bne.n	8001ac0 <HAL_ADC_Start+0x1c8>
 8001a52:	4b21      	ldr	r3, [pc, #132]	@ (8001ad8 <HAL_ADC_Start+0x1e0>)
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	f003 0310 	and.w	r3, r3, #16
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d130      	bne.n	8001ac0 <HAL_ADC_Start+0x1c8>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d129      	bne.n	8001ac0 <HAL_ADC_Start+0x1c8>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	689a      	ldr	r2, [r3, #8]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001a7a:	609a      	str	r2, [r3, #8]
 8001a7c:	e020      	b.n	8001ac0 <HAL_ADC_Start+0x1c8>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a16      	ldr	r2, [pc, #88]	@ (8001adc <HAL_ADC_Start+0x1e4>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d11b      	bne.n	8001ac0 <HAL_ADC_Start+0x1c8>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d114      	bne.n	8001ac0 <HAL_ADC_Start+0x1c8>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	689a      	ldr	r2, [r3, #8]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001aa4:	609a      	str	r2, [r3, #8]
 8001aa6:	e00b      	b.n	8001ac0 <HAL_ADC_Start+0x1c8>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aac:	f043 0210 	orr.w	r2, r3, #16
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ab8:	f043 0201 	orr.w	r2, r3, #1
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001ac0:	2300      	movs	r3, #0
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3710      	adds	r7, #16
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	0800ce48 	.word	0x0800ce48
 8001ad0:	20000008 	.word	0x20000008
 8001ad4:	431bde83 	.word	0x431bde83
 8001ad8:	40012300 	.word	0x40012300
 8001adc:	40012000 	.word	0x40012000
 8001ae0:	40012100 	.word	0x40012100
 8001ae4:	40012200 	.word	0x40012200

08001ae8 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a1f      	ldr	r2, [pc, #124]	@ (8001b74 <HAL_ADC_Stop+0x8c>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d00e      	beq.n	8001b18 <HAL_ADC_Stop+0x30>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a1e      	ldr	r2, [pc, #120]	@ (8001b78 <HAL_ADC_Stop+0x90>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d009      	beq.n	8001b18 <HAL_ADC_Stop+0x30>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a1c      	ldr	r2, [pc, #112]	@ (8001b7c <HAL_ADC_Stop+0x94>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d004      	beq.n	8001b18 <HAL_ADC_Stop+0x30>
 8001b0e:	f240 314a 	movw	r1, #842	@ 0x34a
 8001b12:	481b      	ldr	r0, [pc, #108]	@ (8001b80 <HAL_ADC_Stop+0x98>)
 8001b14:	f7fe ffe6 	bl	8000ae4 <assert_failed>

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d101      	bne.n	8001b26 <HAL_ADC_Stop+0x3e>
 8001b22:	2302      	movs	r3, #2
 8001b24:	e021      	b.n	8001b6a <HAL_ADC_Stop+0x82>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2201      	movs	r2, #1
 8001b2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	689a      	ldr	r2, [r3, #8]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f022 0201 	bic.w	r2, r2, #1
 8001b3c:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	f003 0301 	and.w	r3, r3, #1
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d109      	bne.n	8001b60 <HAL_ADC_Stop+0x78>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b50:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001b54:	f023 0301 	bic.w	r3, r3, #1
 8001b58:	f043 0201 	orr.w	r2, r3, #1
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2200      	movs	r2, #0
 8001b64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001b68:	2300      	movs	r3, #0
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3708      	adds	r7, #8
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	40012000 	.word	0x40012000
 8001b78:	40012100 	.word	0x40012100
 8001b7c:	40012200 	.word	0x40012200
 8001b80:	0800ce48 	.word	0x0800ce48

08001b84 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b9c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ba0:	d113      	bne.n	8001bca <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001bac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001bb0:	d10b      	bne.n	8001bca <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bb6:	f043 0220 	orr.w	r2, r3, #32
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e063      	b.n	8001c92 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8001bca:	f7ff fcf9 	bl	80015c0 <HAL_GetTick>
 8001bce:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001bd0:	e021      	b.n	8001c16 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bd8:	d01d      	beq.n	8001c16 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d007      	beq.n	8001bf0 <HAL_ADC_PollForConversion+0x6c>
 8001be0:	f7ff fcee 	bl	80015c0 <HAL_GetTick>
 8001be4:	4602      	mov	r2, r0
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	683a      	ldr	r2, [r7, #0]
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d212      	bcs.n	8001c16 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 0302 	and.w	r3, r3, #2
 8001bfa:	2b02      	cmp	r3, #2
 8001bfc:	d00b      	beq.n	8001c16 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c02:	f043 0204 	orr.w	r2, r3, #4
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8001c12:	2303      	movs	r3, #3
 8001c14:	e03d      	b.n	8001c92 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f003 0302 	and.w	r3, r3, #2
 8001c20:	2b02      	cmp	r3, #2
 8001c22:	d1d6      	bne.n	8001bd2 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f06f 0212 	mvn.w	r2, #18
 8001c2c:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c32:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d123      	bne.n	8001c90 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d11f      	bne.n	8001c90 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c56:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d006      	beq.n	8001c6c <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d111      	bne.n	8001c90 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c70:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c7c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d105      	bne.n	8001c90 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c88:	f043 0201 	orr.w	r2, r3, #1
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8001c90:	2300      	movs	r3, #0
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3710      	adds	r7, #16
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}

08001c9a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001c9a:	b480      	push	{r7}
 8001c9c:	b083      	sub	sp, #12
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	370c      	adds	r7, #12
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr

08001cb4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b084      	sub	sp, #16
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	60bb      	str	r3, [r7, #8]
  ADC_Common_TypeDef *tmpADC_Common;

  /* Check the parameters */
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	2b12      	cmp	r3, #18
 8001cc8:	d904      	bls.n	8001cd4 <HAL_ADC_ConfigChannel+0x20>
 8001cca:	f240 618b 	movw	r1, #1675	@ 0x68b
 8001cce:	486f      	ldr	r0, [pc, #444]	@ (8001e8c <HAL_ADC_ConfigChannel+0x1d8>)
 8001cd0:	f7fe ff08 	bl	8000ae4 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d003      	beq.n	8001ce4 <HAL_ADC_ConfigChannel+0x30>
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	2b10      	cmp	r3, #16
 8001ce2:	d904      	bls.n	8001cee <HAL_ADC_ConfigChannel+0x3a>
 8001ce4:	f240 618c 	movw	r1, #1676	@ 0x68c
 8001ce8:	4868      	ldr	r0, [pc, #416]	@ (8001e8c <HAL_ADC_ConfigChannel+0x1d8>)
 8001cea:	f7fe fefb 	bl	8000ae4 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d020      	beq.n	8001d38 <HAL_ADC_ConfigChannel+0x84>
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d01c      	beq.n	8001d38 <HAL_ADC_ConfigChannel+0x84>
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	2b02      	cmp	r3, #2
 8001d04:	d018      	beq.n	8001d38 <HAL_ADC_ConfigChannel+0x84>
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	2b03      	cmp	r3, #3
 8001d0c:	d014      	beq.n	8001d38 <HAL_ADC_ConfigChannel+0x84>
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	2b04      	cmp	r3, #4
 8001d14:	d010      	beq.n	8001d38 <HAL_ADC_ConfigChannel+0x84>
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	2b05      	cmp	r3, #5
 8001d1c:	d00c      	beq.n	8001d38 <HAL_ADC_ConfigChannel+0x84>
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	2b06      	cmp	r3, #6
 8001d24:	d008      	beq.n	8001d38 <HAL_ADC_ConfigChannel+0x84>
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	2b07      	cmp	r3, #7
 8001d2c:	d004      	beq.n	8001d38 <HAL_ADC_ConfigChannel+0x84>
 8001d2e:	f240 618d 	movw	r1, #1677	@ 0x68d
 8001d32:	4856      	ldr	r0, [pc, #344]	@ (8001e8c <HAL_ADC_ConfigChannel+0x1d8>)
 8001d34:	f7fe fed6 	bl	8000ae4 <assert_failed>

  /* Process locked */
  __HAL_LOCK(hadc);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d101      	bne.n	8001d46 <HAL_ADC_ConfigChannel+0x92>
 8001d42:	2302      	movs	r3, #2
 8001d44:	e107      	b.n	8001f56 <HAL_ADC_ConfigChannel+0x2a2>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2201      	movs	r2, #1
 8001d4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	2b09      	cmp	r3, #9
 8001d54:	d925      	bls.n	8001da2 <HAL_ADC_ConfigChannel+0xee>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	68d9      	ldr	r1, [r3, #12]
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	b29b      	uxth	r3, r3
 8001d62:	461a      	mov	r2, r3
 8001d64:	4613      	mov	r3, r2
 8001d66:	005b      	lsls	r3, r3, #1
 8001d68:	4413      	add	r3, r2
 8001d6a:	3b1e      	subs	r3, #30
 8001d6c:	2207      	movs	r2, #7
 8001d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d72:	43da      	mvns	r2, r3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	400a      	ands	r2, r1
 8001d7a:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	68d9      	ldr	r1, [r3, #12]
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	689a      	ldr	r2, [r3, #8]
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	b29b      	uxth	r3, r3
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	4603      	mov	r3, r0
 8001d90:	005b      	lsls	r3, r3, #1
 8001d92:	4403      	add	r3, r0
 8001d94:	3b1e      	subs	r3, #30
 8001d96:	409a      	lsls	r2, r3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	430a      	orrs	r2, r1
 8001d9e:	60da      	str	r2, [r3, #12]
 8001da0:	e022      	b.n	8001de8 <HAL_ADC_ConfigChannel+0x134>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	6919      	ldr	r1, [r3, #16]
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	b29b      	uxth	r3, r3
 8001dae:	461a      	mov	r2, r3
 8001db0:	4613      	mov	r3, r2
 8001db2:	005b      	lsls	r3, r3, #1
 8001db4:	4413      	add	r3, r2
 8001db6:	2207      	movs	r2, #7
 8001db8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbc:	43da      	mvns	r2, r3
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	400a      	ands	r2, r1
 8001dc4:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	6919      	ldr	r1, [r3, #16]
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	689a      	ldr	r2, [r3, #8]
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	b29b      	uxth	r3, r3
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	4603      	mov	r3, r0
 8001dda:	005b      	lsls	r3, r3, #1
 8001ddc:	4403      	add	r3, r0
 8001dde:	409a      	lsls	r2, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	430a      	orrs	r2, r1
 8001de6:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	2b06      	cmp	r3, #6
 8001dee:	d824      	bhi.n	8001e3a <HAL_ADC_ConfigChannel+0x186>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	685a      	ldr	r2, [r3, #4]
 8001dfa:	4613      	mov	r3, r2
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	4413      	add	r3, r2
 8001e00:	3b05      	subs	r3, #5
 8001e02:	221f      	movs	r2, #31
 8001e04:	fa02 f303 	lsl.w	r3, r2, r3
 8001e08:	43da      	mvns	r2, r3
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	400a      	ands	r2, r1
 8001e10:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	b29b      	uxth	r3, r3
 8001e1e:	4618      	mov	r0, r3
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	685a      	ldr	r2, [r3, #4]
 8001e24:	4613      	mov	r3, r2
 8001e26:	009b      	lsls	r3, r3, #2
 8001e28:	4413      	add	r3, r2
 8001e2a:	3b05      	subs	r3, #5
 8001e2c:	fa00 f203 	lsl.w	r2, r0, r3
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	430a      	orrs	r2, r1
 8001e36:	635a      	str	r2, [r3, #52]	@ 0x34
 8001e38:	e04e      	b.n	8001ed8 <HAL_ADC_ConfigChannel+0x224>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	2b0c      	cmp	r3, #12
 8001e40:	d826      	bhi.n	8001e90 <HAL_ADC_ConfigChannel+0x1dc>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	685a      	ldr	r2, [r3, #4]
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	4413      	add	r3, r2
 8001e52:	3b23      	subs	r3, #35	@ 0x23
 8001e54:	221f      	movs	r2, #31
 8001e56:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5a:	43da      	mvns	r2, r3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	400a      	ands	r2, r1
 8001e62:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	b29b      	uxth	r3, r3
 8001e70:	4618      	mov	r0, r3
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	685a      	ldr	r2, [r3, #4]
 8001e76:	4613      	mov	r3, r2
 8001e78:	009b      	lsls	r3, r3, #2
 8001e7a:	4413      	add	r3, r2
 8001e7c:	3b23      	subs	r3, #35	@ 0x23
 8001e7e:	fa00 f203 	lsl.w	r2, r0, r3
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	430a      	orrs	r2, r1
 8001e88:	631a      	str	r2, [r3, #48]	@ 0x30
 8001e8a:	e025      	b.n	8001ed8 <HAL_ADC_ConfigChannel+0x224>
 8001e8c:	0800ce48 	.word	0x0800ce48
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	685a      	ldr	r2, [r3, #4]
 8001e9a:	4613      	mov	r3, r2
 8001e9c:	009b      	lsls	r3, r3, #2
 8001e9e:	4413      	add	r3, r2
 8001ea0:	3b41      	subs	r3, #65	@ 0x41
 8001ea2:	221f      	movs	r2, #31
 8001ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea8:	43da      	mvns	r2, r3
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	400a      	ands	r2, r1
 8001eb0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	b29b      	uxth	r3, r3
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	685a      	ldr	r2, [r3, #4]
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	4413      	add	r3, r2
 8001eca:	3b41      	subs	r3, #65	@ 0x41
 8001ecc:	fa00 f203 	lsl.w	r2, r0, r3
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	430a      	orrs	r2, r1
 8001ed6:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ed8:	4b21      	ldr	r3, [pc, #132]	@ (8001f60 <HAL_ADC_ConfigChannel+0x2ac>)
 8001eda:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a20      	ldr	r2, [pc, #128]	@ (8001f64 <HAL_ADC_ConfigChannel+0x2b0>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d109      	bne.n	8001efa <HAL_ADC_ConfigChannel+0x246>
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	2b12      	cmp	r3, #18
 8001eec:	d105      	bne.n	8001efa <HAL_ADC_ConfigChannel+0x246>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a19      	ldr	r2, [pc, #100]	@ (8001f64 <HAL_ADC_ConfigChannel+0x2b0>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d123      	bne.n	8001f4c <HAL_ADC_ConfigChannel+0x298>
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	2b10      	cmp	r3, #16
 8001f0a:	d003      	beq.n	8001f14 <HAL_ADC_ConfigChannel+0x260>
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	2b11      	cmp	r3, #17
 8001f12:	d11b      	bne.n	8001f4c <HAL_ADC_ConfigChannel+0x298>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	2b10      	cmp	r3, #16
 8001f26:	d111      	bne.n	8001f4c <HAL_ADC_ConfigChannel+0x298>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001f28:	4b0f      	ldr	r3, [pc, #60]	@ (8001f68 <HAL_ADC_ConfigChannel+0x2b4>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a0f      	ldr	r2, [pc, #60]	@ (8001f6c <HAL_ADC_ConfigChannel+0x2b8>)
 8001f2e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f32:	0c9a      	lsrs	r2, r3, #18
 8001f34:	4613      	mov	r3, r2
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	4413      	add	r3, r2
 8001f3a:	005b      	lsls	r3, r3, #1
 8001f3c:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001f3e:	e002      	b.n	8001f46 <HAL_ADC_ConfigChannel+0x292>
      {
        counter--;
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	3b01      	subs	r3, #1
 8001f44:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d1f9      	bne.n	8001f40 <HAL_ADC_ConfigChannel+0x28c>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001f54:	2300      	movs	r3, #0
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3710      	adds	r7, #16
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	40012300 	.word	0x40012300
 8001f64:	40012000 	.word	0x40012000
 8001f68:	20000008 	.word	0x20000008
 8001f6c:	431bde83 	.word	0x431bde83

08001f70 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b084      	sub	sp, #16
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f78:	4b7f      	ldr	r3, [pc, #508]	@ (8002178 <ADC_Init+0x208>)
 8001f7a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	685a      	ldr	r2, [r3, #4]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	431a      	orrs	r2, r3
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	685a      	ldr	r2, [r3, #4]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001fa4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	6859      	ldr	r1, [r3, #4]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	691b      	ldr	r3, [r3, #16]
 8001fb0:	021a      	lsls	r2, r3, #8
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	430a      	orrs	r2, r1
 8001fb8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	685a      	ldr	r2, [r3, #4]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001fc8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	6859      	ldr	r1, [r3, #4]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	689a      	ldr	r2, [r3, #8]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	430a      	orrs	r2, r1
 8001fda:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	689a      	ldr	r2, [r3, #8]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001fea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	6899      	ldr	r1, [r3, #8]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	68da      	ldr	r2, [r3, #12]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	430a      	orrs	r2, r1
 8001ffc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002002:	4a5e      	ldr	r2, [pc, #376]	@ (800217c <ADC_Init+0x20c>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d022      	beq.n	800204e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	689a      	ldr	r2, [r3, #8]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002016:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	6899      	ldr	r1, [r3, #8]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	430a      	orrs	r2, r1
 8002028:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	689a      	ldr	r2, [r3, #8]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002038:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	6899      	ldr	r1, [r3, #8]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	430a      	orrs	r2, r1
 800204a:	609a      	str	r2, [r3, #8]
 800204c:	e00f      	b.n	800206e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	689a      	ldr	r2, [r3, #8]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800205c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	689a      	ldr	r2, [r3, #8]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800206c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	689a      	ldr	r2, [r3, #8]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f022 0202 	bic.w	r2, r2, #2
 800207c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	6899      	ldr	r1, [r3, #8]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	7e1b      	ldrb	r3, [r3, #24]
 8002088:	005a      	lsls	r2, r3, #1
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	430a      	orrs	r2, r1
 8002090:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d028      	beq.n	80020ee <ADC_Init+0x17e>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d003      	beq.n	80020ac <ADC_Init+0x13c>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020a8:	2b08      	cmp	r3, #8
 80020aa:	d904      	bls.n	80020b6 <ADC_Init+0x146>
 80020ac:	f44f 61f5 	mov.w	r1, #1960	@ 0x7a8
 80020b0:	4833      	ldr	r0, [pc, #204]	@ (8002180 <ADC_Init+0x210>)
 80020b2:	f7fe fd17 	bl	8000ae4 <assert_failed>

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	685a      	ldr	r2, [r3, #4]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80020c4:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	685a      	ldr	r2, [r3, #4]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80020d4:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	6859      	ldr	r1, [r3, #4]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020e0:	3b01      	subs	r3, #1
 80020e2:	035a      	lsls	r2, r3, #13
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	430a      	orrs	r2, r1
 80020ea:	605a      	str	r2, [r3, #4]
 80020ec:	e007      	b.n	80020fe <ADC_Init+0x18e>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	685a      	ldr	r2, [r3, #4]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80020fc:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800210c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	69db      	ldr	r3, [r3, #28]
 8002118:	3b01      	subs	r3, #1
 800211a:	051a      	lsls	r2, r3, #20
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	430a      	orrs	r2, r1
 8002122:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	689a      	ldr	r2, [r3, #8]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002132:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	6899      	ldr	r1, [r3, #8]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002140:	025a      	lsls	r2, r3, #9
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	430a      	orrs	r2, r1
 8002148:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	689a      	ldr	r2, [r3, #8]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002158:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	6899      	ldr	r1, [r3, #8]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	695b      	ldr	r3, [r3, #20]
 8002164:	029a      	lsls	r2, r3, #10
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	430a      	orrs	r2, r1
 800216c:	609a      	str	r2, [r3, #8]
}
 800216e:	bf00      	nop
 8002170:	3710      	adds	r7, #16
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	40012300 	.word	0x40012300
 800217c:	0f000001 	.word	0x0f000001
 8002180:	0800ce48 	.word	0x0800ce48

08002184 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002184:	b480      	push	{r7}
 8002186:	b085      	sub	sp, #20
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	f003 0307 	and.w	r3, r3, #7
 8002192:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002194:	4b0c      	ldr	r3, [pc, #48]	@ (80021c8 <__NVIC_SetPriorityGrouping+0x44>)
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800219a:	68ba      	ldr	r2, [r7, #8]
 800219c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80021a0:	4013      	ands	r3, r2
 80021a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021ac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80021b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021b6:	4a04      	ldr	r2, [pc, #16]	@ (80021c8 <__NVIC_SetPriorityGrouping+0x44>)
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	60d3      	str	r3, [r2, #12]
}
 80021bc:	bf00      	nop
 80021be:	3714      	adds	r7, #20
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr
 80021c8:	e000ed00 	.word	0xe000ed00

080021cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021d0:	4b04      	ldr	r3, [pc, #16]	@ (80021e4 <__NVIC_GetPriorityGrouping+0x18>)
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	0a1b      	lsrs	r3, r3, #8
 80021d6:	f003 0307 	and.w	r3, r3, #7
}
 80021da:	4618      	mov	r0, r3
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr
 80021e4:	e000ed00 	.word	0xe000ed00

080021e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	4603      	mov	r3, r0
 80021f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	db0b      	blt.n	8002212 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021fa:	79fb      	ldrb	r3, [r7, #7]
 80021fc:	f003 021f 	and.w	r2, r3, #31
 8002200:	4907      	ldr	r1, [pc, #28]	@ (8002220 <__NVIC_EnableIRQ+0x38>)
 8002202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002206:	095b      	lsrs	r3, r3, #5
 8002208:	2001      	movs	r0, #1
 800220a:	fa00 f202 	lsl.w	r2, r0, r2
 800220e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002212:	bf00      	nop
 8002214:	370c      	adds	r7, #12
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
 800221e:	bf00      	nop
 8002220:	e000e100 	.word	0xe000e100

08002224 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	4603      	mov	r3, r0
 800222c:	6039      	str	r1, [r7, #0]
 800222e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002230:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002234:	2b00      	cmp	r3, #0
 8002236:	db0a      	blt.n	800224e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	b2da      	uxtb	r2, r3
 800223c:	490c      	ldr	r1, [pc, #48]	@ (8002270 <__NVIC_SetPriority+0x4c>)
 800223e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002242:	0112      	lsls	r2, r2, #4
 8002244:	b2d2      	uxtb	r2, r2
 8002246:	440b      	add	r3, r1
 8002248:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800224c:	e00a      	b.n	8002264 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	b2da      	uxtb	r2, r3
 8002252:	4908      	ldr	r1, [pc, #32]	@ (8002274 <__NVIC_SetPriority+0x50>)
 8002254:	79fb      	ldrb	r3, [r7, #7]
 8002256:	f003 030f 	and.w	r3, r3, #15
 800225a:	3b04      	subs	r3, #4
 800225c:	0112      	lsls	r2, r2, #4
 800225e:	b2d2      	uxtb	r2, r2
 8002260:	440b      	add	r3, r1
 8002262:	761a      	strb	r2, [r3, #24]
}
 8002264:	bf00      	nop
 8002266:	370c      	adds	r7, #12
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr
 8002270:	e000e100 	.word	0xe000e100
 8002274:	e000ed00 	.word	0xe000ed00

08002278 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002278:	b480      	push	{r7}
 800227a:	b089      	sub	sp, #36	@ 0x24
 800227c:	af00      	add	r7, sp, #0
 800227e:	60f8      	str	r0, [r7, #12]
 8002280:	60b9      	str	r1, [r7, #8]
 8002282:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	f003 0307 	and.w	r3, r3, #7
 800228a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800228c:	69fb      	ldr	r3, [r7, #28]
 800228e:	f1c3 0307 	rsb	r3, r3, #7
 8002292:	2b04      	cmp	r3, #4
 8002294:	bf28      	it	cs
 8002296:	2304      	movcs	r3, #4
 8002298:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	3304      	adds	r3, #4
 800229e:	2b06      	cmp	r3, #6
 80022a0:	d902      	bls.n	80022a8 <NVIC_EncodePriority+0x30>
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	3b03      	subs	r3, #3
 80022a6:	e000      	b.n	80022aa <NVIC_EncodePriority+0x32>
 80022a8:	2300      	movs	r3, #0
 80022aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022ac:	f04f 32ff 	mov.w	r2, #4294967295
 80022b0:	69bb      	ldr	r3, [r7, #24]
 80022b2:	fa02 f303 	lsl.w	r3, r2, r3
 80022b6:	43da      	mvns	r2, r3
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	401a      	ands	r2, r3
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022c0:	f04f 31ff 	mov.w	r1, #4294967295
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	fa01 f303 	lsl.w	r3, r1, r3
 80022ca:	43d9      	mvns	r1, r3
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022d0:	4313      	orrs	r3, r2
         );
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3724      	adds	r7, #36	@ 0x24
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
	...

080022e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	3b01      	subs	r3, #1
 80022ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80022f0:	d301      	bcc.n	80022f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022f2:	2301      	movs	r3, #1
 80022f4:	e00f      	b.n	8002316 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022f6:	4a0a      	ldr	r2, [pc, #40]	@ (8002320 <SysTick_Config+0x40>)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	3b01      	subs	r3, #1
 80022fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022fe:	210f      	movs	r1, #15
 8002300:	f04f 30ff 	mov.w	r0, #4294967295
 8002304:	f7ff ff8e 	bl	8002224 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002308:	4b05      	ldr	r3, [pc, #20]	@ (8002320 <SysTick_Config+0x40>)
 800230a:	2200      	movs	r2, #0
 800230c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800230e:	4b04      	ldr	r3, [pc, #16]	@ (8002320 <SysTick_Config+0x40>)
 8002310:	2207      	movs	r2, #7
 8002312:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002314:	2300      	movs	r3, #0
}
 8002316:	4618      	mov	r0, r3
 8002318:	3708      	adds	r7, #8
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	e000e010 	.word	0xe000e010

08002324 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2b07      	cmp	r3, #7
 8002330:	d00f      	beq.n	8002352 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2b06      	cmp	r3, #6
 8002336:	d00c      	beq.n	8002352 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2b05      	cmp	r3, #5
 800233c:	d009      	beq.n	8002352 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2b04      	cmp	r3, #4
 8002342:	d006      	beq.n	8002352 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2b03      	cmp	r3, #3
 8002348:	d003      	beq.n	8002352 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800234a:	2190      	movs	r1, #144	@ 0x90
 800234c:	4804      	ldr	r0, [pc, #16]	@ (8002360 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 800234e:	f7fe fbc9 	bl	8000ae4 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f7ff ff16 	bl	8002184 <__NVIC_SetPriorityGrouping>
}
 8002358:	bf00      	nop
 800235a:	3708      	adds	r7, #8
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}
 8002360:	0800ce80 	.word	0x0800ce80

08002364 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002364:	b580      	push	{r7, lr}
 8002366:	b086      	sub	sp, #24
 8002368:	af00      	add	r7, sp, #0
 800236a:	4603      	mov	r3, r0
 800236c:	60b9      	str	r1, [r7, #8]
 800236e:	607a      	str	r2, [r7, #4]
 8002370:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002372:	2300      	movs	r3, #0
 8002374:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2b0f      	cmp	r3, #15
 800237a:	d903      	bls.n	8002384 <HAL_NVIC_SetPriority+0x20>
 800237c:	21a8      	movs	r1, #168	@ 0xa8
 800237e:	480e      	ldr	r0, [pc, #56]	@ (80023b8 <HAL_NVIC_SetPriority+0x54>)
 8002380:	f7fe fbb0 	bl	8000ae4 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	2b0f      	cmp	r3, #15
 8002388:	d903      	bls.n	8002392 <HAL_NVIC_SetPriority+0x2e>
 800238a:	21a9      	movs	r1, #169	@ 0xa9
 800238c:	480a      	ldr	r0, [pc, #40]	@ (80023b8 <HAL_NVIC_SetPriority+0x54>)
 800238e:	f7fe fba9 	bl	8000ae4 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002392:	f7ff ff1b 	bl	80021cc <__NVIC_GetPriorityGrouping>
 8002396:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002398:	687a      	ldr	r2, [r7, #4]
 800239a:	68b9      	ldr	r1, [r7, #8]
 800239c:	6978      	ldr	r0, [r7, #20]
 800239e:	f7ff ff6b 	bl	8002278 <NVIC_EncodePriority>
 80023a2:	4602      	mov	r2, r0
 80023a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023a8:	4611      	mov	r1, r2
 80023aa:	4618      	mov	r0, r3
 80023ac:	f7ff ff3a 	bl	8002224 <__NVIC_SetPriority>
}
 80023b0:	bf00      	nop
 80023b2:	3718      	adds	r7, #24
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	0800ce80 	.word	0x0800ce80

080023bc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	4603      	mov	r3, r0
 80023c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80023c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	da03      	bge.n	80023d6 <HAL_NVIC_EnableIRQ+0x1a>
 80023ce:	21bc      	movs	r1, #188	@ 0xbc
 80023d0:	4805      	ldr	r0, [pc, #20]	@ (80023e8 <HAL_NVIC_EnableIRQ+0x2c>)
 80023d2:	f7fe fb87 	bl	8000ae4 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023da:	4618      	mov	r0, r3
 80023dc:	f7ff ff04 	bl	80021e8 <__NVIC_EnableIRQ>
}
 80023e0:	bf00      	nop
 80023e2:	3708      	adds	r7, #8
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	0800ce80 	.word	0x0800ce80

080023ec <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023f4:	6878      	ldr	r0, [r7, #4]
 80023f6:	f7ff ff73 	bl	80022e0 <SysTick_Config>
 80023fa:	4603      	mov	r3, r0
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3708      	adds	r7, #8
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}

08002404 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b084      	sub	sp, #16
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002410:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002412:	f7ff f8d5 	bl	80015c0 <HAL_GetTick>
 8002416:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800241e:	b2db      	uxtb	r3, r3
 8002420:	2b02      	cmp	r3, #2
 8002422:	d008      	beq.n	8002436 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2280      	movs	r2, #128	@ 0x80
 8002428:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2200      	movs	r2, #0
 800242e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e052      	b.n	80024dc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f022 0216 	bic.w	r2, r2, #22
 8002444:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	695a      	ldr	r2, [r3, #20]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002454:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800245a:	2b00      	cmp	r3, #0
 800245c:	d103      	bne.n	8002466 <HAL_DMA_Abort+0x62>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002462:	2b00      	cmp	r3, #0
 8002464:	d007      	beq.n	8002476 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f022 0208 	bic.w	r2, r2, #8
 8002474:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f022 0201 	bic.w	r2, r2, #1
 8002484:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002486:	e013      	b.n	80024b0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002488:	f7ff f89a 	bl	80015c0 <HAL_GetTick>
 800248c:	4602      	mov	r2, r0
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	2b05      	cmp	r3, #5
 8002494:	d90c      	bls.n	80024b0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2220      	movs	r2, #32
 800249a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2203      	movs	r2, #3
 80024a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2200      	movs	r2, #0
 80024a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80024ac:	2303      	movs	r3, #3
 80024ae:	e015      	b.n	80024dc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0301 	and.w	r3, r3, #1
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d1e4      	bne.n	8002488 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024c2:	223f      	movs	r2, #63	@ 0x3f
 80024c4:	409a      	lsls	r2, r3
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2201      	movs	r2, #1
 80024ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2200      	movs	r2, #0
 80024d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80024da:	2300      	movs	r3, #0
}
 80024dc:	4618      	mov	r0, r3
 80024de:	3710      	adds	r7, #16
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}

080024e4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b083      	sub	sp, #12
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	2b02      	cmp	r3, #2
 80024f6:	d004      	beq.n	8002502 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2280      	movs	r2, #128	@ 0x80
 80024fc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e00c      	b.n	800251c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2205      	movs	r2, #5
 8002506:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f022 0201 	bic.w	r2, r2, #1
 8002518:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800251a:	2300      	movs	r3, #0
}
 800251c:	4618      	mov	r0, r3
 800251e:	370c      	adds	r7, #12
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr

08002528 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b088      	sub	sp, #32
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
 8002530:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002532:	2300      	movs	r3, #0
 8002534:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002536:	2300      	movs	r3, #0
 8002538:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800253a:	2300      	movs	r3, #0
 800253c:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4a38      	ldr	r2, [pc, #224]	@ (8002624 <HAL_GPIO_Init+0xfc>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d023      	beq.n	800258e <HAL_GPIO_Init+0x66>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4a37      	ldr	r2, [pc, #220]	@ (8002628 <HAL_GPIO_Init+0x100>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d01f      	beq.n	800258e <HAL_GPIO_Init+0x66>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	4a36      	ldr	r2, [pc, #216]	@ (800262c <HAL_GPIO_Init+0x104>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d01b      	beq.n	800258e <HAL_GPIO_Init+0x66>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	4a35      	ldr	r2, [pc, #212]	@ (8002630 <HAL_GPIO_Init+0x108>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d017      	beq.n	800258e <HAL_GPIO_Init+0x66>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	4a34      	ldr	r2, [pc, #208]	@ (8002634 <HAL_GPIO_Init+0x10c>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d013      	beq.n	800258e <HAL_GPIO_Init+0x66>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	4a33      	ldr	r2, [pc, #204]	@ (8002638 <HAL_GPIO_Init+0x110>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d00f      	beq.n	800258e <HAL_GPIO_Init+0x66>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	4a32      	ldr	r2, [pc, #200]	@ (800263c <HAL_GPIO_Init+0x114>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d00b      	beq.n	800258e <HAL_GPIO_Init+0x66>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	4a31      	ldr	r2, [pc, #196]	@ (8002640 <HAL_GPIO_Init+0x118>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d007      	beq.n	800258e <HAL_GPIO_Init+0x66>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	4a30      	ldr	r2, [pc, #192]	@ (8002644 <HAL_GPIO_Init+0x11c>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d003      	beq.n	800258e <HAL_GPIO_Init+0x66>
 8002586:	21ac      	movs	r1, #172	@ 0xac
 8002588:	482f      	ldr	r0, [pc, #188]	@ (8002648 <HAL_GPIO_Init+0x120>)
 800258a:	f7fe faab 	bl	8000ae4 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	b29b      	uxth	r3, r3
 8002594:	2b00      	cmp	r3, #0
 8002596:	d004      	beq.n	80025a2 <HAL_GPIO_Init+0x7a>
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025a0:	d303      	bcc.n	80025aa <HAL_GPIO_Init+0x82>
 80025a2:	21ad      	movs	r1, #173	@ 0xad
 80025a4:	4828      	ldr	r0, [pc, #160]	@ (8002648 <HAL_GPIO_Init+0x120>)
 80025a6:	f7fe fa9d 	bl	8000ae4 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d035      	beq.n	800261e <HAL_GPIO_Init+0xf6>
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d031      	beq.n	800261e <HAL_GPIO_Init+0xf6>
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	2b11      	cmp	r3, #17
 80025c0:	d02d      	beq.n	800261e <HAL_GPIO_Init+0xf6>
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	2b02      	cmp	r3, #2
 80025c8:	d029      	beq.n	800261e <HAL_GPIO_Init+0xf6>
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	2b12      	cmp	r3, #18
 80025d0:	d025      	beq.n	800261e <HAL_GPIO_Init+0xf6>
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
 80025da:	d020      	beq.n	800261e <HAL_GPIO_Init+0xf6>
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 80025e4:	d01b      	beq.n	800261e <HAL_GPIO_Init+0xf6>
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	f5b3 1f44 	cmp.w	r3, #3211264	@ 0x310000
 80025ee:	d016      	beq.n	800261e <HAL_GPIO_Init+0xf6>
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f5b3 1f90 	cmp.w	r3, #1179648	@ 0x120000
 80025f8:	d011      	beq.n	800261e <HAL_GPIO_Init+0xf6>
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	f5b3 1f08 	cmp.w	r3, #2228224	@ 0x220000
 8002602:	d00c      	beq.n	800261e <HAL_GPIO_Init+0xf6>
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f5b3 1f48 	cmp.w	r3, #3276800	@ 0x320000
 800260c:	d007      	beq.n	800261e <HAL_GPIO_Init+0xf6>
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	2b03      	cmp	r3, #3
 8002614:	d003      	beq.n	800261e <HAL_GPIO_Init+0xf6>
 8002616:	21ae      	movs	r1, #174	@ 0xae
 8002618:	480b      	ldr	r0, [pc, #44]	@ (8002648 <HAL_GPIO_Init+0x120>)
 800261a:	f7fe fa63 	bl	8000ae4 <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800261e:	2300      	movs	r3, #0
 8002620:	61fb      	str	r3, [r7, #28]
 8002622:	e241      	b.n	8002aa8 <HAL_GPIO_Init+0x580>
 8002624:	40020000 	.word	0x40020000
 8002628:	40020400 	.word	0x40020400
 800262c:	40020800 	.word	0x40020800
 8002630:	40020c00 	.word	0x40020c00
 8002634:	40021000 	.word	0x40021000
 8002638:	40021400 	.word	0x40021400
 800263c:	40021800 	.word	0x40021800
 8002640:	40021c00 	.word	0x40021c00
 8002644:	40022000 	.word	0x40022000
 8002648:	0800cebc 	.word	0x0800cebc
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800264c:	2201      	movs	r2, #1
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	fa02 f303 	lsl.w	r3, r2, r3
 8002654:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	697a      	ldr	r2, [r7, #20]
 800265c:	4013      	ands	r3, r2
 800265e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002660:	693a      	ldr	r2, [r7, #16]
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	429a      	cmp	r2, r3
 8002666:	f040 821c 	bne.w	8002aa2 <HAL_GPIO_Init+0x57a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	f003 0303 	and.w	r3, r3, #3
 8002672:	2b01      	cmp	r3, #1
 8002674:	d005      	beq.n	8002682 <HAL_GPIO_Init+0x15a>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800267e:	2b02      	cmp	r3, #2
 8002680:	d144      	bne.n	800270c <HAL_GPIO_Init+0x1e4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	68db      	ldr	r3, [r3, #12]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d00f      	beq.n	80026aa <HAL_GPIO_Init+0x182>
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	68db      	ldr	r3, [r3, #12]
 800268e:	2b01      	cmp	r3, #1
 8002690:	d00b      	beq.n	80026aa <HAL_GPIO_Init+0x182>
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	68db      	ldr	r3, [r3, #12]
 8002696:	2b02      	cmp	r3, #2
 8002698:	d007      	beq.n	80026aa <HAL_GPIO_Init+0x182>
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	68db      	ldr	r3, [r3, #12]
 800269e:	2b03      	cmp	r3, #3
 80026a0:	d003      	beq.n	80026aa <HAL_GPIO_Init+0x182>
 80026a2:	21c0      	movs	r1, #192	@ 0xc0
 80026a4:	4881      	ldr	r0, [pc, #516]	@ (80028ac <HAL_GPIO_Init+0x384>)
 80026a6:	f7fe fa1d 	bl	8000ae4 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80026b0:	69fb      	ldr	r3, [r7, #28]
 80026b2:	005b      	lsls	r3, r3, #1
 80026b4:	2203      	movs	r2, #3
 80026b6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ba:	43db      	mvns	r3, r3
 80026bc:	69ba      	ldr	r2, [r7, #24]
 80026be:	4013      	ands	r3, r2
 80026c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	68da      	ldr	r2, [r3, #12]
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	005b      	lsls	r3, r3, #1
 80026ca:	fa02 f303 	lsl.w	r3, r2, r3
 80026ce:	69ba      	ldr	r2, [r7, #24]
 80026d0:	4313      	orrs	r3, r2
 80026d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	69ba      	ldr	r2, [r7, #24]
 80026d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026e0:	2201      	movs	r2, #1
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	fa02 f303 	lsl.w	r3, r2, r3
 80026e8:	43db      	mvns	r3, r3
 80026ea:	69ba      	ldr	r2, [r7, #24]
 80026ec:	4013      	ands	r3, r2
 80026ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	091b      	lsrs	r3, r3, #4
 80026f6:	f003 0201 	and.w	r2, r3, #1
 80026fa:	69fb      	ldr	r3, [r7, #28]
 80026fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002700:	69ba      	ldr	r2, [r7, #24]
 8002702:	4313      	orrs	r3, r2
 8002704:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	69ba      	ldr	r2, [r7, #24]
 800270a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	f003 0303 	and.w	r3, r3, #3
 8002714:	2b03      	cmp	r3, #3
 8002716:	d027      	beq.n	8002768 <HAL_GPIO_Init+0x240>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d00b      	beq.n	8002738 <HAL_GPIO_Init+0x210>
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	2b01      	cmp	r3, #1
 8002726:	d007      	beq.n	8002738 <HAL_GPIO_Init+0x210>
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	2b02      	cmp	r3, #2
 800272e:	d003      	beq.n	8002738 <HAL_GPIO_Init+0x210>
 8002730:	21d1      	movs	r1, #209	@ 0xd1
 8002732:	485e      	ldr	r0, [pc, #376]	@ (80028ac <HAL_GPIO_Init+0x384>)
 8002734:	f7fe f9d6 	bl	8000ae4 <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800273e:	69fb      	ldr	r3, [r7, #28]
 8002740:	005b      	lsls	r3, r3, #1
 8002742:	2203      	movs	r2, #3
 8002744:	fa02 f303 	lsl.w	r3, r2, r3
 8002748:	43db      	mvns	r3, r3
 800274a:	69ba      	ldr	r2, [r7, #24]
 800274c:	4013      	ands	r3, r2
 800274e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	689a      	ldr	r2, [r3, #8]
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	005b      	lsls	r3, r3, #1
 8002758:	fa02 f303 	lsl.w	r3, r2, r3
 800275c:	69ba      	ldr	r2, [r7, #24]
 800275e:	4313      	orrs	r3, r2
 8002760:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	69ba      	ldr	r2, [r7, #24]
 8002766:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	f003 0303 	and.w	r3, r3, #3
 8002770:	2b02      	cmp	r3, #2
 8002772:	f040 80c1 	bne.w	80028f8 <HAL_GPIO_Init+0x3d0>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	691b      	ldr	r3, [r3, #16]
 800277a:	2b00      	cmp	r3, #0
 800277c:	f000 8098 	beq.w	80028b0 <HAL_GPIO_Init+0x388>
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	691b      	ldr	r3, [r3, #16]
 8002784:	2b09      	cmp	r3, #9
 8002786:	f000 8093 	beq.w	80028b0 <HAL_GPIO_Init+0x388>
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	691b      	ldr	r3, [r3, #16]
 800278e:	2b00      	cmp	r3, #0
 8002790:	f000 808e 	beq.w	80028b0 <HAL_GPIO_Init+0x388>
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	691b      	ldr	r3, [r3, #16]
 8002798:	2b00      	cmp	r3, #0
 800279a:	f000 8089 	beq.w	80028b0 <HAL_GPIO_Init+0x388>
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	691b      	ldr	r3, [r3, #16]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	f000 8084 	beq.w	80028b0 <HAL_GPIO_Init+0x388>
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	691b      	ldr	r3, [r3, #16]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d07f      	beq.n	80028b0 <HAL_GPIO_Init+0x388>
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	691b      	ldr	r3, [r3, #16]
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d07b      	beq.n	80028b0 <HAL_GPIO_Init+0x388>
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	691b      	ldr	r3, [r3, #16]
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d077      	beq.n	80028b0 <HAL_GPIO_Init+0x388>
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	691b      	ldr	r3, [r3, #16]
 80027c4:	2b02      	cmp	r3, #2
 80027c6:	d073      	beq.n	80028b0 <HAL_GPIO_Init+0x388>
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	691b      	ldr	r3, [r3, #16]
 80027cc:	2b02      	cmp	r3, #2
 80027ce:	d06f      	beq.n	80028b0 <HAL_GPIO_Init+0x388>
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	691b      	ldr	r3, [r3, #16]
 80027d4:	2b02      	cmp	r3, #2
 80027d6:	d06b      	beq.n	80028b0 <HAL_GPIO_Init+0x388>
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	691b      	ldr	r3, [r3, #16]
 80027dc:	2b03      	cmp	r3, #3
 80027de:	d067      	beq.n	80028b0 <HAL_GPIO_Init+0x388>
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	691b      	ldr	r3, [r3, #16]
 80027e4:	2b04      	cmp	r3, #4
 80027e6:	d063      	beq.n	80028b0 <HAL_GPIO_Init+0x388>
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	691b      	ldr	r3, [r3, #16]
 80027ec:	2b04      	cmp	r3, #4
 80027ee:	d05f      	beq.n	80028b0 <HAL_GPIO_Init+0x388>
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	691b      	ldr	r3, [r3, #16]
 80027f4:	2b04      	cmp	r3, #4
 80027f6:	d05b      	beq.n	80028b0 <HAL_GPIO_Init+0x388>
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	691b      	ldr	r3, [r3, #16]
 80027fc:	2b05      	cmp	r3, #5
 80027fe:	d057      	beq.n	80028b0 <HAL_GPIO_Init+0x388>
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	691b      	ldr	r3, [r3, #16]
 8002804:	2b05      	cmp	r3, #5
 8002806:	d053      	beq.n	80028b0 <HAL_GPIO_Init+0x388>
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	691b      	ldr	r3, [r3, #16]
 800280c:	2b09      	cmp	r3, #9
 800280e:	d04f      	beq.n	80028b0 <HAL_GPIO_Init+0x388>
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	691b      	ldr	r3, [r3, #16]
 8002814:	2b06      	cmp	r3, #6
 8002816:	d04b      	beq.n	80028b0 <HAL_GPIO_Init+0x388>
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	691b      	ldr	r3, [r3, #16]
 800281c:	2b09      	cmp	r3, #9
 800281e:	d047      	beq.n	80028b0 <HAL_GPIO_Init+0x388>
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	691b      	ldr	r3, [r3, #16]
 8002824:	2b07      	cmp	r3, #7
 8002826:	d043      	beq.n	80028b0 <HAL_GPIO_Init+0x388>
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	691b      	ldr	r3, [r3, #16]
 800282c:	2b07      	cmp	r3, #7
 800282e:	d03f      	beq.n	80028b0 <HAL_GPIO_Init+0x388>
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	691b      	ldr	r3, [r3, #16]
 8002834:	2b07      	cmp	r3, #7
 8002836:	d03b      	beq.n	80028b0 <HAL_GPIO_Init+0x388>
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	691b      	ldr	r3, [r3, #16]
 800283c:	2b08      	cmp	r3, #8
 800283e:	d037      	beq.n	80028b0 <HAL_GPIO_Init+0x388>
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	691b      	ldr	r3, [r3, #16]
 8002844:	2b08      	cmp	r3, #8
 8002846:	d033      	beq.n	80028b0 <HAL_GPIO_Init+0x388>
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	691b      	ldr	r3, [r3, #16]
 800284c:	2b08      	cmp	r3, #8
 800284e:	d02f      	beq.n	80028b0 <HAL_GPIO_Init+0x388>
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	691b      	ldr	r3, [r3, #16]
 8002854:	2b09      	cmp	r3, #9
 8002856:	d02b      	beq.n	80028b0 <HAL_GPIO_Init+0x388>
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	691b      	ldr	r3, [r3, #16]
 800285c:	2b09      	cmp	r3, #9
 800285e:	d027      	beq.n	80028b0 <HAL_GPIO_Init+0x388>
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	691b      	ldr	r3, [r3, #16]
 8002864:	2b0a      	cmp	r3, #10
 8002866:	d023      	beq.n	80028b0 <HAL_GPIO_Init+0x388>
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	691b      	ldr	r3, [r3, #16]
 800286c:	2b0a      	cmp	r3, #10
 800286e:	d01f      	beq.n	80028b0 <HAL_GPIO_Init+0x388>
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	691b      	ldr	r3, [r3, #16]
 8002874:	2b0b      	cmp	r3, #11
 8002876:	d01b      	beq.n	80028b0 <HAL_GPIO_Init+0x388>
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	691b      	ldr	r3, [r3, #16]
 800287c:	2b0c      	cmp	r3, #12
 800287e:	d017      	beq.n	80028b0 <HAL_GPIO_Init+0x388>
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	691b      	ldr	r3, [r3, #16]
 8002884:	2b0c      	cmp	r3, #12
 8002886:	d013      	beq.n	80028b0 <HAL_GPIO_Init+0x388>
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	691b      	ldr	r3, [r3, #16]
 800288c:	2b0d      	cmp	r3, #13
 800288e:	d00f      	beq.n	80028b0 <HAL_GPIO_Init+0x388>
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	691b      	ldr	r3, [r3, #16]
 8002894:	2b0c      	cmp	r3, #12
 8002896:	d00b      	beq.n	80028b0 <HAL_GPIO_Init+0x388>
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	691b      	ldr	r3, [r3, #16]
 800289c:	2b0f      	cmp	r3, #15
 800289e:	d007      	beq.n	80028b0 <HAL_GPIO_Init+0x388>
 80028a0:	21de      	movs	r1, #222	@ 0xde
 80028a2:	4802      	ldr	r0, [pc, #8]	@ (80028ac <HAL_GPIO_Init+0x384>)
 80028a4:	f7fe f91e 	bl	8000ae4 <assert_failed>
 80028a8:	e002      	b.n	80028b0 <HAL_GPIO_Init+0x388>
 80028aa:	bf00      	nop
 80028ac:	0800cebc 	.word	0x0800cebc
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80028b0:	69fb      	ldr	r3, [r7, #28]
 80028b2:	08da      	lsrs	r2, r3, #3
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	3208      	adds	r2, #8
 80028b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	f003 0307 	and.w	r3, r3, #7
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	220f      	movs	r2, #15
 80028c8:	fa02 f303 	lsl.w	r3, r2, r3
 80028cc:	43db      	mvns	r3, r3
 80028ce:	69ba      	ldr	r2, [r7, #24]
 80028d0:	4013      	ands	r3, r2
 80028d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	691a      	ldr	r2, [r3, #16]
 80028d8:	69fb      	ldr	r3, [r7, #28]
 80028da:	f003 0307 	and.w	r3, r3, #7
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	fa02 f303 	lsl.w	r3, r2, r3
 80028e4:	69ba      	ldr	r2, [r7, #24]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	08da      	lsrs	r2, r3, #3
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	3208      	adds	r2, #8
 80028f2:	69b9      	ldr	r1, [r7, #24]
 80028f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	005b      	lsls	r3, r3, #1
 8002902:	2203      	movs	r2, #3
 8002904:	fa02 f303 	lsl.w	r3, r2, r3
 8002908:	43db      	mvns	r3, r3
 800290a:	69ba      	ldr	r2, [r7, #24]
 800290c:	4013      	ands	r3, r2
 800290e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	f003 0203 	and.w	r2, r3, #3
 8002918:	69fb      	ldr	r3, [r7, #28]
 800291a:	005b      	lsls	r3, r3, #1
 800291c:	fa02 f303 	lsl.w	r3, r2, r3
 8002920:	69ba      	ldr	r2, [r7, #24]
 8002922:	4313      	orrs	r3, r2
 8002924:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	69ba      	ldr	r2, [r7, #24]
 800292a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002934:	2b00      	cmp	r3, #0
 8002936:	f000 80b4 	beq.w	8002aa2 <HAL_GPIO_Init+0x57a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800293a:	2300      	movs	r3, #0
 800293c:	60fb      	str	r3, [r7, #12]
 800293e:	4b5f      	ldr	r3, [pc, #380]	@ (8002abc <HAL_GPIO_Init+0x594>)
 8002940:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002942:	4a5e      	ldr	r2, [pc, #376]	@ (8002abc <HAL_GPIO_Init+0x594>)
 8002944:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002948:	6453      	str	r3, [r2, #68]	@ 0x44
 800294a:	4b5c      	ldr	r3, [pc, #368]	@ (8002abc <HAL_GPIO_Init+0x594>)
 800294c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800294e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002952:	60fb      	str	r3, [r7, #12]
 8002954:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002956:	4a5a      	ldr	r2, [pc, #360]	@ (8002ac0 <HAL_GPIO_Init+0x598>)
 8002958:	69fb      	ldr	r3, [r7, #28]
 800295a:	089b      	lsrs	r3, r3, #2
 800295c:	3302      	adds	r3, #2
 800295e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002962:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002964:	69fb      	ldr	r3, [r7, #28]
 8002966:	f003 0303 	and.w	r3, r3, #3
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	220f      	movs	r2, #15
 800296e:	fa02 f303 	lsl.w	r3, r2, r3
 8002972:	43db      	mvns	r3, r3
 8002974:	69ba      	ldr	r2, [r7, #24]
 8002976:	4013      	ands	r3, r2
 8002978:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	4a51      	ldr	r2, [pc, #324]	@ (8002ac4 <HAL_GPIO_Init+0x59c>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d02b      	beq.n	80029da <HAL_GPIO_Init+0x4b2>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	4a50      	ldr	r2, [pc, #320]	@ (8002ac8 <HAL_GPIO_Init+0x5a0>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d025      	beq.n	80029d6 <HAL_GPIO_Init+0x4ae>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	4a4f      	ldr	r2, [pc, #316]	@ (8002acc <HAL_GPIO_Init+0x5a4>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d01f      	beq.n	80029d2 <HAL_GPIO_Init+0x4aa>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	4a4e      	ldr	r2, [pc, #312]	@ (8002ad0 <HAL_GPIO_Init+0x5a8>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d019      	beq.n	80029ce <HAL_GPIO_Init+0x4a6>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	4a4d      	ldr	r2, [pc, #308]	@ (8002ad4 <HAL_GPIO_Init+0x5ac>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d013      	beq.n	80029ca <HAL_GPIO_Init+0x4a2>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4a4c      	ldr	r2, [pc, #304]	@ (8002ad8 <HAL_GPIO_Init+0x5b0>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d00d      	beq.n	80029c6 <HAL_GPIO_Init+0x49e>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	4a4b      	ldr	r2, [pc, #300]	@ (8002adc <HAL_GPIO_Init+0x5b4>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d007      	beq.n	80029c2 <HAL_GPIO_Init+0x49a>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	4a4a      	ldr	r2, [pc, #296]	@ (8002ae0 <HAL_GPIO_Init+0x5b8>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d101      	bne.n	80029be <HAL_GPIO_Init+0x496>
 80029ba:	2307      	movs	r3, #7
 80029bc:	e00e      	b.n	80029dc <HAL_GPIO_Init+0x4b4>
 80029be:	2308      	movs	r3, #8
 80029c0:	e00c      	b.n	80029dc <HAL_GPIO_Init+0x4b4>
 80029c2:	2306      	movs	r3, #6
 80029c4:	e00a      	b.n	80029dc <HAL_GPIO_Init+0x4b4>
 80029c6:	2305      	movs	r3, #5
 80029c8:	e008      	b.n	80029dc <HAL_GPIO_Init+0x4b4>
 80029ca:	2304      	movs	r3, #4
 80029cc:	e006      	b.n	80029dc <HAL_GPIO_Init+0x4b4>
 80029ce:	2303      	movs	r3, #3
 80029d0:	e004      	b.n	80029dc <HAL_GPIO_Init+0x4b4>
 80029d2:	2302      	movs	r3, #2
 80029d4:	e002      	b.n	80029dc <HAL_GPIO_Init+0x4b4>
 80029d6:	2301      	movs	r3, #1
 80029d8:	e000      	b.n	80029dc <HAL_GPIO_Init+0x4b4>
 80029da:	2300      	movs	r3, #0
 80029dc:	69fa      	ldr	r2, [r7, #28]
 80029de:	f002 0203 	and.w	r2, r2, #3
 80029e2:	0092      	lsls	r2, r2, #2
 80029e4:	4093      	lsls	r3, r2
 80029e6:	69ba      	ldr	r2, [r7, #24]
 80029e8:	4313      	orrs	r3, r2
 80029ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80029ec:	4934      	ldr	r1, [pc, #208]	@ (8002ac0 <HAL_GPIO_Init+0x598>)
 80029ee:	69fb      	ldr	r3, [r7, #28]
 80029f0:	089b      	lsrs	r3, r3, #2
 80029f2:	3302      	adds	r3, #2
 80029f4:	69ba      	ldr	r2, [r7, #24]
 80029f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029fa:	4b3a      	ldr	r3, [pc, #232]	@ (8002ae4 <HAL_GPIO_Init+0x5bc>)
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	43db      	mvns	r3, r3
 8002a04:	69ba      	ldr	r2, [r7, #24]
 8002a06:	4013      	ands	r3, r2
 8002a08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d003      	beq.n	8002a1e <HAL_GPIO_Init+0x4f6>
        {
          temp |= iocurrent;
 8002a16:	69ba      	ldr	r2, [r7, #24]
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a1e:	4a31      	ldr	r2, [pc, #196]	@ (8002ae4 <HAL_GPIO_Init+0x5bc>)
 8002a20:	69bb      	ldr	r3, [r7, #24]
 8002a22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a24:	4b2f      	ldr	r3, [pc, #188]	@ (8002ae4 <HAL_GPIO_Init+0x5bc>)
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	43db      	mvns	r3, r3
 8002a2e:	69ba      	ldr	r2, [r7, #24]
 8002a30:	4013      	ands	r3, r2
 8002a32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d003      	beq.n	8002a48 <HAL_GPIO_Init+0x520>
        {
          temp |= iocurrent;
 8002a40:	69ba      	ldr	r2, [r7, #24]
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	4313      	orrs	r3, r2
 8002a46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a48:	4a26      	ldr	r2, [pc, #152]	@ (8002ae4 <HAL_GPIO_Init+0x5bc>)
 8002a4a:	69bb      	ldr	r3, [r7, #24]
 8002a4c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a4e:	4b25      	ldr	r3, [pc, #148]	@ (8002ae4 <HAL_GPIO_Init+0x5bc>)
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	43db      	mvns	r3, r3
 8002a58:	69ba      	ldr	r2, [r7, #24]
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d003      	beq.n	8002a72 <HAL_GPIO_Init+0x54a>
        {
          temp |= iocurrent;
 8002a6a:	69ba      	ldr	r2, [r7, #24]
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a72:	4a1c      	ldr	r2, [pc, #112]	@ (8002ae4 <HAL_GPIO_Init+0x5bc>)
 8002a74:	69bb      	ldr	r3, [r7, #24]
 8002a76:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a78:	4b1a      	ldr	r3, [pc, #104]	@ (8002ae4 <HAL_GPIO_Init+0x5bc>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	43db      	mvns	r3, r3
 8002a82:	69ba      	ldr	r2, [r7, #24]
 8002a84:	4013      	ands	r3, r2
 8002a86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d003      	beq.n	8002a9c <HAL_GPIO_Init+0x574>
        {
          temp |= iocurrent;
 8002a94:	69ba      	ldr	r2, [r7, #24]
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a9c:	4a11      	ldr	r2, [pc, #68]	@ (8002ae4 <HAL_GPIO_Init+0x5bc>)
 8002a9e:	69bb      	ldr	r3, [r7, #24]
 8002aa0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	3301      	adds	r3, #1
 8002aa6:	61fb      	str	r3, [r7, #28]
 8002aa8:	69fb      	ldr	r3, [r7, #28]
 8002aaa:	2b0f      	cmp	r3, #15
 8002aac:	f67f adce 	bls.w	800264c <HAL_GPIO_Init+0x124>
      }
    }
  }
}
 8002ab0:	bf00      	nop
 8002ab2:	bf00      	nop
 8002ab4:	3720      	adds	r7, #32
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	40023800 	.word	0x40023800
 8002ac0:	40013800 	.word	0x40013800
 8002ac4:	40020000 	.word	0x40020000
 8002ac8:	40020400 	.word	0x40020400
 8002acc:	40020800 	.word	0x40020800
 8002ad0:	40020c00 	.word	0x40020c00
 8002ad4:	40021000 	.word	0x40021000
 8002ad8:	40021400 	.word	0x40021400
 8002adc:	40021800 	.word	0x40021800
 8002ae0:	40021c00 	.word	0x40021c00
 8002ae4:	40013c00 	.word	0x40013c00

08002ae8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b084      	sub	sp, #16
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	460b      	mov	r3, r1
 8002af2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002af4:	887b      	ldrh	r3, [r7, #2]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d104      	bne.n	8002b04 <HAL_GPIO_ReadPin+0x1c>
 8002afa:	f44f 71be 	mov.w	r1, #380	@ 0x17c
 8002afe:	4809      	ldr	r0, [pc, #36]	@ (8002b24 <HAL_GPIO_ReadPin+0x3c>)
 8002b00:	f7fd fff0 	bl	8000ae4 <assert_failed>

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	691a      	ldr	r2, [r3, #16]
 8002b08:	887b      	ldrh	r3, [r7, #2]
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d002      	beq.n	8002b16 <HAL_GPIO_ReadPin+0x2e>
  {
    bitstatus = GPIO_PIN_SET;
 8002b10:	2301      	movs	r3, #1
 8002b12:	73fb      	strb	r3, [r7, #15]
 8002b14:	e001      	b.n	8002b1a <HAL_GPIO_ReadPin+0x32>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b16:	2300      	movs	r3, #0
 8002b18:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002b1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3710      	adds	r7, #16
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	0800cebc 	.word	0x0800cebc

08002b28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b082      	sub	sp, #8
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	460b      	mov	r3, r1
 8002b32:	807b      	strh	r3, [r7, #2]
 8002b34:	4613      	mov	r3, r2
 8002b36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002b38:	887b      	ldrh	r3, [r7, #2]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d104      	bne.n	8002b48 <HAL_GPIO_WritePin+0x20>
 8002b3e:	f240 119d 	movw	r1, #413	@ 0x19d
 8002b42:	480e      	ldr	r0, [pc, #56]	@ (8002b7c <HAL_GPIO_WritePin+0x54>)
 8002b44:	f7fd ffce 	bl	8000ae4 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8002b48:	787b      	ldrb	r3, [r7, #1]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d007      	beq.n	8002b5e <HAL_GPIO_WritePin+0x36>
 8002b4e:	787b      	ldrb	r3, [r7, #1]
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d004      	beq.n	8002b5e <HAL_GPIO_WritePin+0x36>
 8002b54:	f44f 71cf 	mov.w	r1, #414	@ 0x19e
 8002b58:	4808      	ldr	r0, [pc, #32]	@ (8002b7c <HAL_GPIO_WritePin+0x54>)
 8002b5a:	f7fd ffc3 	bl	8000ae4 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8002b5e:	787b      	ldrb	r3, [r7, #1]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d003      	beq.n	8002b6c <HAL_GPIO_WritePin+0x44>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b64:	887a      	ldrh	r2, [r7, #2]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b6a:	e003      	b.n	8002b74 <HAL_GPIO_WritePin+0x4c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b6c:	887b      	ldrh	r3, [r7, #2]
 8002b6e:	041a      	lsls	r2, r3, #16
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	619a      	str	r2, [r3, #24]
}
 8002b74:	bf00      	nop
 8002b76:	3708      	adds	r7, #8
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	0800cebc 	.word	0x0800cebc

08002b80 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b086      	sub	sp, #24
 8002b84:	af02      	add	r7, sp, #8
 8002b86:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d101      	bne.n	8002b92 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e067      	b.n	8002c62 <HAL_HCD_Init+0xe2>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002b9a:	d008      	beq.n	8002bae <HAL_HCD_Init+0x2e>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a32      	ldr	r2, [pc, #200]	@ (8002c6c <HAL_HCD_Init+0xec>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d003      	beq.n	8002bae <HAL_HCD_Init+0x2e>
 8002ba6:	217b      	movs	r1, #123	@ 0x7b
 8002ba8:	4831      	ldr	r0, [pc, #196]	@ (8002c70 <HAL_HCD_Init+0xf0>)
 8002baa:	f7fd ff9b 	bl	8000ae4 <assert_failed>

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d106      	bne.n	8002bce <HAL_HCD_Init+0x4e>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	f009 fc2d 	bl	800c428 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2203      	movs	r2, #3
 8002bd2:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002bdc:	d102      	bne.n	8002be4 <HAL_HCD_Init+0x64>
  {
    hhcd->Init.dma_enable = 0U;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2200      	movs	r2, #0
 8002be2:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4618      	mov	r0, r3
 8002bea:	f006 fa46 	bl	800907a <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6818      	ldr	r0, [r3, #0]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	7c1a      	ldrb	r2, [r3, #16]
 8002bf6:	f88d 2000 	strb.w	r2, [sp]
 8002bfa:	3304      	adds	r3, #4
 8002bfc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002bfe:	f006 f9c7 	bl	8008f90 <USB_CoreInit>
 8002c02:	4603      	mov	r3, r0
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d005      	beq.n	8002c14 <HAL_HCD_Init+0x94>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2202      	movs	r2, #2
 8002c0c:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	e026      	b.n	8002c62 <HAL_HCD_Init+0xe2>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	2101      	movs	r1, #1
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f006 fa3e 	bl	800909c <USB_SetCurrentMode>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d005      	beq.n	8002c32 <HAL_HCD_Init+0xb2>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2202      	movs	r2, #2
 8002c2a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e017      	b.n	8002c62 <HAL_HCD_Init+0xe2>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6818      	ldr	r0, [r3, #0]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	7c1a      	ldrb	r2, [r3, #16]
 8002c3a:	f88d 2000 	strb.w	r2, [sp]
 8002c3e:	3304      	adds	r3, #4
 8002c40:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c42:	f006 fbe1 	bl	8009408 <USB_HostInit>
 8002c46:	4603      	mov	r3, r0
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d005      	beq.n	8002c58 <HAL_HCD_Init+0xd8>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2202      	movs	r2, #2
 8002c50:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	e004      	b.n	8002c62 <HAL_HCD_Init+0xe2>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8002c60:	2300      	movs	r3, #0
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3710      	adds	r7, #16
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	40040000 	.word	0x40040000
 8002c70:	0800cef8 	.word	0x0800cef8

08002c74 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8002c74:	b590      	push	{r4, r7, lr}
 8002c76:	b08b      	sub	sp, #44	@ 0x2c
 8002c78:	af04      	add	r7, sp, #16
 8002c7a:	6078      	str	r0, [r7, #4]
 8002c7c:	4608      	mov	r0, r1
 8002c7e:	4611      	mov	r1, r2
 8002c80:	461a      	mov	r2, r3
 8002c82:	4603      	mov	r3, r0
 8002c84:	70fb      	strb	r3, [r7, #3]
 8002c86:	460b      	mov	r3, r1
 8002c88:	70bb      	strb	r3, [r7, #2]
 8002c8a:	4613      	mov	r3, r2
 8002c8c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8002c8e:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8002c90:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d101      	bne.n	8002ca0 <HAL_HCD_HC_Init+0x2c>
 8002c9c:	2302      	movs	r3, #2
 8002c9e:	e09d      	b.n	8002ddc <HAL_HCD_HC_Init+0x168>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8002ca8:	78fa      	ldrb	r2, [r7, #3]
 8002caa:	6879      	ldr	r1, [r7, #4]
 8002cac:	4613      	mov	r3, r2
 8002cae:	011b      	lsls	r3, r3, #4
 8002cb0:	1a9b      	subs	r3, r3, r2
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	440b      	add	r3, r1
 8002cb6:	3319      	adds	r3, #25
 8002cb8:	2200      	movs	r2, #0
 8002cba:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002cbc:	78fa      	ldrb	r2, [r7, #3]
 8002cbe:	6879      	ldr	r1, [r7, #4]
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	011b      	lsls	r3, r3, #4
 8002cc4:	1a9b      	subs	r3, r3, r2
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	440b      	add	r3, r1
 8002cca:	3314      	adds	r3, #20
 8002ccc:	787a      	ldrb	r2, [r7, #1]
 8002cce:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002cd0:	78fa      	ldrb	r2, [r7, #3]
 8002cd2:	6879      	ldr	r1, [r7, #4]
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	011b      	lsls	r3, r3, #4
 8002cd8:	1a9b      	subs	r3, r3, r2
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	440b      	add	r3, r1
 8002cde:	3315      	adds	r3, #21
 8002ce0:	78fa      	ldrb	r2, [r7, #3]
 8002ce2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002ce4:	78fa      	ldrb	r2, [r7, #3]
 8002ce6:	6879      	ldr	r1, [r7, #4]
 8002ce8:	4613      	mov	r3, r2
 8002cea:	011b      	lsls	r3, r3, #4
 8002cec:	1a9b      	subs	r3, r3, r2
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	440b      	add	r3, r1
 8002cf2:	3326      	adds	r3, #38	@ 0x26
 8002cf4:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8002cf8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002cfa:	78fa      	ldrb	r2, [r7, #3]
 8002cfc:	78bb      	ldrb	r3, [r7, #2]
 8002cfe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002d02:	b2d8      	uxtb	r0, r3
 8002d04:	6879      	ldr	r1, [r7, #4]
 8002d06:	4613      	mov	r3, r2
 8002d08:	011b      	lsls	r3, r3, #4
 8002d0a:	1a9b      	subs	r3, r3, r2
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	440b      	add	r3, r1
 8002d10:	3316      	adds	r3, #22
 8002d12:	4602      	mov	r2, r0
 8002d14:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8002d16:	78fb      	ldrb	r3, [r7, #3]
 8002d18:	4619      	mov	r1, r3
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f000 fbc8 	bl	80034b0 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8002d20:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	da0a      	bge.n	8002d3e <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002d28:	78fa      	ldrb	r2, [r7, #3]
 8002d2a:	6879      	ldr	r1, [r7, #4]
 8002d2c:	4613      	mov	r3, r2
 8002d2e:	011b      	lsls	r3, r3, #4
 8002d30:	1a9b      	subs	r3, r3, r2
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	440b      	add	r3, r1
 8002d36:	3317      	adds	r3, #23
 8002d38:	2201      	movs	r2, #1
 8002d3a:	701a      	strb	r2, [r3, #0]
 8002d3c:	e009      	b.n	8002d52 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002d3e:	78fa      	ldrb	r2, [r7, #3]
 8002d40:	6879      	ldr	r1, [r7, #4]
 8002d42:	4613      	mov	r3, r2
 8002d44:	011b      	lsls	r3, r3, #4
 8002d46:	1a9b      	subs	r3, r3, r2
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	440b      	add	r3, r1
 8002d4c:	3317      	adds	r3, #23
 8002d4e:	2200      	movs	r2, #0
 8002d50:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4618      	mov	r0, r3
 8002d58:	f006 fcba 	bl	80096d0 <USB_GetHostSpeed>
 8002d5c:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8002d5e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d10b      	bne.n	8002d7e <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8002d66:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d107      	bne.n	8002d7e <HAL_HCD_HC_Init+0x10a>
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d104      	bne.n	8002d7e <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	2bbc      	cmp	r3, #188	@ 0xbc
 8002d78:	d901      	bls.n	8002d7e <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8002d7a:	23bc      	movs	r3, #188	@ 0xbc
 8002d7c:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8002d7e:	78fa      	ldrb	r2, [r7, #3]
 8002d80:	6879      	ldr	r1, [r7, #4]
 8002d82:	4613      	mov	r3, r2
 8002d84:	011b      	lsls	r3, r3, #4
 8002d86:	1a9b      	subs	r3, r3, r2
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	440b      	add	r3, r1
 8002d8c:	3318      	adds	r3, #24
 8002d8e:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8002d92:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8002d94:	78fa      	ldrb	r2, [r7, #3]
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	b298      	uxth	r0, r3
 8002d9a:	6879      	ldr	r1, [r7, #4]
 8002d9c:	4613      	mov	r3, r2
 8002d9e:	011b      	lsls	r3, r3, #4
 8002da0:	1a9b      	subs	r3, r3, r2
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	440b      	add	r3, r1
 8002da6:	3328      	adds	r3, #40	@ 0x28
 8002da8:	4602      	mov	r2, r0
 8002daa:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6818      	ldr	r0, [r3, #0]
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	b29b      	uxth	r3, r3
 8002db4:	787c      	ldrb	r4, [r7, #1]
 8002db6:	78ba      	ldrb	r2, [r7, #2]
 8002db8:	78f9      	ldrb	r1, [r7, #3]
 8002dba:	9302      	str	r3, [sp, #8]
 8002dbc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002dc0:	9301      	str	r3, [sp, #4]
 8002dc2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002dc6:	9300      	str	r3, [sp, #0]
 8002dc8:	4623      	mov	r3, r4
 8002dca:	f006 fca9 	bl	8009720 <USB_HC_Init>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8002dda:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	371c      	adds	r7, #28
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd90      	pop	{r4, r7, pc}

08002de4 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b084      	sub	sp, #16
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
 8002dec:	460b      	mov	r3, r1
 8002dee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002df0:	2300      	movs	r3, #0
 8002df2:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d101      	bne.n	8002e02 <HAL_HCD_HC_Halt+0x1e>
 8002dfe:	2302      	movs	r3, #2
 8002e00:	e00f      	b.n	8002e22 <HAL_HCD_HC_Halt+0x3e>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2201      	movs	r2, #1
 8002e06:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	78fa      	ldrb	r2, [r7, #3]
 8002e10:	4611      	mov	r1, r2
 8002e12:	4618      	mov	r0, r3
 8002e14:	f007 f83b 	bl	8009e8e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8002e20:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3710      	adds	r7, #16
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
	...

08002e2c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	4608      	mov	r0, r1
 8002e36:	4611      	mov	r1, r2
 8002e38:	461a      	mov	r2, r3
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	70fb      	strb	r3, [r7, #3]
 8002e3e:	460b      	mov	r3, r1
 8002e40:	70bb      	strb	r3, [r7, #2]
 8002e42:	4613      	mov	r3, r2
 8002e44:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002e46:	78fa      	ldrb	r2, [r7, #3]
 8002e48:	6879      	ldr	r1, [r7, #4]
 8002e4a:	4613      	mov	r3, r2
 8002e4c:	011b      	lsls	r3, r3, #4
 8002e4e:	1a9b      	subs	r3, r3, r2
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	440b      	add	r3, r1
 8002e54:	3317      	adds	r3, #23
 8002e56:	78ba      	ldrb	r2, [r7, #2]
 8002e58:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002e5a:	78fa      	ldrb	r2, [r7, #3]
 8002e5c:	6879      	ldr	r1, [r7, #4]
 8002e5e:	4613      	mov	r3, r2
 8002e60:	011b      	lsls	r3, r3, #4
 8002e62:	1a9b      	subs	r3, r3, r2
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	440b      	add	r3, r1
 8002e68:	3326      	adds	r3, #38	@ 0x26
 8002e6a:	787a      	ldrb	r2, [r7, #1]
 8002e6c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002e6e:	7c3b      	ldrb	r3, [r7, #16]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d114      	bne.n	8002e9e <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002e74:	78fa      	ldrb	r2, [r7, #3]
 8002e76:	6879      	ldr	r1, [r7, #4]
 8002e78:	4613      	mov	r3, r2
 8002e7a:	011b      	lsls	r3, r3, #4
 8002e7c:	1a9b      	subs	r3, r3, r2
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	440b      	add	r3, r1
 8002e82:	332a      	adds	r3, #42	@ 0x2a
 8002e84:	2203      	movs	r2, #3
 8002e86:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002e88:	78fa      	ldrb	r2, [r7, #3]
 8002e8a:	6879      	ldr	r1, [r7, #4]
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	011b      	lsls	r3, r3, #4
 8002e90:	1a9b      	subs	r3, r3, r2
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	440b      	add	r3, r1
 8002e96:	3319      	adds	r3, #25
 8002e98:	7f3a      	ldrb	r2, [r7, #28]
 8002e9a:	701a      	strb	r2, [r3, #0]
 8002e9c:	e009      	b.n	8002eb2 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002e9e:	78fa      	ldrb	r2, [r7, #3]
 8002ea0:	6879      	ldr	r1, [r7, #4]
 8002ea2:	4613      	mov	r3, r2
 8002ea4:	011b      	lsls	r3, r3, #4
 8002ea6:	1a9b      	subs	r3, r3, r2
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	440b      	add	r3, r1
 8002eac:	332a      	adds	r3, #42	@ 0x2a
 8002eae:	2202      	movs	r2, #2
 8002eb0:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002eb2:	787b      	ldrb	r3, [r7, #1]
 8002eb4:	2b03      	cmp	r3, #3
 8002eb6:	f200 8102 	bhi.w	80030be <HAL_HCD_HC_SubmitRequest+0x292>
 8002eba:	a201      	add	r2, pc, #4	@ (adr r2, 8002ec0 <HAL_HCD_HC_SubmitRequest+0x94>)
 8002ebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ec0:	08002ed1 	.word	0x08002ed1
 8002ec4:	080030a9 	.word	0x080030a9
 8002ec8:	08002f95 	.word	0x08002f95
 8002ecc:	0800301f 	.word	0x0800301f
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8002ed0:	7c3b      	ldrb	r3, [r7, #16]
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	f040 80f5 	bne.w	80030c2 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8002ed8:	78bb      	ldrb	r3, [r7, #2]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d12d      	bne.n	8002f3a <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8002ede:	8b3b      	ldrh	r3, [r7, #24]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d109      	bne.n	8002ef8 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8002ee4:	78fa      	ldrb	r2, [r7, #3]
 8002ee6:	6879      	ldr	r1, [r7, #4]
 8002ee8:	4613      	mov	r3, r2
 8002eea:	011b      	lsls	r3, r3, #4
 8002eec:	1a9b      	subs	r3, r3, r2
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	440b      	add	r3, r1
 8002ef2:	333d      	adds	r3, #61	@ 0x3d
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8002ef8:	78fa      	ldrb	r2, [r7, #3]
 8002efa:	6879      	ldr	r1, [r7, #4]
 8002efc:	4613      	mov	r3, r2
 8002efe:	011b      	lsls	r3, r3, #4
 8002f00:	1a9b      	subs	r3, r3, r2
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	440b      	add	r3, r1
 8002f06:	333d      	adds	r3, #61	@ 0x3d
 8002f08:	781b      	ldrb	r3, [r3, #0]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d10a      	bne.n	8002f24 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002f0e:	78fa      	ldrb	r2, [r7, #3]
 8002f10:	6879      	ldr	r1, [r7, #4]
 8002f12:	4613      	mov	r3, r2
 8002f14:	011b      	lsls	r3, r3, #4
 8002f16:	1a9b      	subs	r3, r3, r2
 8002f18:	009b      	lsls	r3, r3, #2
 8002f1a:	440b      	add	r3, r1
 8002f1c:	332a      	adds	r3, #42	@ 0x2a
 8002f1e:	2200      	movs	r2, #0
 8002f20:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8002f22:	e0ce      	b.n	80030c2 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002f24:	78fa      	ldrb	r2, [r7, #3]
 8002f26:	6879      	ldr	r1, [r7, #4]
 8002f28:	4613      	mov	r3, r2
 8002f2a:	011b      	lsls	r3, r3, #4
 8002f2c:	1a9b      	subs	r3, r3, r2
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	440b      	add	r3, r1
 8002f32:	332a      	adds	r3, #42	@ 0x2a
 8002f34:	2202      	movs	r2, #2
 8002f36:	701a      	strb	r2, [r3, #0]
      break;
 8002f38:	e0c3      	b.n	80030c2 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8002f3a:	78fa      	ldrb	r2, [r7, #3]
 8002f3c:	6879      	ldr	r1, [r7, #4]
 8002f3e:	4613      	mov	r3, r2
 8002f40:	011b      	lsls	r3, r3, #4
 8002f42:	1a9b      	subs	r3, r3, r2
 8002f44:	009b      	lsls	r3, r3, #2
 8002f46:	440b      	add	r3, r1
 8002f48:	331a      	adds	r3, #26
 8002f4a:	781b      	ldrb	r3, [r3, #0]
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	f040 80b8 	bne.w	80030c2 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8002f52:	78fa      	ldrb	r2, [r7, #3]
 8002f54:	6879      	ldr	r1, [r7, #4]
 8002f56:	4613      	mov	r3, r2
 8002f58:	011b      	lsls	r3, r3, #4
 8002f5a:	1a9b      	subs	r3, r3, r2
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	440b      	add	r3, r1
 8002f60:	333c      	adds	r3, #60	@ 0x3c
 8002f62:	781b      	ldrb	r3, [r3, #0]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d10a      	bne.n	8002f7e <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002f68:	78fa      	ldrb	r2, [r7, #3]
 8002f6a:	6879      	ldr	r1, [r7, #4]
 8002f6c:	4613      	mov	r3, r2
 8002f6e:	011b      	lsls	r3, r3, #4
 8002f70:	1a9b      	subs	r3, r3, r2
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	440b      	add	r3, r1
 8002f76:	332a      	adds	r3, #42	@ 0x2a
 8002f78:	2200      	movs	r2, #0
 8002f7a:	701a      	strb	r2, [r3, #0]
      break;
 8002f7c:	e0a1      	b.n	80030c2 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002f7e:	78fa      	ldrb	r2, [r7, #3]
 8002f80:	6879      	ldr	r1, [r7, #4]
 8002f82:	4613      	mov	r3, r2
 8002f84:	011b      	lsls	r3, r3, #4
 8002f86:	1a9b      	subs	r3, r3, r2
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	440b      	add	r3, r1
 8002f8c:	332a      	adds	r3, #42	@ 0x2a
 8002f8e:	2202      	movs	r2, #2
 8002f90:	701a      	strb	r2, [r3, #0]
      break;
 8002f92:	e096      	b.n	80030c2 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002f94:	78bb      	ldrb	r3, [r7, #2]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d120      	bne.n	8002fdc <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002f9a:	78fa      	ldrb	r2, [r7, #3]
 8002f9c:	6879      	ldr	r1, [r7, #4]
 8002f9e:	4613      	mov	r3, r2
 8002fa0:	011b      	lsls	r3, r3, #4
 8002fa2:	1a9b      	subs	r3, r3, r2
 8002fa4:	009b      	lsls	r3, r3, #2
 8002fa6:	440b      	add	r3, r1
 8002fa8:	333d      	adds	r3, #61	@ 0x3d
 8002faa:	781b      	ldrb	r3, [r3, #0]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d10a      	bne.n	8002fc6 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002fb0:	78fa      	ldrb	r2, [r7, #3]
 8002fb2:	6879      	ldr	r1, [r7, #4]
 8002fb4:	4613      	mov	r3, r2
 8002fb6:	011b      	lsls	r3, r3, #4
 8002fb8:	1a9b      	subs	r3, r3, r2
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	440b      	add	r3, r1
 8002fbe:	332a      	adds	r3, #42	@ 0x2a
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002fc4:	e07e      	b.n	80030c4 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002fc6:	78fa      	ldrb	r2, [r7, #3]
 8002fc8:	6879      	ldr	r1, [r7, #4]
 8002fca:	4613      	mov	r3, r2
 8002fcc:	011b      	lsls	r3, r3, #4
 8002fce:	1a9b      	subs	r3, r3, r2
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	440b      	add	r3, r1
 8002fd4:	332a      	adds	r3, #42	@ 0x2a
 8002fd6:	2202      	movs	r2, #2
 8002fd8:	701a      	strb	r2, [r3, #0]
      break;
 8002fda:	e073      	b.n	80030c4 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002fdc:	78fa      	ldrb	r2, [r7, #3]
 8002fde:	6879      	ldr	r1, [r7, #4]
 8002fe0:	4613      	mov	r3, r2
 8002fe2:	011b      	lsls	r3, r3, #4
 8002fe4:	1a9b      	subs	r3, r3, r2
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	440b      	add	r3, r1
 8002fea:	333c      	adds	r3, #60	@ 0x3c
 8002fec:	781b      	ldrb	r3, [r3, #0]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d10a      	bne.n	8003008 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002ff2:	78fa      	ldrb	r2, [r7, #3]
 8002ff4:	6879      	ldr	r1, [r7, #4]
 8002ff6:	4613      	mov	r3, r2
 8002ff8:	011b      	lsls	r3, r3, #4
 8002ffa:	1a9b      	subs	r3, r3, r2
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	440b      	add	r3, r1
 8003000:	332a      	adds	r3, #42	@ 0x2a
 8003002:	2200      	movs	r2, #0
 8003004:	701a      	strb	r2, [r3, #0]
      break;
 8003006:	e05d      	b.n	80030c4 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003008:	78fa      	ldrb	r2, [r7, #3]
 800300a:	6879      	ldr	r1, [r7, #4]
 800300c:	4613      	mov	r3, r2
 800300e:	011b      	lsls	r3, r3, #4
 8003010:	1a9b      	subs	r3, r3, r2
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	440b      	add	r3, r1
 8003016:	332a      	adds	r3, #42	@ 0x2a
 8003018:	2202      	movs	r2, #2
 800301a:	701a      	strb	r2, [r3, #0]
      break;
 800301c:	e052      	b.n	80030c4 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800301e:	78bb      	ldrb	r3, [r7, #2]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d120      	bne.n	8003066 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003024:	78fa      	ldrb	r2, [r7, #3]
 8003026:	6879      	ldr	r1, [r7, #4]
 8003028:	4613      	mov	r3, r2
 800302a:	011b      	lsls	r3, r3, #4
 800302c:	1a9b      	subs	r3, r3, r2
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	440b      	add	r3, r1
 8003032:	333d      	adds	r3, #61	@ 0x3d
 8003034:	781b      	ldrb	r3, [r3, #0]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d10a      	bne.n	8003050 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800303a:	78fa      	ldrb	r2, [r7, #3]
 800303c:	6879      	ldr	r1, [r7, #4]
 800303e:	4613      	mov	r3, r2
 8003040:	011b      	lsls	r3, r3, #4
 8003042:	1a9b      	subs	r3, r3, r2
 8003044:	009b      	lsls	r3, r3, #2
 8003046:	440b      	add	r3, r1
 8003048:	332a      	adds	r3, #42	@ 0x2a
 800304a:	2200      	movs	r2, #0
 800304c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800304e:	e039      	b.n	80030c4 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003050:	78fa      	ldrb	r2, [r7, #3]
 8003052:	6879      	ldr	r1, [r7, #4]
 8003054:	4613      	mov	r3, r2
 8003056:	011b      	lsls	r3, r3, #4
 8003058:	1a9b      	subs	r3, r3, r2
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	440b      	add	r3, r1
 800305e:	332a      	adds	r3, #42	@ 0x2a
 8003060:	2202      	movs	r2, #2
 8003062:	701a      	strb	r2, [r3, #0]
      break;
 8003064:	e02e      	b.n	80030c4 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003066:	78fa      	ldrb	r2, [r7, #3]
 8003068:	6879      	ldr	r1, [r7, #4]
 800306a:	4613      	mov	r3, r2
 800306c:	011b      	lsls	r3, r3, #4
 800306e:	1a9b      	subs	r3, r3, r2
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	440b      	add	r3, r1
 8003074:	333c      	adds	r3, #60	@ 0x3c
 8003076:	781b      	ldrb	r3, [r3, #0]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d10a      	bne.n	8003092 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800307c:	78fa      	ldrb	r2, [r7, #3]
 800307e:	6879      	ldr	r1, [r7, #4]
 8003080:	4613      	mov	r3, r2
 8003082:	011b      	lsls	r3, r3, #4
 8003084:	1a9b      	subs	r3, r3, r2
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	440b      	add	r3, r1
 800308a:	332a      	adds	r3, #42	@ 0x2a
 800308c:	2200      	movs	r2, #0
 800308e:	701a      	strb	r2, [r3, #0]
      break;
 8003090:	e018      	b.n	80030c4 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003092:	78fa      	ldrb	r2, [r7, #3]
 8003094:	6879      	ldr	r1, [r7, #4]
 8003096:	4613      	mov	r3, r2
 8003098:	011b      	lsls	r3, r3, #4
 800309a:	1a9b      	subs	r3, r3, r2
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	440b      	add	r3, r1
 80030a0:	332a      	adds	r3, #42	@ 0x2a
 80030a2:	2202      	movs	r2, #2
 80030a4:	701a      	strb	r2, [r3, #0]
      break;
 80030a6:	e00d      	b.n	80030c4 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80030a8:	78fa      	ldrb	r2, [r7, #3]
 80030aa:	6879      	ldr	r1, [r7, #4]
 80030ac:	4613      	mov	r3, r2
 80030ae:	011b      	lsls	r3, r3, #4
 80030b0:	1a9b      	subs	r3, r3, r2
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	440b      	add	r3, r1
 80030b6:	332a      	adds	r3, #42	@ 0x2a
 80030b8:	2200      	movs	r2, #0
 80030ba:	701a      	strb	r2, [r3, #0]
      break;
 80030bc:	e002      	b.n	80030c4 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 80030be:	bf00      	nop
 80030c0:	e000      	b.n	80030c4 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 80030c2:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80030c4:	78fa      	ldrb	r2, [r7, #3]
 80030c6:	6879      	ldr	r1, [r7, #4]
 80030c8:	4613      	mov	r3, r2
 80030ca:	011b      	lsls	r3, r3, #4
 80030cc:	1a9b      	subs	r3, r3, r2
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	440b      	add	r3, r1
 80030d2:	332c      	adds	r3, #44	@ 0x2c
 80030d4:	697a      	ldr	r2, [r7, #20]
 80030d6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80030d8:	78fa      	ldrb	r2, [r7, #3]
 80030da:	8b39      	ldrh	r1, [r7, #24]
 80030dc:	6878      	ldr	r0, [r7, #4]
 80030de:	4613      	mov	r3, r2
 80030e0:	011b      	lsls	r3, r3, #4
 80030e2:	1a9b      	subs	r3, r3, r2
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	4403      	add	r3, r0
 80030e8:	3334      	adds	r3, #52	@ 0x34
 80030ea:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80030ec:	78fa      	ldrb	r2, [r7, #3]
 80030ee:	6879      	ldr	r1, [r7, #4]
 80030f0:	4613      	mov	r3, r2
 80030f2:	011b      	lsls	r3, r3, #4
 80030f4:	1a9b      	subs	r3, r3, r2
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	440b      	add	r3, r1
 80030fa:	334c      	adds	r3, #76	@ 0x4c
 80030fc:	2200      	movs	r2, #0
 80030fe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003100:	78fa      	ldrb	r2, [r7, #3]
 8003102:	6879      	ldr	r1, [r7, #4]
 8003104:	4613      	mov	r3, r2
 8003106:	011b      	lsls	r3, r3, #4
 8003108:	1a9b      	subs	r3, r3, r2
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	440b      	add	r3, r1
 800310e:	3338      	adds	r3, #56	@ 0x38
 8003110:	2200      	movs	r2, #0
 8003112:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003114:	78fa      	ldrb	r2, [r7, #3]
 8003116:	6879      	ldr	r1, [r7, #4]
 8003118:	4613      	mov	r3, r2
 800311a:	011b      	lsls	r3, r3, #4
 800311c:	1a9b      	subs	r3, r3, r2
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	440b      	add	r3, r1
 8003122:	3315      	adds	r3, #21
 8003124:	78fa      	ldrb	r2, [r7, #3]
 8003126:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003128:	78fa      	ldrb	r2, [r7, #3]
 800312a:	6879      	ldr	r1, [r7, #4]
 800312c:	4613      	mov	r3, r2
 800312e:	011b      	lsls	r3, r3, #4
 8003130:	1a9b      	subs	r3, r3, r2
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	440b      	add	r3, r1
 8003136:	334d      	adds	r3, #77	@ 0x4d
 8003138:	2200      	movs	r2, #0
 800313a:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6818      	ldr	r0, [r3, #0]
 8003140:	78fa      	ldrb	r2, [r7, #3]
 8003142:	4613      	mov	r3, r2
 8003144:	011b      	lsls	r3, r3, #4
 8003146:	1a9b      	subs	r3, r3, r2
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	3310      	adds	r3, #16
 800314c:	687a      	ldr	r2, [r7, #4]
 800314e:	4413      	add	r3, r2
 8003150:	1d19      	adds	r1, r3, #4
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	799b      	ldrb	r3, [r3, #6]
 8003156:	461a      	mov	r2, r3
 8003158:	f006 fc0e 	bl	8009978 <USB_HC_StartXfer>
 800315c:	4603      	mov	r3, r0
}
 800315e:	4618      	mov	r0, r3
 8003160:	3708      	adds	r7, #8
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}
 8003166:	bf00      	nop

08003168 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b086      	sub	sp, #24
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4618      	mov	r0, r3
 8003180:	f006 f902 	bl	8009388 <USB_GetMode>
 8003184:	4603      	mov	r3, r0
 8003186:	2b01      	cmp	r3, #1
 8003188:	f040 80fb 	bne.w	8003382 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4618      	mov	r0, r3
 8003192:	f006 f8c5 	bl	8009320 <USB_ReadInterrupts>
 8003196:	4603      	mov	r3, r0
 8003198:	2b00      	cmp	r3, #0
 800319a:	f000 80f1 	beq.w	8003380 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4618      	mov	r0, r3
 80031a4:	f006 f8bc 	bl	8009320 <USB_ReadInterrupts>
 80031a8:	4603      	mov	r3, r0
 80031aa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80031ae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80031b2:	d104      	bne.n	80031be <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80031bc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4618      	mov	r0, r3
 80031c4:	f006 f8ac 	bl	8009320 <USB_ReadInterrupts>
 80031c8:	4603      	mov	r3, r0
 80031ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80031ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80031d2:	d104      	bne.n	80031de <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80031dc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4618      	mov	r0, r3
 80031e4:	f006 f89c 	bl	8009320 <USB_ReadInterrupts>
 80031e8:	4603      	mov	r3, r0
 80031ea:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80031ee:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80031f2:	d104      	bne.n	80031fe <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80031fc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4618      	mov	r0, r3
 8003204:	f006 f88c 	bl	8009320 <USB_ReadInterrupts>
 8003208:	4603      	mov	r3, r0
 800320a:	f003 0302 	and.w	r3, r3, #2
 800320e:	2b02      	cmp	r3, #2
 8003210:	d103      	bne.n	800321a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	2202      	movs	r2, #2
 8003218:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4618      	mov	r0, r3
 8003220:	f006 f87e 	bl	8009320 <USB_ReadInterrupts>
 8003224:	4603      	mov	r3, r0
 8003226:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800322a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800322e:	d120      	bne.n	8003272 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8003238:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 0301 	and.w	r3, r3, #1
 8003246:	2b00      	cmp	r3, #0
 8003248:	d113      	bne.n	8003272 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800324a:	2110      	movs	r1, #16
 800324c:	6938      	ldr	r0, [r7, #16]
 800324e:	f005 ff71 	bl	8009134 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8003252:	6938      	ldr	r0, [r7, #16]
 8003254:	f005 ffa0 	bl	8009198 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	7a5b      	ldrb	r3, [r3, #9]
 800325c:	2b02      	cmp	r3, #2
 800325e:	d105      	bne.n	800326c <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	2101      	movs	r1, #1
 8003266:	4618      	mov	r0, r3
 8003268:	f006 f992 	bl	8009590 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800326c:	6878      	ldr	r0, [r7, #4]
 800326e:	f009 f959 	bl	800c524 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4618      	mov	r0, r3
 8003278:	f006 f852 	bl	8009320 <USB_ReadInterrupts>
 800327c:	4603      	mov	r3, r0
 800327e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003282:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003286:	d102      	bne.n	800328e <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8003288:	6878      	ldr	r0, [r7, #4]
 800328a:	f001 fd4d 	bl	8004d28 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4618      	mov	r0, r3
 8003294:	f006 f844 	bl	8009320 <USB_ReadInterrupts>
 8003298:	4603      	mov	r3, r0
 800329a:	f003 0308 	and.w	r3, r3, #8
 800329e:	2b08      	cmp	r3, #8
 80032a0:	d106      	bne.n	80032b0 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f009 f922 	bl	800c4ec <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	2208      	movs	r2, #8
 80032ae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4618      	mov	r0, r3
 80032b6:	f006 f833 	bl	8009320 <USB_ReadInterrupts>
 80032ba:	4603      	mov	r3, r0
 80032bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032c0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80032c4:	d139      	bne.n	800333a <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4618      	mov	r0, r3
 80032cc:	f006 fdce 	bl	8009e6c <USB_HC_ReadInterrupt>
 80032d0:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80032d2:	2300      	movs	r3, #0
 80032d4:	617b      	str	r3, [r7, #20]
 80032d6:	e025      	b.n	8003324 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	f003 030f 	and.w	r3, r3, #15
 80032de:	68ba      	ldr	r2, [r7, #8]
 80032e0:	fa22 f303 	lsr.w	r3, r2, r3
 80032e4:	f003 0301 	and.w	r3, r3, #1
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d018      	beq.n	800331e <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	015a      	lsls	r2, r3, #5
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	4413      	add	r3, r2
 80032f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80032fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003302:	d106      	bne.n	8003312 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	b2db      	uxtb	r3, r3
 8003308:	4619      	mov	r1, r3
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f000 f905 	bl	800351a <HCD_HC_IN_IRQHandler>
 8003310:	e005      	b.n	800331e <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	b2db      	uxtb	r3, r3
 8003316:	4619      	mov	r1, r3
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	f000 ff67 	bl	80041ec <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	3301      	adds	r3, #1
 8003322:	617b      	str	r3, [r7, #20]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	795b      	ldrb	r3, [r3, #5]
 8003328:	461a      	mov	r2, r3
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	4293      	cmp	r3, r2
 800332e:	d3d3      	bcc.n	80032d8 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003338:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4618      	mov	r0, r3
 8003340:	f005 ffee 	bl	8009320 <USB_ReadInterrupts>
 8003344:	4603      	mov	r3, r0
 8003346:	f003 0310 	and.w	r3, r3, #16
 800334a:	2b10      	cmp	r3, #16
 800334c:	d101      	bne.n	8003352 <HAL_HCD_IRQHandler+0x1ea>
 800334e:	2301      	movs	r3, #1
 8003350:	e000      	b.n	8003354 <HAL_HCD_IRQHandler+0x1ec>
 8003352:	2300      	movs	r3, #0
 8003354:	2b00      	cmp	r3, #0
 8003356:	d014      	beq.n	8003382 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	699a      	ldr	r2, [r3, #24]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f022 0210 	bic.w	r2, r2, #16
 8003366:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	f001 fbfe 	bl	8004b6a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	699a      	ldr	r2, [r3, #24]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f042 0210 	orr.w	r2, r2, #16
 800337c:	619a      	str	r2, [r3, #24]
 800337e:	e000      	b.n	8003382 <HAL_HCD_IRQHandler+0x21a>
      return;
 8003380:	bf00      	nop
    }
  }
}
 8003382:	3718      	adds	r7, #24
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}

08003388 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b082      	sub	sp, #8
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003396:	2b01      	cmp	r3, #1
 8003398:	d101      	bne.n	800339e <HAL_HCD_Start+0x16>
 800339a:	2302      	movs	r3, #2
 800339c:	e013      	b.n	80033c6 <HAL_HCD_Start+0x3e>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2201      	movs	r2, #1
 80033a2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	2101      	movs	r1, #1
 80033ac:	4618      	mov	r0, r3
 80033ae:	f006 f956 	bl	800965e <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4618      	mov	r0, r3
 80033b8:	f005 fe4e 	bl	8009058 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2200      	movs	r2, #0
 80033c0:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80033c4:	2300      	movs	r3, #0
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3708      	adds	r7, #8
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}

080033ce <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80033ce:	b580      	push	{r7, lr}
 80033d0:	b082      	sub	sp, #8
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d101      	bne.n	80033e4 <HAL_HCD_Stop+0x16>
 80033e0:	2302      	movs	r3, #2
 80033e2:	e00d      	b.n	8003400 <HAL_HCD_Stop+0x32>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2201      	movs	r2, #1
 80033e8:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4618      	mov	r0, r3
 80033f2:	f006 fea9 	bl	800a148 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2200      	movs	r2, #0
 80033fa:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80033fe:	2300      	movs	r3, #0
}
 8003400:	4618      	mov	r0, r3
 8003402:	3708      	adds	r7, #8
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}

08003408 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b082      	sub	sp, #8
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4618      	mov	r0, r3
 8003416:	f006 f8f8 	bl	800960a <USB_ResetPort>
 800341a:	4603      	mov	r3, r0
}
 800341c:	4618      	mov	r0, r3
 800341e:	3708      	adds	r7, #8
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}

08003424 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8003424:	b480      	push	{r7}
 8003426:	b083      	sub	sp, #12
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
 800342c:	460b      	mov	r3, r1
 800342e:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003430:	78fa      	ldrb	r2, [r7, #3]
 8003432:	6879      	ldr	r1, [r7, #4]
 8003434:	4613      	mov	r3, r2
 8003436:	011b      	lsls	r3, r3, #4
 8003438:	1a9b      	subs	r3, r3, r2
 800343a:	009b      	lsls	r3, r3, #2
 800343c:	440b      	add	r3, r1
 800343e:	334c      	adds	r3, #76	@ 0x4c
 8003440:	781b      	ldrb	r3, [r3, #0]
}
 8003442:	4618      	mov	r0, r3
 8003444:	370c      	adds	r7, #12
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr

0800344e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 800344e:	b480      	push	{r7}
 8003450:	b083      	sub	sp, #12
 8003452:	af00      	add	r7, sp, #0
 8003454:	6078      	str	r0, [r7, #4]
 8003456:	460b      	mov	r3, r1
 8003458:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800345a:	78fa      	ldrb	r2, [r7, #3]
 800345c:	6879      	ldr	r1, [r7, #4]
 800345e:	4613      	mov	r3, r2
 8003460:	011b      	lsls	r3, r3, #4
 8003462:	1a9b      	subs	r3, r3, r2
 8003464:	009b      	lsls	r3, r3, #2
 8003466:	440b      	add	r3, r1
 8003468:	3338      	adds	r3, #56	@ 0x38
 800346a:	681b      	ldr	r3, [r3, #0]
}
 800346c:	4618      	mov	r0, r3
 800346e:	370c      	adds	r7, #12
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr

08003478 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b082      	sub	sp, #8
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4618      	mov	r0, r3
 8003486:	f006 f93a 	bl	80096fe <USB_GetCurrentFrame>
 800348a:	4603      	mov	r3, r0
}
 800348c:	4618      	mov	r0, r3
 800348e:	3708      	adds	r7, #8
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}

08003494 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b082      	sub	sp, #8
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4618      	mov	r0, r3
 80034a2:	f006 f915 	bl	80096d0 <USB_GetHostSpeed>
 80034a6:	4603      	mov	r3, r0
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	3708      	adds	r7, #8
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}

080034b0 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b083      	sub	sp, #12
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	460b      	mov	r3, r1
 80034ba:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 80034bc:	78fa      	ldrb	r2, [r7, #3]
 80034be:	6879      	ldr	r1, [r7, #4]
 80034c0:	4613      	mov	r3, r2
 80034c2:	011b      	lsls	r3, r3, #4
 80034c4:	1a9b      	subs	r3, r3, r2
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	440b      	add	r3, r1
 80034ca:	331a      	adds	r3, #26
 80034cc:	2200      	movs	r2, #0
 80034ce:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 80034d0:	78fa      	ldrb	r2, [r7, #3]
 80034d2:	6879      	ldr	r1, [r7, #4]
 80034d4:	4613      	mov	r3, r2
 80034d6:	011b      	lsls	r3, r3, #4
 80034d8:	1a9b      	subs	r3, r3, r2
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	440b      	add	r3, r1
 80034de:	331b      	adds	r3, #27
 80034e0:	2200      	movs	r2, #0
 80034e2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 80034e4:	78fa      	ldrb	r2, [r7, #3]
 80034e6:	6879      	ldr	r1, [r7, #4]
 80034e8:	4613      	mov	r3, r2
 80034ea:	011b      	lsls	r3, r3, #4
 80034ec:	1a9b      	subs	r3, r3, r2
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	440b      	add	r3, r1
 80034f2:	3325      	adds	r3, #37	@ 0x25
 80034f4:	2200      	movs	r2, #0
 80034f6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 80034f8:	78fa      	ldrb	r2, [r7, #3]
 80034fa:	6879      	ldr	r1, [r7, #4]
 80034fc:	4613      	mov	r3, r2
 80034fe:	011b      	lsls	r3, r3, #4
 8003500:	1a9b      	subs	r3, r3, r2
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	440b      	add	r3, r1
 8003506:	3324      	adds	r3, #36	@ 0x24
 8003508:	2200      	movs	r2, #0
 800350a:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 800350c:	2300      	movs	r3, #0
}
 800350e:	4618      	mov	r0, r3
 8003510:	370c      	adds	r7, #12
 8003512:	46bd      	mov	sp, r7
 8003514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003518:	4770      	bx	lr

0800351a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800351a:	b580      	push	{r7, lr}
 800351c:	b086      	sub	sp, #24
 800351e:	af00      	add	r7, sp, #0
 8003520:	6078      	str	r0, [r7, #4]
 8003522:	460b      	mov	r3, r1
 8003524:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	78fa      	ldrb	r2, [r7, #3]
 8003536:	4611      	mov	r1, r2
 8003538:	4618      	mov	r0, r3
 800353a:	f005 ff04 	bl	8009346 <USB_ReadChInterrupts>
 800353e:	4603      	mov	r3, r0
 8003540:	f003 0304 	and.w	r3, r3, #4
 8003544:	2b04      	cmp	r3, #4
 8003546:	d11a      	bne.n	800357e <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003548:	78fb      	ldrb	r3, [r7, #3]
 800354a:	015a      	lsls	r2, r3, #5
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	4413      	add	r3, r2
 8003550:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003554:	461a      	mov	r2, r3
 8003556:	2304      	movs	r3, #4
 8003558:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800355a:	78fa      	ldrb	r2, [r7, #3]
 800355c:	6879      	ldr	r1, [r7, #4]
 800355e:	4613      	mov	r3, r2
 8003560:	011b      	lsls	r3, r3, #4
 8003562:	1a9b      	subs	r3, r3, r2
 8003564:	009b      	lsls	r3, r3, #2
 8003566:	440b      	add	r3, r1
 8003568:	334d      	adds	r3, #77	@ 0x4d
 800356a:	2207      	movs	r2, #7
 800356c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	78fa      	ldrb	r2, [r7, #3]
 8003574:	4611      	mov	r1, r2
 8003576:	4618      	mov	r0, r3
 8003578:	f006 fc89 	bl	8009e8e <USB_HC_Halt>
 800357c:	e09e      	b.n	80036bc <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	78fa      	ldrb	r2, [r7, #3]
 8003584:	4611      	mov	r1, r2
 8003586:	4618      	mov	r0, r3
 8003588:	f005 fedd 	bl	8009346 <USB_ReadChInterrupts>
 800358c:	4603      	mov	r3, r0
 800358e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003592:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003596:	d11b      	bne.n	80035d0 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8003598:	78fb      	ldrb	r3, [r7, #3]
 800359a:	015a      	lsls	r2, r3, #5
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	4413      	add	r3, r2
 80035a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035a4:	461a      	mov	r2, r3
 80035a6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80035aa:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 80035ac:	78fa      	ldrb	r2, [r7, #3]
 80035ae:	6879      	ldr	r1, [r7, #4]
 80035b0:	4613      	mov	r3, r2
 80035b2:	011b      	lsls	r3, r3, #4
 80035b4:	1a9b      	subs	r3, r3, r2
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	440b      	add	r3, r1
 80035ba:	334d      	adds	r3, #77	@ 0x4d
 80035bc:	2208      	movs	r2, #8
 80035be:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	78fa      	ldrb	r2, [r7, #3]
 80035c6:	4611      	mov	r1, r2
 80035c8:	4618      	mov	r0, r3
 80035ca:	f006 fc60 	bl	8009e8e <USB_HC_Halt>
 80035ce:	e075      	b.n	80036bc <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	78fa      	ldrb	r2, [r7, #3]
 80035d6:	4611      	mov	r1, r2
 80035d8:	4618      	mov	r0, r3
 80035da:	f005 feb4 	bl	8009346 <USB_ReadChInterrupts>
 80035de:	4603      	mov	r3, r0
 80035e0:	f003 0308 	and.w	r3, r3, #8
 80035e4:	2b08      	cmp	r3, #8
 80035e6:	d11a      	bne.n	800361e <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80035e8:	78fb      	ldrb	r3, [r7, #3]
 80035ea:	015a      	lsls	r2, r3, #5
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	4413      	add	r3, r2
 80035f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035f4:	461a      	mov	r2, r3
 80035f6:	2308      	movs	r3, #8
 80035f8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80035fa:	78fa      	ldrb	r2, [r7, #3]
 80035fc:	6879      	ldr	r1, [r7, #4]
 80035fe:	4613      	mov	r3, r2
 8003600:	011b      	lsls	r3, r3, #4
 8003602:	1a9b      	subs	r3, r3, r2
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	440b      	add	r3, r1
 8003608:	334d      	adds	r3, #77	@ 0x4d
 800360a:	2206      	movs	r2, #6
 800360c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	78fa      	ldrb	r2, [r7, #3]
 8003614:	4611      	mov	r1, r2
 8003616:	4618      	mov	r0, r3
 8003618:	f006 fc39 	bl	8009e8e <USB_HC_Halt>
 800361c:	e04e      	b.n	80036bc <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	78fa      	ldrb	r2, [r7, #3]
 8003624:	4611      	mov	r1, r2
 8003626:	4618      	mov	r0, r3
 8003628:	f005 fe8d 	bl	8009346 <USB_ReadChInterrupts>
 800362c:	4603      	mov	r3, r0
 800362e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003632:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003636:	d11b      	bne.n	8003670 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003638:	78fb      	ldrb	r3, [r7, #3]
 800363a:	015a      	lsls	r2, r3, #5
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	4413      	add	r3, r2
 8003640:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003644:	461a      	mov	r2, r3
 8003646:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800364a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800364c:	78fa      	ldrb	r2, [r7, #3]
 800364e:	6879      	ldr	r1, [r7, #4]
 8003650:	4613      	mov	r3, r2
 8003652:	011b      	lsls	r3, r3, #4
 8003654:	1a9b      	subs	r3, r3, r2
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	440b      	add	r3, r1
 800365a:	334d      	adds	r3, #77	@ 0x4d
 800365c:	2209      	movs	r2, #9
 800365e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	78fa      	ldrb	r2, [r7, #3]
 8003666:	4611      	mov	r1, r2
 8003668:	4618      	mov	r0, r3
 800366a:	f006 fc10 	bl	8009e8e <USB_HC_Halt>
 800366e:	e025      	b.n	80036bc <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	78fa      	ldrb	r2, [r7, #3]
 8003676:	4611      	mov	r1, r2
 8003678:	4618      	mov	r0, r3
 800367a:	f005 fe64 	bl	8009346 <USB_ReadChInterrupts>
 800367e:	4603      	mov	r3, r0
 8003680:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003684:	2b80      	cmp	r3, #128	@ 0x80
 8003686:	d119      	bne.n	80036bc <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003688:	78fb      	ldrb	r3, [r7, #3]
 800368a:	015a      	lsls	r2, r3, #5
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	4413      	add	r3, r2
 8003690:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003694:	461a      	mov	r2, r3
 8003696:	2380      	movs	r3, #128	@ 0x80
 8003698:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800369a:	78fa      	ldrb	r2, [r7, #3]
 800369c:	6879      	ldr	r1, [r7, #4]
 800369e:	4613      	mov	r3, r2
 80036a0:	011b      	lsls	r3, r3, #4
 80036a2:	1a9b      	subs	r3, r3, r2
 80036a4:	009b      	lsls	r3, r3, #2
 80036a6:	440b      	add	r3, r1
 80036a8:	334d      	adds	r3, #77	@ 0x4d
 80036aa:	2207      	movs	r2, #7
 80036ac:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	78fa      	ldrb	r2, [r7, #3]
 80036b4:	4611      	mov	r1, r2
 80036b6:	4618      	mov	r0, r3
 80036b8:	f006 fbe9 	bl	8009e8e <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	78fa      	ldrb	r2, [r7, #3]
 80036c2:	4611      	mov	r1, r2
 80036c4:	4618      	mov	r0, r3
 80036c6:	f005 fe3e 	bl	8009346 <USB_ReadChInterrupts>
 80036ca:	4603      	mov	r3, r0
 80036cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80036d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80036d4:	d112      	bne.n	80036fc <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	78fa      	ldrb	r2, [r7, #3]
 80036dc:	4611      	mov	r1, r2
 80036de:	4618      	mov	r0, r3
 80036e0:	f006 fbd5 	bl	8009e8e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80036e4:	78fb      	ldrb	r3, [r7, #3]
 80036e6:	015a      	lsls	r2, r3, #5
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	4413      	add	r3, r2
 80036ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036f0:	461a      	mov	r2, r3
 80036f2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80036f6:	6093      	str	r3, [r2, #8]
 80036f8:	f000 bd75 	b.w	80041e6 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	78fa      	ldrb	r2, [r7, #3]
 8003702:	4611      	mov	r1, r2
 8003704:	4618      	mov	r0, r3
 8003706:	f005 fe1e 	bl	8009346 <USB_ReadChInterrupts>
 800370a:	4603      	mov	r3, r0
 800370c:	f003 0301 	and.w	r3, r3, #1
 8003710:	2b01      	cmp	r3, #1
 8003712:	f040 8128 	bne.w	8003966 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003716:	78fb      	ldrb	r3, [r7, #3]
 8003718:	015a      	lsls	r2, r3, #5
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	4413      	add	r3, r2
 800371e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003722:	461a      	mov	r2, r3
 8003724:	2320      	movs	r3, #32
 8003726:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003728:	78fa      	ldrb	r2, [r7, #3]
 800372a:	6879      	ldr	r1, [r7, #4]
 800372c:	4613      	mov	r3, r2
 800372e:	011b      	lsls	r3, r3, #4
 8003730:	1a9b      	subs	r3, r3, r2
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	440b      	add	r3, r1
 8003736:	331b      	adds	r3, #27
 8003738:	781b      	ldrb	r3, [r3, #0]
 800373a:	2b01      	cmp	r3, #1
 800373c:	d119      	bne.n	8003772 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800373e:	78fa      	ldrb	r2, [r7, #3]
 8003740:	6879      	ldr	r1, [r7, #4]
 8003742:	4613      	mov	r3, r2
 8003744:	011b      	lsls	r3, r3, #4
 8003746:	1a9b      	subs	r3, r3, r2
 8003748:	009b      	lsls	r3, r3, #2
 800374a:	440b      	add	r3, r1
 800374c:	331b      	adds	r3, #27
 800374e:	2200      	movs	r2, #0
 8003750:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003752:	78fb      	ldrb	r3, [r7, #3]
 8003754:	015a      	lsls	r2, r3, #5
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	4413      	add	r3, r2
 800375a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	78fa      	ldrb	r2, [r7, #3]
 8003762:	0151      	lsls	r1, r2, #5
 8003764:	693a      	ldr	r2, [r7, #16]
 8003766:	440a      	add	r2, r1
 8003768:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800376c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003770:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	799b      	ldrb	r3, [r3, #6]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d01b      	beq.n	80037b2 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800377a:	78fa      	ldrb	r2, [r7, #3]
 800377c:	6879      	ldr	r1, [r7, #4]
 800377e:	4613      	mov	r3, r2
 8003780:	011b      	lsls	r3, r3, #4
 8003782:	1a9b      	subs	r3, r3, r2
 8003784:	009b      	lsls	r3, r3, #2
 8003786:	440b      	add	r3, r1
 8003788:	3330      	adds	r3, #48	@ 0x30
 800378a:	6819      	ldr	r1, [r3, #0]
 800378c:	78fb      	ldrb	r3, [r7, #3]
 800378e:	015a      	lsls	r2, r3, #5
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	4413      	add	r3, r2
 8003794:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003798:	691b      	ldr	r3, [r3, #16]
 800379a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800379e:	78fa      	ldrb	r2, [r7, #3]
 80037a0:	1ac9      	subs	r1, r1, r3
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	4613      	mov	r3, r2
 80037a6:	011b      	lsls	r3, r3, #4
 80037a8:	1a9b      	subs	r3, r3, r2
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	4403      	add	r3, r0
 80037ae:	3338      	adds	r3, #56	@ 0x38
 80037b0:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 80037b2:	78fa      	ldrb	r2, [r7, #3]
 80037b4:	6879      	ldr	r1, [r7, #4]
 80037b6:	4613      	mov	r3, r2
 80037b8:	011b      	lsls	r3, r3, #4
 80037ba:	1a9b      	subs	r3, r3, r2
 80037bc:	009b      	lsls	r3, r3, #2
 80037be:	440b      	add	r3, r1
 80037c0:	334d      	adds	r3, #77	@ 0x4d
 80037c2:	2201      	movs	r2, #1
 80037c4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 80037c6:	78fa      	ldrb	r2, [r7, #3]
 80037c8:	6879      	ldr	r1, [r7, #4]
 80037ca:	4613      	mov	r3, r2
 80037cc:	011b      	lsls	r3, r3, #4
 80037ce:	1a9b      	subs	r3, r3, r2
 80037d0:	009b      	lsls	r3, r3, #2
 80037d2:	440b      	add	r3, r1
 80037d4:	3344      	adds	r3, #68	@ 0x44
 80037d6:	2200      	movs	r2, #0
 80037d8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80037da:	78fb      	ldrb	r3, [r7, #3]
 80037dc:	015a      	lsls	r2, r3, #5
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	4413      	add	r3, r2
 80037e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80037e6:	461a      	mov	r2, r3
 80037e8:	2301      	movs	r3, #1
 80037ea:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80037ec:	78fa      	ldrb	r2, [r7, #3]
 80037ee:	6879      	ldr	r1, [r7, #4]
 80037f0:	4613      	mov	r3, r2
 80037f2:	011b      	lsls	r3, r3, #4
 80037f4:	1a9b      	subs	r3, r3, r2
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	440b      	add	r3, r1
 80037fa:	3326      	adds	r3, #38	@ 0x26
 80037fc:	781b      	ldrb	r3, [r3, #0]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d00a      	beq.n	8003818 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003802:	78fa      	ldrb	r2, [r7, #3]
 8003804:	6879      	ldr	r1, [r7, #4]
 8003806:	4613      	mov	r3, r2
 8003808:	011b      	lsls	r3, r3, #4
 800380a:	1a9b      	subs	r3, r3, r2
 800380c:	009b      	lsls	r3, r3, #2
 800380e:	440b      	add	r3, r1
 8003810:	3326      	adds	r3, #38	@ 0x26
 8003812:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003814:	2b02      	cmp	r3, #2
 8003816:	d110      	bne.n	800383a <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	78fa      	ldrb	r2, [r7, #3]
 800381e:	4611      	mov	r1, r2
 8003820:	4618      	mov	r0, r3
 8003822:	f006 fb34 	bl	8009e8e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003826:	78fb      	ldrb	r3, [r7, #3]
 8003828:	015a      	lsls	r2, r3, #5
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	4413      	add	r3, r2
 800382e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003832:	461a      	mov	r2, r3
 8003834:	2310      	movs	r3, #16
 8003836:	6093      	str	r3, [r2, #8]
 8003838:	e03d      	b.n	80038b6 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800383a:	78fa      	ldrb	r2, [r7, #3]
 800383c:	6879      	ldr	r1, [r7, #4]
 800383e:	4613      	mov	r3, r2
 8003840:	011b      	lsls	r3, r3, #4
 8003842:	1a9b      	subs	r3, r3, r2
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	440b      	add	r3, r1
 8003848:	3326      	adds	r3, #38	@ 0x26
 800384a:	781b      	ldrb	r3, [r3, #0]
 800384c:	2b03      	cmp	r3, #3
 800384e:	d00a      	beq.n	8003866 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8003850:	78fa      	ldrb	r2, [r7, #3]
 8003852:	6879      	ldr	r1, [r7, #4]
 8003854:	4613      	mov	r3, r2
 8003856:	011b      	lsls	r3, r3, #4
 8003858:	1a9b      	subs	r3, r3, r2
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	440b      	add	r3, r1
 800385e:	3326      	adds	r3, #38	@ 0x26
 8003860:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8003862:	2b01      	cmp	r3, #1
 8003864:	d127      	bne.n	80038b6 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003866:	78fb      	ldrb	r3, [r7, #3]
 8003868:	015a      	lsls	r2, r3, #5
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	4413      	add	r3, r2
 800386e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	78fa      	ldrb	r2, [r7, #3]
 8003876:	0151      	lsls	r1, r2, #5
 8003878:	693a      	ldr	r2, [r7, #16]
 800387a:	440a      	add	r2, r1
 800387c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003880:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003884:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003886:	78fa      	ldrb	r2, [r7, #3]
 8003888:	6879      	ldr	r1, [r7, #4]
 800388a:	4613      	mov	r3, r2
 800388c:	011b      	lsls	r3, r3, #4
 800388e:	1a9b      	subs	r3, r3, r2
 8003890:	009b      	lsls	r3, r3, #2
 8003892:	440b      	add	r3, r1
 8003894:	334c      	adds	r3, #76	@ 0x4c
 8003896:	2201      	movs	r2, #1
 8003898:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800389a:	78fa      	ldrb	r2, [r7, #3]
 800389c:	6879      	ldr	r1, [r7, #4]
 800389e:	4613      	mov	r3, r2
 80038a0:	011b      	lsls	r3, r3, #4
 80038a2:	1a9b      	subs	r3, r3, r2
 80038a4:	009b      	lsls	r3, r3, #2
 80038a6:	440b      	add	r3, r1
 80038a8:	334c      	adds	r3, #76	@ 0x4c
 80038aa:	781a      	ldrb	r2, [r3, #0]
 80038ac:	78fb      	ldrb	r3, [r7, #3]
 80038ae:	4619      	mov	r1, r3
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	f008 fe45 	bl	800c540 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	799b      	ldrb	r3, [r3, #6]
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d13b      	bne.n	8003936 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 80038be:	78fa      	ldrb	r2, [r7, #3]
 80038c0:	6879      	ldr	r1, [r7, #4]
 80038c2:	4613      	mov	r3, r2
 80038c4:	011b      	lsls	r3, r3, #4
 80038c6:	1a9b      	subs	r3, r3, r2
 80038c8:	009b      	lsls	r3, r3, #2
 80038ca:	440b      	add	r3, r1
 80038cc:	3338      	adds	r3, #56	@ 0x38
 80038ce:	6819      	ldr	r1, [r3, #0]
 80038d0:	78fa      	ldrb	r2, [r7, #3]
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	4613      	mov	r3, r2
 80038d6:	011b      	lsls	r3, r3, #4
 80038d8:	1a9b      	subs	r3, r3, r2
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	4403      	add	r3, r0
 80038de:	3328      	adds	r3, #40	@ 0x28
 80038e0:	881b      	ldrh	r3, [r3, #0]
 80038e2:	440b      	add	r3, r1
 80038e4:	1e59      	subs	r1, r3, #1
 80038e6:	78fa      	ldrb	r2, [r7, #3]
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	4613      	mov	r3, r2
 80038ec:	011b      	lsls	r3, r3, #4
 80038ee:	1a9b      	subs	r3, r3, r2
 80038f0:	009b      	lsls	r3, r3, #2
 80038f2:	4403      	add	r3, r0
 80038f4:	3328      	adds	r3, #40	@ 0x28
 80038f6:	881b      	ldrh	r3, [r3, #0]
 80038f8:	fbb1 f3f3 	udiv	r3, r1, r3
 80038fc:	f003 0301 	and.w	r3, r3, #1
 8003900:	2b00      	cmp	r3, #0
 8003902:	f000 8470 	beq.w	80041e6 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8003906:	78fa      	ldrb	r2, [r7, #3]
 8003908:	6879      	ldr	r1, [r7, #4]
 800390a:	4613      	mov	r3, r2
 800390c:	011b      	lsls	r3, r3, #4
 800390e:	1a9b      	subs	r3, r3, r2
 8003910:	009b      	lsls	r3, r3, #2
 8003912:	440b      	add	r3, r1
 8003914:	333c      	adds	r3, #60	@ 0x3c
 8003916:	781b      	ldrb	r3, [r3, #0]
 8003918:	78fa      	ldrb	r2, [r7, #3]
 800391a:	f083 0301 	eor.w	r3, r3, #1
 800391e:	b2d8      	uxtb	r0, r3
 8003920:	6879      	ldr	r1, [r7, #4]
 8003922:	4613      	mov	r3, r2
 8003924:	011b      	lsls	r3, r3, #4
 8003926:	1a9b      	subs	r3, r3, r2
 8003928:	009b      	lsls	r3, r3, #2
 800392a:	440b      	add	r3, r1
 800392c:	333c      	adds	r3, #60	@ 0x3c
 800392e:	4602      	mov	r2, r0
 8003930:	701a      	strb	r2, [r3, #0]
 8003932:	f000 bc58 	b.w	80041e6 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8003936:	78fa      	ldrb	r2, [r7, #3]
 8003938:	6879      	ldr	r1, [r7, #4]
 800393a:	4613      	mov	r3, r2
 800393c:	011b      	lsls	r3, r3, #4
 800393e:	1a9b      	subs	r3, r3, r2
 8003940:	009b      	lsls	r3, r3, #2
 8003942:	440b      	add	r3, r1
 8003944:	333c      	adds	r3, #60	@ 0x3c
 8003946:	781b      	ldrb	r3, [r3, #0]
 8003948:	78fa      	ldrb	r2, [r7, #3]
 800394a:	f083 0301 	eor.w	r3, r3, #1
 800394e:	b2d8      	uxtb	r0, r3
 8003950:	6879      	ldr	r1, [r7, #4]
 8003952:	4613      	mov	r3, r2
 8003954:	011b      	lsls	r3, r3, #4
 8003956:	1a9b      	subs	r3, r3, r2
 8003958:	009b      	lsls	r3, r3, #2
 800395a:	440b      	add	r3, r1
 800395c:	333c      	adds	r3, #60	@ 0x3c
 800395e:	4602      	mov	r2, r0
 8003960:	701a      	strb	r2, [r3, #0]
 8003962:	f000 bc40 	b.w	80041e6 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	78fa      	ldrb	r2, [r7, #3]
 800396c:	4611      	mov	r1, r2
 800396e:	4618      	mov	r0, r3
 8003970:	f005 fce9 	bl	8009346 <USB_ReadChInterrupts>
 8003974:	4603      	mov	r3, r0
 8003976:	f003 0320 	and.w	r3, r3, #32
 800397a:	2b20      	cmp	r3, #32
 800397c:	d131      	bne.n	80039e2 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800397e:	78fb      	ldrb	r3, [r7, #3]
 8003980:	015a      	lsls	r2, r3, #5
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	4413      	add	r3, r2
 8003986:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800398a:	461a      	mov	r2, r3
 800398c:	2320      	movs	r3, #32
 800398e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8003990:	78fa      	ldrb	r2, [r7, #3]
 8003992:	6879      	ldr	r1, [r7, #4]
 8003994:	4613      	mov	r3, r2
 8003996:	011b      	lsls	r3, r3, #4
 8003998:	1a9b      	subs	r3, r3, r2
 800399a:	009b      	lsls	r3, r3, #2
 800399c:	440b      	add	r3, r1
 800399e:	331a      	adds	r3, #26
 80039a0:	781b      	ldrb	r3, [r3, #0]
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	f040 841f 	bne.w	80041e6 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 80039a8:	78fa      	ldrb	r2, [r7, #3]
 80039aa:	6879      	ldr	r1, [r7, #4]
 80039ac:	4613      	mov	r3, r2
 80039ae:	011b      	lsls	r3, r3, #4
 80039b0:	1a9b      	subs	r3, r3, r2
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	440b      	add	r3, r1
 80039b6:	331b      	adds	r3, #27
 80039b8:	2201      	movs	r2, #1
 80039ba:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80039bc:	78fa      	ldrb	r2, [r7, #3]
 80039be:	6879      	ldr	r1, [r7, #4]
 80039c0:	4613      	mov	r3, r2
 80039c2:	011b      	lsls	r3, r3, #4
 80039c4:	1a9b      	subs	r3, r3, r2
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	440b      	add	r3, r1
 80039ca:	334d      	adds	r3, #77	@ 0x4d
 80039cc:	2203      	movs	r2, #3
 80039ce:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	78fa      	ldrb	r2, [r7, #3]
 80039d6:	4611      	mov	r1, r2
 80039d8:	4618      	mov	r0, r3
 80039da:	f006 fa58 	bl	8009e8e <USB_HC_Halt>
 80039de:	f000 bc02 	b.w	80041e6 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	78fa      	ldrb	r2, [r7, #3]
 80039e8:	4611      	mov	r1, r2
 80039ea:	4618      	mov	r0, r3
 80039ec:	f005 fcab 	bl	8009346 <USB_ReadChInterrupts>
 80039f0:	4603      	mov	r3, r0
 80039f2:	f003 0302 	and.w	r3, r3, #2
 80039f6:	2b02      	cmp	r3, #2
 80039f8:	f040 8305 	bne.w	8004006 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80039fc:	78fb      	ldrb	r3, [r7, #3]
 80039fe:	015a      	lsls	r2, r3, #5
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	4413      	add	r3, r2
 8003a04:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a08:	461a      	mov	r2, r3
 8003a0a:	2302      	movs	r3, #2
 8003a0c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003a0e:	78fa      	ldrb	r2, [r7, #3]
 8003a10:	6879      	ldr	r1, [r7, #4]
 8003a12:	4613      	mov	r3, r2
 8003a14:	011b      	lsls	r3, r3, #4
 8003a16:	1a9b      	subs	r3, r3, r2
 8003a18:	009b      	lsls	r3, r3, #2
 8003a1a:	440b      	add	r3, r1
 8003a1c:	334d      	adds	r3, #77	@ 0x4d
 8003a1e:	781b      	ldrb	r3, [r3, #0]
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d114      	bne.n	8003a4e <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003a24:	78fa      	ldrb	r2, [r7, #3]
 8003a26:	6879      	ldr	r1, [r7, #4]
 8003a28:	4613      	mov	r3, r2
 8003a2a:	011b      	lsls	r3, r3, #4
 8003a2c:	1a9b      	subs	r3, r3, r2
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	440b      	add	r3, r1
 8003a32:	334d      	adds	r3, #77	@ 0x4d
 8003a34:	2202      	movs	r2, #2
 8003a36:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003a38:	78fa      	ldrb	r2, [r7, #3]
 8003a3a:	6879      	ldr	r1, [r7, #4]
 8003a3c:	4613      	mov	r3, r2
 8003a3e:	011b      	lsls	r3, r3, #4
 8003a40:	1a9b      	subs	r3, r3, r2
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	440b      	add	r3, r1
 8003a46:	334c      	adds	r3, #76	@ 0x4c
 8003a48:	2201      	movs	r2, #1
 8003a4a:	701a      	strb	r2, [r3, #0]
 8003a4c:	e2cc      	b.n	8003fe8 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003a4e:	78fa      	ldrb	r2, [r7, #3]
 8003a50:	6879      	ldr	r1, [r7, #4]
 8003a52:	4613      	mov	r3, r2
 8003a54:	011b      	lsls	r3, r3, #4
 8003a56:	1a9b      	subs	r3, r3, r2
 8003a58:	009b      	lsls	r3, r3, #2
 8003a5a:	440b      	add	r3, r1
 8003a5c:	334d      	adds	r3, #77	@ 0x4d
 8003a5e:	781b      	ldrb	r3, [r3, #0]
 8003a60:	2b06      	cmp	r3, #6
 8003a62:	d114      	bne.n	8003a8e <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003a64:	78fa      	ldrb	r2, [r7, #3]
 8003a66:	6879      	ldr	r1, [r7, #4]
 8003a68:	4613      	mov	r3, r2
 8003a6a:	011b      	lsls	r3, r3, #4
 8003a6c:	1a9b      	subs	r3, r3, r2
 8003a6e:	009b      	lsls	r3, r3, #2
 8003a70:	440b      	add	r3, r1
 8003a72:	334d      	adds	r3, #77	@ 0x4d
 8003a74:	2202      	movs	r2, #2
 8003a76:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8003a78:	78fa      	ldrb	r2, [r7, #3]
 8003a7a:	6879      	ldr	r1, [r7, #4]
 8003a7c:	4613      	mov	r3, r2
 8003a7e:	011b      	lsls	r3, r3, #4
 8003a80:	1a9b      	subs	r3, r3, r2
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	440b      	add	r3, r1
 8003a86:	334c      	adds	r3, #76	@ 0x4c
 8003a88:	2205      	movs	r2, #5
 8003a8a:	701a      	strb	r2, [r3, #0]
 8003a8c:	e2ac      	b.n	8003fe8 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003a8e:	78fa      	ldrb	r2, [r7, #3]
 8003a90:	6879      	ldr	r1, [r7, #4]
 8003a92:	4613      	mov	r3, r2
 8003a94:	011b      	lsls	r3, r3, #4
 8003a96:	1a9b      	subs	r3, r3, r2
 8003a98:	009b      	lsls	r3, r3, #2
 8003a9a:	440b      	add	r3, r1
 8003a9c:	334d      	adds	r3, #77	@ 0x4d
 8003a9e:	781b      	ldrb	r3, [r3, #0]
 8003aa0:	2b07      	cmp	r3, #7
 8003aa2:	d00b      	beq.n	8003abc <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003aa4:	78fa      	ldrb	r2, [r7, #3]
 8003aa6:	6879      	ldr	r1, [r7, #4]
 8003aa8:	4613      	mov	r3, r2
 8003aaa:	011b      	lsls	r3, r3, #4
 8003aac:	1a9b      	subs	r3, r3, r2
 8003aae:	009b      	lsls	r3, r3, #2
 8003ab0:	440b      	add	r3, r1
 8003ab2:	334d      	adds	r3, #77	@ 0x4d
 8003ab4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003ab6:	2b09      	cmp	r3, #9
 8003ab8:	f040 80a6 	bne.w	8003c08 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003abc:	78fa      	ldrb	r2, [r7, #3]
 8003abe:	6879      	ldr	r1, [r7, #4]
 8003ac0:	4613      	mov	r3, r2
 8003ac2:	011b      	lsls	r3, r3, #4
 8003ac4:	1a9b      	subs	r3, r3, r2
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	440b      	add	r3, r1
 8003aca:	334d      	adds	r3, #77	@ 0x4d
 8003acc:	2202      	movs	r2, #2
 8003ace:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003ad0:	78fa      	ldrb	r2, [r7, #3]
 8003ad2:	6879      	ldr	r1, [r7, #4]
 8003ad4:	4613      	mov	r3, r2
 8003ad6:	011b      	lsls	r3, r3, #4
 8003ad8:	1a9b      	subs	r3, r3, r2
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	440b      	add	r3, r1
 8003ade:	3344      	adds	r3, #68	@ 0x44
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	1c59      	adds	r1, r3, #1
 8003ae4:	6878      	ldr	r0, [r7, #4]
 8003ae6:	4613      	mov	r3, r2
 8003ae8:	011b      	lsls	r3, r3, #4
 8003aea:	1a9b      	subs	r3, r3, r2
 8003aec:	009b      	lsls	r3, r3, #2
 8003aee:	4403      	add	r3, r0
 8003af0:	3344      	adds	r3, #68	@ 0x44
 8003af2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003af4:	78fa      	ldrb	r2, [r7, #3]
 8003af6:	6879      	ldr	r1, [r7, #4]
 8003af8:	4613      	mov	r3, r2
 8003afa:	011b      	lsls	r3, r3, #4
 8003afc:	1a9b      	subs	r3, r3, r2
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	440b      	add	r3, r1
 8003b02:	3344      	adds	r3, #68	@ 0x44
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	2b02      	cmp	r3, #2
 8003b08:	d943      	bls.n	8003b92 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003b0a:	78fa      	ldrb	r2, [r7, #3]
 8003b0c:	6879      	ldr	r1, [r7, #4]
 8003b0e:	4613      	mov	r3, r2
 8003b10:	011b      	lsls	r3, r3, #4
 8003b12:	1a9b      	subs	r3, r3, r2
 8003b14:	009b      	lsls	r3, r3, #2
 8003b16:	440b      	add	r3, r1
 8003b18:	3344      	adds	r3, #68	@ 0x44
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8003b1e:	78fa      	ldrb	r2, [r7, #3]
 8003b20:	6879      	ldr	r1, [r7, #4]
 8003b22:	4613      	mov	r3, r2
 8003b24:	011b      	lsls	r3, r3, #4
 8003b26:	1a9b      	subs	r3, r3, r2
 8003b28:	009b      	lsls	r3, r3, #2
 8003b2a:	440b      	add	r3, r1
 8003b2c:	331a      	adds	r3, #26
 8003b2e:	781b      	ldrb	r3, [r3, #0]
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d123      	bne.n	8003b7c <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8003b34:	78fa      	ldrb	r2, [r7, #3]
 8003b36:	6879      	ldr	r1, [r7, #4]
 8003b38:	4613      	mov	r3, r2
 8003b3a:	011b      	lsls	r3, r3, #4
 8003b3c:	1a9b      	subs	r3, r3, r2
 8003b3e:	009b      	lsls	r3, r3, #2
 8003b40:	440b      	add	r3, r1
 8003b42:	331b      	adds	r3, #27
 8003b44:	2200      	movs	r2, #0
 8003b46:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8003b48:	78fa      	ldrb	r2, [r7, #3]
 8003b4a:	6879      	ldr	r1, [r7, #4]
 8003b4c:	4613      	mov	r3, r2
 8003b4e:	011b      	lsls	r3, r3, #4
 8003b50:	1a9b      	subs	r3, r3, r2
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	440b      	add	r3, r1
 8003b56:	331c      	adds	r3, #28
 8003b58:	2200      	movs	r2, #0
 8003b5a:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003b5c:	78fb      	ldrb	r3, [r7, #3]
 8003b5e:	015a      	lsls	r2, r3, #5
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	4413      	add	r3, r2
 8003b64:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	78fa      	ldrb	r2, [r7, #3]
 8003b6c:	0151      	lsls	r1, r2, #5
 8003b6e:	693a      	ldr	r2, [r7, #16]
 8003b70:	440a      	add	r2, r1
 8003b72:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003b76:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b7a:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003b7c:	78fa      	ldrb	r2, [r7, #3]
 8003b7e:	6879      	ldr	r1, [r7, #4]
 8003b80:	4613      	mov	r3, r2
 8003b82:	011b      	lsls	r3, r3, #4
 8003b84:	1a9b      	subs	r3, r3, r2
 8003b86:	009b      	lsls	r3, r3, #2
 8003b88:	440b      	add	r3, r1
 8003b8a:	334c      	adds	r3, #76	@ 0x4c
 8003b8c:	2204      	movs	r2, #4
 8003b8e:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003b90:	e229      	b.n	8003fe6 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003b92:	78fa      	ldrb	r2, [r7, #3]
 8003b94:	6879      	ldr	r1, [r7, #4]
 8003b96:	4613      	mov	r3, r2
 8003b98:	011b      	lsls	r3, r3, #4
 8003b9a:	1a9b      	subs	r3, r3, r2
 8003b9c:	009b      	lsls	r3, r3, #2
 8003b9e:	440b      	add	r3, r1
 8003ba0:	334c      	adds	r3, #76	@ 0x4c
 8003ba2:	2202      	movs	r2, #2
 8003ba4:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003ba6:	78fa      	ldrb	r2, [r7, #3]
 8003ba8:	6879      	ldr	r1, [r7, #4]
 8003baa:	4613      	mov	r3, r2
 8003bac:	011b      	lsls	r3, r3, #4
 8003bae:	1a9b      	subs	r3, r3, r2
 8003bb0:	009b      	lsls	r3, r3, #2
 8003bb2:	440b      	add	r3, r1
 8003bb4:	3326      	adds	r3, #38	@ 0x26
 8003bb6:	781b      	ldrb	r3, [r3, #0]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d00b      	beq.n	8003bd4 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003bbc:	78fa      	ldrb	r2, [r7, #3]
 8003bbe:	6879      	ldr	r1, [r7, #4]
 8003bc0:	4613      	mov	r3, r2
 8003bc2:	011b      	lsls	r3, r3, #4
 8003bc4:	1a9b      	subs	r3, r3, r2
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	440b      	add	r3, r1
 8003bca:	3326      	adds	r3, #38	@ 0x26
 8003bcc:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003bce:	2b02      	cmp	r3, #2
 8003bd0:	f040 8209 	bne.w	8003fe6 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003bd4:	78fb      	ldrb	r3, [r7, #3]
 8003bd6:	015a      	lsls	r2, r3, #5
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	4413      	add	r3, r2
 8003bdc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003bea:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003bf2:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003bf4:	78fb      	ldrb	r3, [r7, #3]
 8003bf6:	015a      	lsls	r2, r3, #5
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	4413      	add	r3, r2
 8003bfc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c00:	461a      	mov	r2, r3
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003c06:	e1ee      	b.n	8003fe6 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003c08:	78fa      	ldrb	r2, [r7, #3]
 8003c0a:	6879      	ldr	r1, [r7, #4]
 8003c0c:	4613      	mov	r3, r2
 8003c0e:	011b      	lsls	r3, r3, #4
 8003c10:	1a9b      	subs	r3, r3, r2
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	440b      	add	r3, r1
 8003c16:	334d      	adds	r3, #77	@ 0x4d
 8003c18:	781b      	ldrb	r3, [r3, #0]
 8003c1a:	2b05      	cmp	r3, #5
 8003c1c:	f040 80c8 	bne.w	8003db0 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003c20:	78fa      	ldrb	r2, [r7, #3]
 8003c22:	6879      	ldr	r1, [r7, #4]
 8003c24:	4613      	mov	r3, r2
 8003c26:	011b      	lsls	r3, r3, #4
 8003c28:	1a9b      	subs	r3, r3, r2
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	440b      	add	r3, r1
 8003c2e:	334d      	adds	r3, #77	@ 0x4d
 8003c30:	2202      	movs	r2, #2
 8003c32:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003c34:	78fa      	ldrb	r2, [r7, #3]
 8003c36:	6879      	ldr	r1, [r7, #4]
 8003c38:	4613      	mov	r3, r2
 8003c3a:	011b      	lsls	r3, r3, #4
 8003c3c:	1a9b      	subs	r3, r3, r2
 8003c3e:	009b      	lsls	r3, r3, #2
 8003c40:	440b      	add	r3, r1
 8003c42:	331b      	adds	r3, #27
 8003c44:	781b      	ldrb	r3, [r3, #0]
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	f040 81ce 	bne.w	8003fe8 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003c4c:	78fa      	ldrb	r2, [r7, #3]
 8003c4e:	6879      	ldr	r1, [r7, #4]
 8003c50:	4613      	mov	r3, r2
 8003c52:	011b      	lsls	r3, r3, #4
 8003c54:	1a9b      	subs	r3, r3, r2
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	440b      	add	r3, r1
 8003c5a:	3326      	adds	r3, #38	@ 0x26
 8003c5c:	781b      	ldrb	r3, [r3, #0]
 8003c5e:	2b03      	cmp	r3, #3
 8003c60:	d16b      	bne.n	8003d3a <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8003c62:	78fa      	ldrb	r2, [r7, #3]
 8003c64:	6879      	ldr	r1, [r7, #4]
 8003c66:	4613      	mov	r3, r2
 8003c68:	011b      	lsls	r3, r3, #4
 8003c6a:	1a9b      	subs	r3, r3, r2
 8003c6c:	009b      	lsls	r3, r3, #2
 8003c6e:	440b      	add	r3, r1
 8003c70:	3348      	adds	r3, #72	@ 0x48
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	1c59      	adds	r1, r3, #1
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	4613      	mov	r3, r2
 8003c7a:	011b      	lsls	r3, r3, #4
 8003c7c:	1a9b      	subs	r3, r3, r2
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	4403      	add	r3, r0
 8003c82:	3348      	adds	r3, #72	@ 0x48
 8003c84:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8003c86:	78fa      	ldrb	r2, [r7, #3]
 8003c88:	6879      	ldr	r1, [r7, #4]
 8003c8a:	4613      	mov	r3, r2
 8003c8c:	011b      	lsls	r3, r3, #4
 8003c8e:	1a9b      	subs	r3, r3, r2
 8003c90:	009b      	lsls	r3, r3, #2
 8003c92:	440b      	add	r3, r1
 8003c94:	3348      	adds	r3, #72	@ 0x48
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	2b02      	cmp	r3, #2
 8003c9a:	d943      	bls.n	8003d24 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8003c9c:	78fa      	ldrb	r2, [r7, #3]
 8003c9e:	6879      	ldr	r1, [r7, #4]
 8003ca0:	4613      	mov	r3, r2
 8003ca2:	011b      	lsls	r3, r3, #4
 8003ca4:	1a9b      	subs	r3, r3, r2
 8003ca6:	009b      	lsls	r3, r3, #2
 8003ca8:	440b      	add	r3, r1
 8003caa:	3348      	adds	r3, #72	@ 0x48
 8003cac:	2200      	movs	r2, #0
 8003cae:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8003cb0:	78fa      	ldrb	r2, [r7, #3]
 8003cb2:	6879      	ldr	r1, [r7, #4]
 8003cb4:	4613      	mov	r3, r2
 8003cb6:	011b      	lsls	r3, r3, #4
 8003cb8:	1a9b      	subs	r3, r3, r2
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	440b      	add	r3, r1
 8003cbe:	331b      	adds	r3, #27
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8003cc4:	78fa      	ldrb	r2, [r7, #3]
 8003cc6:	6879      	ldr	r1, [r7, #4]
 8003cc8:	4613      	mov	r3, r2
 8003cca:	011b      	lsls	r3, r3, #4
 8003ccc:	1a9b      	subs	r3, r3, r2
 8003cce:	009b      	lsls	r3, r3, #2
 8003cd0:	440b      	add	r3, r1
 8003cd2:	3344      	adds	r3, #68	@ 0x44
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	2b02      	cmp	r3, #2
 8003cd8:	d809      	bhi.n	8003cee <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8003cda:	78fa      	ldrb	r2, [r7, #3]
 8003cdc:	6879      	ldr	r1, [r7, #4]
 8003cde:	4613      	mov	r3, r2
 8003ce0:	011b      	lsls	r3, r3, #4
 8003ce2:	1a9b      	subs	r3, r3, r2
 8003ce4:	009b      	lsls	r3, r3, #2
 8003ce6:	440b      	add	r3, r1
 8003ce8:	331c      	adds	r3, #28
 8003cea:	2201      	movs	r2, #1
 8003cec:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003cee:	78fb      	ldrb	r3, [r7, #3]
 8003cf0:	015a      	lsls	r2, r3, #5
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	4413      	add	r3, r2
 8003cf6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	78fa      	ldrb	r2, [r7, #3]
 8003cfe:	0151      	lsls	r1, r2, #5
 8003d00:	693a      	ldr	r2, [r7, #16]
 8003d02:	440a      	add	r2, r1
 8003d04:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003d08:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d0c:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8003d0e:	78fa      	ldrb	r2, [r7, #3]
 8003d10:	6879      	ldr	r1, [r7, #4]
 8003d12:	4613      	mov	r3, r2
 8003d14:	011b      	lsls	r3, r3, #4
 8003d16:	1a9b      	subs	r3, r3, r2
 8003d18:	009b      	lsls	r3, r3, #2
 8003d1a:	440b      	add	r3, r1
 8003d1c:	334c      	adds	r3, #76	@ 0x4c
 8003d1e:	2204      	movs	r2, #4
 8003d20:	701a      	strb	r2, [r3, #0]
 8003d22:	e014      	b.n	8003d4e <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003d24:	78fa      	ldrb	r2, [r7, #3]
 8003d26:	6879      	ldr	r1, [r7, #4]
 8003d28:	4613      	mov	r3, r2
 8003d2a:	011b      	lsls	r3, r3, #4
 8003d2c:	1a9b      	subs	r3, r3, r2
 8003d2e:	009b      	lsls	r3, r3, #2
 8003d30:	440b      	add	r3, r1
 8003d32:	334c      	adds	r3, #76	@ 0x4c
 8003d34:	2202      	movs	r2, #2
 8003d36:	701a      	strb	r2, [r3, #0]
 8003d38:	e009      	b.n	8003d4e <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003d3a:	78fa      	ldrb	r2, [r7, #3]
 8003d3c:	6879      	ldr	r1, [r7, #4]
 8003d3e:	4613      	mov	r3, r2
 8003d40:	011b      	lsls	r3, r3, #4
 8003d42:	1a9b      	subs	r3, r3, r2
 8003d44:	009b      	lsls	r3, r3, #2
 8003d46:	440b      	add	r3, r1
 8003d48:	334c      	adds	r3, #76	@ 0x4c
 8003d4a:	2202      	movs	r2, #2
 8003d4c:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003d4e:	78fa      	ldrb	r2, [r7, #3]
 8003d50:	6879      	ldr	r1, [r7, #4]
 8003d52:	4613      	mov	r3, r2
 8003d54:	011b      	lsls	r3, r3, #4
 8003d56:	1a9b      	subs	r3, r3, r2
 8003d58:	009b      	lsls	r3, r3, #2
 8003d5a:	440b      	add	r3, r1
 8003d5c:	3326      	adds	r3, #38	@ 0x26
 8003d5e:	781b      	ldrb	r3, [r3, #0]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d00b      	beq.n	8003d7c <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003d64:	78fa      	ldrb	r2, [r7, #3]
 8003d66:	6879      	ldr	r1, [r7, #4]
 8003d68:	4613      	mov	r3, r2
 8003d6a:	011b      	lsls	r3, r3, #4
 8003d6c:	1a9b      	subs	r3, r3, r2
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	440b      	add	r3, r1
 8003d72:	3326      	adds	r3, #38	@ 0x26
 8003d74:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003d76:	2b02      	cmp	r3, #2
 8003d78:	f040 8136 	bne.w	8003fe8 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003d7c:	78fb      	ldrb	r3, [r7, #3]
 8003d7e:	015a      	lsls	r2, r3, #5
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	4413      	add	r3, r2
 8003d84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003d92:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003d9a:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003d9c:	78fb      	ldrb	r3, [r7, #3]
 8003d9e:	015a      	lsls	r2, r3, #5
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	4413      	add	r3, r2
 8003da4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003da8:	461a      	mov	r2, r3
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	6013      	str	r3, [r2, #0]
 8003dae:	e11b      	b.n	8003fe8 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003db0:	78fa      	ldrb	r2, [r7, #3]
 8003db2:	6879      	ldr	r1, [r7, #4]
 8003db4:	4613      	mov	r3, r2
 8003db6:	011b      	lsls	r3, r3, #4
 8003db8:	1a9b      	subs	r3, r3, r2
 8003dba:	009b      	lsls	r3, r3, #2
 8003dbc:	440b      	add	r3, r1
 8003dbe:	334d      	adds	r3, #77	@ 0x4d
 8003dc0:	781b      	ldrb	r3, [r3, #0]
 8003dc2:	2b03      	cmp	r3, #3
 8003dc4:	f040 8081 	bne.w	8003eca <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003dc8:	78fa      	ldrb	r2, [r7, #3]
 8003dca:	6879      	ldr	r1, [r7, #4]
 8003dcc:	4613      	mov	r3, r2
 8003dce:	011b      	lsls	r3, r3, #4
 8003dd0:	1a9b      	subs	r3, r3, r2
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	440b      	add	r3, r1
 8003dd6:	334d      	adds	r3, #77	@ 0x4d
 8003dd8:	2202      	movs	r2, #2
 8003dda:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003ddc:	78fa      	ldrb	r2, [r7, #3]
 8003dde:	6879      	ldr	r1, [r7, #4]
 8003de0:	4613      	mov	r3, r2
 8003de2:	011b      	lsls	r3, r3, #4
 8003de4:	1a9b      	subs	r3, r3, r2
 8003de6:	009b      	lsls	r3, r3, #2
 8003de8:	440b      	add	r3, r1
 8003dea:	331b      	adds	r3, #27
 8003dec:	781b      	ldrb	r3, [r3, #0]
 8003dee:	2b01      	cmp	r3, #1
 8003df0:	f040 80fa 	bne.w	8003fe8 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003df4:	78fa      	ldrb	r2, [r7, #3]
 8003df6:	6879      	ldr	r1, [r7, #4]
 8003df8:	4613      	mov	r3, r2
 8003dfa:	011b      	lsls	r3, r3, #4
 8003dfc:	1a9b      	subs	r3, r3, r2
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	440b      	add	r3, r1
 8003e02:	334c      	adds	r3, #76	@ 0x4c
 8003e04:	2202      	movs	r2, #2
 8003e06:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8003e08:	78fb      	ldrb	r3, [r7, #3]
 8003e0a:	015a      	lsls	r2, r3, #5
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	4413      	add	r3, r2
 8003e10:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	78fa      	ldrb	r2, [r7, #3]
 8003e18:	0151      	lsls	r1, r2, #5
 8003e1a:	693a      	ldr	r2, [r7, #16]
 8003e1c:	440a      	add	r2, r1
 8003e1e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003e22:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e26:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8003e28:	78fb      	ldrb	r3, [r7, #3]
 8003e2a:	015a      	lsls	r2, r3, #5
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	4413      	add	r3, r2
 8003e30:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e34:	68db      	ldr	r3, [r3, #12]
 8003e36:	78fa      	ldrb	r2, [r7, #3]
 8003e38:	0151      	lsls	r1, r2, #5
 8003e3a:	693a      	ldr	r2, [r7, #16]
 8003e3c:	440a      	add	r2, r1
 8003e3e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003e42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003e46:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8003e48:	78fb      	ldrb	r3, [r7, #3]
 8003e4a:	015a      	lsls	r2, r3, #5
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	4413      	add	r3, r2
 8003e50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e54:	68db      	ldr	r3, [r3, #12]
 8003e56:	78fa      	ldrb	r2, [r7, #3]
 8003e58:	0151      	lsls	r1, r2, #5
 8003e5a:	693a      	ldr	r2, [r7, #16]
 8003e5c:	440a      	add	r2, r1
 8003e5e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003e62:	f023 0320 	bic.w	r3, r3, #32
 8003e66:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003e68:	78fa      	ldrb	r2, [r7, #3]
 8003e6a:	6879      	ldr	r1, [r7, #4]
 8003e6c:	4613      	mov	r3, r2
 8003e6e:	011b      	lsls	r3, r3, #4
 8003e70:	1a9b      	subs	r3, r3, r2
 8003e72:	009b      	lsls	r3, r3, #2
 8003e74:	440b      	add	r3, r1
 8003e76:	3326      	adds	r3, #38	@ 0x26
 8003e78:	781b      	ldrb	r3, [r3, #0]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d00b      	beq.n	8003e96 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003e7e:	78fa      	ldrb	r2, [r7, #3]
 8003e80:	6879      	ldr	r1, [r7, #4]
 8003e82:	4613      	mov	r3, r2
 8003e84:	011b      	lsls	r3, r3, #4
 8003e86:	1a9b      	subs	r3, r3, r2
 8003e88:	009b      	lsls	r3, r3, #2
 8003e8a:	440b      	add	r3, r1
 8003e8c:	3326      	adds	r3, #38	@ 0x26
 8003e8e:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003e90:	2b02      	cmp	r3, #2
 8003e92:	f040 80a9 	bne.w	8003fe8 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003e96:	78fb      	ldrb	r3, [r7, #3]
 8003e98:	015a      	lsls	r2, r3, #5
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	4413      	add	r3, r2
 8003e9e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003eac:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003eb4:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003eb6:	78fb      	ldrb	r3, [r7, #3]
 8003eb8:	015a      	lsls	r2, r3, #5
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	4413      	add	r3, r2
 8003ebe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ec2:	461a      	mov	r2, r3
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	6013      	str	r3, [r2, #0]
 8003ec8:	e08e      	b.n	8003fe8 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003eca:	78fa      	ldrb	r2, [r7, #3]
 8003ecc:	6879      	ldr	r1, [r7, #4]
 8003ece:	4613      	mov	r3, r2
 8003ed0:	011b      	lsls	r3, r3, #4
 8003ed2:	1a9b      	subs	r3, r3, r2
 8003ed4:	009b      	lsls	r3, r3, #2
 8003ed6:	440b      	add	r3, r1
 8003ed8:	334d      	adds	r3, #77	@ 0x4d
 8003eda:	781b      	ldrb	r3, [r3, #0]
 8003edc:	2b04      	cmp	r3, #4
 8003ede:	d143      	bne.n	8003f68 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003ee0:	78fa      	ldrb	r2, [r7, #3]
 8003ee2:	6879      	ldr	r1, [r7, #4]
 8003ee4:	4613      	mov	r3, r2
 8003ee6:	011b      	lsls	r3, r3, #4
 8003ee8:	1a9b      	subs	r3, r3, r2
 8003eea:	009b      	lsls	r3, r3, #2
 8003eec:	440b      	add	r3, r1
 8003eee:	334d      	adds	r3, #77	@ 0x4d
 8003ef0:	2202      	movs	r2, #2
 8003ef2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003ef4:	78fa      	ldrb	r2, [r7, #3]
 8003ef6:	6879      	ldr	r1, [r7, #4]
 8003ef8:	4613      	mov	r3, r2
 8003efa:	011b      	lsls	r3, r3, #4
 8003efc:	1a9b      	subs	r3, r3, r2
 8003efe:	009b      	lsls	r3, r3, #2
 8003f00:	440b      	add	r3, r1
 8003f02:	334c      	adds	r3, #76	@ 0x4c
 8003f04:	2202      	movs	r2, #2
 8003f06:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003f08:	78fa      	ldrb	r2, [r7, #3]
 8003f0a:	6879      	ldr	r1, [r7, #4]
 8003f0c:	4613      	mov	r3, r2
 8003f0e:	011b      	lsls	r3, r3, #4
 8003f10:	1a9b      	subs	r3, r3, r2
 8003f12:	009b      	lsls	r3, r3, #2
 8003f14:	440b      	add	r3, r1
 8003f16:	3326      	adds	r3, #38	@ 0x26
 8003f18:	781b      	ldrb	r3, [r3, #0]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d00a      	beq.n	8003f34 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003f1e:	78fa      	ldrb	r2, [r7, #3]
 8003f20:	6879      	ldr	r1, [r7, #4]
 8003f22:	4613      	mov	r3, r2
 8003f24:	011b      	lsls	r3, r3, #4
 8003f26:	1a9b      	subs	r3, r3, r2
 8003f28:	009b      	lsls	r3, r3, #2
 8003f2a:	440b      	add	r3, r1
 8003f2c:	3326      	adds	r3, #38	@ 0x26
 8003f2e:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003f30:	2b02      	cmp	r3, #2
 8003f32:	d159      	bne.n	8003fe8 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003f34:	78fb      	ldrb	r3, [r7, #3]
 8003f36:	015a      	lsls	r2, r3, #5
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	4413      	add	r3, r2
 8003f3c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003f4a:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003f52:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003f54:	78fb      	ldrb	r3, [r7, #3]
 8003f56:	015a      	lsls	r2, r3, #5
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	4413      	add	r3, r2
 8003f5c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f60:	461a      	mov	r2, r3
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	6013      	str	r3, [r2, #0]
 8003f66:	e03f      	b.n	8003fe8 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8003f68:	78fa      	ldrb	r2, [r7, #3]
 8003f6a:	6879      	ldr	r1, [r7, #4]
 8003f6c:	4613      	mov	r3, r2
 8003f6e:	011b      	lsls	r3, r3, #4
 8003f70:	1a9b      	subs	r3, r3, r2
 8003f72:	009b      	lsls	r3, r3, #2
 8003f74:	440b      	add	r3, r1
 8003f76:	334d      	adds	r3, #77	@ 0x4d
 8003f78:	781b      	ldrb	r3, [r3, #0]
 8003f7a:	2b08      	cmp	r3, #8
 8003f7c:	d126      	bne.n	8003fcc <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003f7e:	78fa      	ldrb	r2, [r7, #3]
 8003f80:	6879      	ldr	r1, [r7, #4]
 8003f82:	4613      	mov	r3, r2
 8003f84:	011b      	lsls	r3, r3, #4
 8003f86:	1a9b      	subs	r3, r3, r2
 8003f88:	009b      	lsls	r3, r3, #2
 8003f8a:	440b      	add	r3, r1
 8003f8c:	334d      	adds	r3, #77	@ 0x4d
 8003f8e:	2202      	movs	r2, #2
 8003f90:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003f92:	78fa      	ldrb	r2, [r7, #3]
 8003f94:	6879      	ldr	r1, [r7, #4]
 8003f96:	4613      	mov	r3, r2
 8003f98:	011b      	lsls	r3, r3, #4
 8003f9a:	1a9b      	subs	r3, r3, r2
 8003f9c:	009b      	lsls	r3, r3, #2
 8003f9e:	440b      	add	r3, r1
 8003fa0:	3344      	adds	r3, #68	@ 0x44
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	1c59      	adds	r1, r3, #1
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	4613      	mov	r3, r2
 8003faa:	011b      	lsls	r3, r3, #4
 8003fac:	1a9b      	subs	r3, r3, r2
 8003fae:	009b      	lsls	r3, r3, #2
 8003fb0:	4403      	add	r3, r0
 8003fb2:	3344      	adds	r3, #68	@ 0x44
 8003fb4:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8003fb6:	78fa      	ldrb	r2, [r7, #3]
 8003fb8:	6879      	ldr	r1, [r7, #4]
 8003fba:	4613      	mov	r3, r2
 8003fbc:	011b      	lsls	r3, r3, #4
 8003fbe:	1a9b      	subs	r3, r3, r2
 8003fc0:	009b      	lsls	r3, r3, #2
 8003fc2:	440b      	add	r3, r1
 8003fc4:	334c      	adds	r3, #76	@ 0x4c
 8003fc6:	2204      	movs	r2, #4
 8003fc8:	701a      	strb	r2, [r3, #0]
 8003fca:	e00d      	b.n	8003fe8 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8003fcc:	78fa      	ldrb	r2, [r7, #3]
 8003fce:	6879      	ldr	r1, [r7, #4]
 8003fd0:	4613      	mov	r3, r2
 8003fd2:	011b      	lsls	r3, r3, #4
 8003fd4:	1a9b      	subs	r3, r3, r2
 8003fd6:	009b      	lsls	r3, r3, #2
 8003fd8:	440b      	add	r3, r1
 8003fda:	334d      	adds	r3, #77	@ 0x4d
 8003fdc:	781b      	ldrb	r3, [r3, #0]
 8003fde:	2b02      	cmp	r3, #2
 8003fe0:	f000 8100 	beq.w	80041e4 <HCD_HC_IN_IRQHandler+0xcca>
 8003fe4:	e000      	b.n	8003fe8 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003fe6:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003fe8:	78fa      	ldrb	r2, [r7, #3]
 8003fea:	6879      	ldr	r1, [r7, #4]
 8003fec:	4613      	mov	r3, r2
 8003fee:	011b      	lsls	r3, r3, #4
 8003ff0:	1a9b      	subs	r3, r3, r2
 8003ff2:	009b      	lsls	r3, r3, #2
 8003ff4:	440b      	add	r3, r1
 8003ff6:	334c      	adds	r3, #76	@ 0x4c
 8003ff8:	781a      	ldrb	r2, [r3, #0]
 8003ffa:	78fb      	ldrb	r3, [r7, #3]
 8003ffc:	4619      	mov	r1, r3
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f008 fa9e 	bl	800c540 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004004:	e0ef      	b.n	80041e6 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	78fa      	ldrb	r2, [r7, #3]
 800400c:	4611      	mov	r1, r2
 800400e:	4618      	mov	r0, r3
 8004010:	f005 f999 	bl	8009346 <USB_ReadChInterrupts>
 8004014:	4603      	mov	r3, r0
 8004016:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800401a:	2b40      	cmp	r3, #64	@ 0x40
 800401c:	d12f      	bne.n	800407e <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800401e:	78fb      	ldrb	r3, [r7, #3]
 8004020:	015a      	lsls	r2, r3, #5
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	4413      	add	r3, r2
 8004026:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800402a:	461a      	mov	r2, r3
 800402c:	2340      	movs	r3, #64	@ 0x40
 800402e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8004030:	78fa      	ldrb	r2, [r7, #3]
 8004032:	6879      	ldr	r1, [r7, #4]
 8004034:	4613      	mov	r3, r2
 8004036:	011b      	lsls	r3, r3, #4
 8004038:	1a9b      	subs	r3, r3, r2
 800403a:	009b      	lsls	r3, r3, #2
 800403c:	440b      	add	r3, r1
 800403e:	334d      	adds	r3, #77	@ 0x4d
 8004040:	2205      	movs	r2, #5
 8004042:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8004044:	78fa      	ldrb	r2, [r7, #3]
 8004046:	6879      	ldr	r1, [r7, #4]
 8004048:	4613      	mov	r3, r2
 800404a:	011b      	lsls	r3, r3, #4
 800404c:	1a9b      	subs	r3, r3, r2
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	440b      	add	r3, r1
 8004052:	331a      	adds	r3, #26
 8004054:	781b      	ldrb	r3, [r3, #0]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d109      	bne.n	800406e <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800405a:	78fa      	ldrb	r2, [r7, #3]
 800405c:	6879      	ldr	r1, [r7, #4]
 800405e:	4613      	mov	r3, r2
 8004060:	011b      	lsls	r3, r3, #4
 8004062:	1a9b      	subs	r3, r3, r2
 8004064:	009b      	lsls	r3, r3, #2
 8004066:	440b      	add	r3, r1
 8004068:	3344      	adds	r3, #68	@ 0x44
 800406a:	2200      	movs	r2, #0
 800406c:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	78fa      	ldrb	r2, [r7, #3]
 8004074:	4611      	mov	r1, r2
 8004076:	4618      	mov	r0, r3
 8004078:	f005 ff09 	bl	8009e8e <USB_HC_Halt>
 800407c:	e0b3      	b.n	80041e6 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	78fa      	ldrb	r2, [r7, #3]
 8004084:	4611      	mov	r1, r2
 8004086:	4618      	mov	r0, r3
 8004088:	f005 f95d 	bl	8009346 <USB_ReadChInterrupts>
 800408c:	4603      	mov	r3, r0
 800408e:	f003 0310 	and.w	r3, r3, #16
 8004092:	2b10      	cmp	r3, #16
 8004094:	f040 80a7 	bne.w	80041e6 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8004098:	78fa      	ldrb	r2, [r7, #3]
 800409a:	6879      	ldr	r1, [r7, #4]
 800409c:	4613      	mov	r3, r2
 800409e:	011b      	lsls	r3, r3, #4
 80040a0:	1a9b      	subs	r3, r3, r2
 80040a2:	009b      	lsls	r3, r3, #2
 80040a4:	440b      	add	r3, r1
 80040a6:	3326      	adds	r3, #38	@ 0x26
 80040a8:	781b      	ldrb	r3, [r3, #0]
 80040aa:	2b03      	cmp	r3, #3
 80040ac:	d11b      	bne.n	80040e6 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80040ae:	78fa      	ldrb	r2, [r7, #3]
 80040b0:	6879      	ldr	r1, [r7, #4]
 80040b2:	4613      	mov	r3, r2
 80040b4:	011b      	lsls	r3, r3, #4
 80040b6:	1a9b      	subs	r3, r3, r2
 80040b8:	009b      	lsls	r3, r3, #2
 80040ba:	440b      	add	r3, r1
 80040bc:	3344      	adds	r3, #68	@ 0x44
 80040be:	2200      	movs	r2, #0
 80040c0:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 80040c2:	78fa      	ldrb	r2, [r7, #3]
 80040c4:	6879      	ldr	r1, [r7, #4]
 80040c6:	4613      	mov	r3, r2
 80040c8:	011b      	lsls	r3, r3, #4
 80040ca:	1a9b      	subs	r3, r3, r2
 80040cc:	009b      	lsls	r3, r3, #2
 80040ce:	440b      	add	r3, r1
 80040d0:	334d      	adds	r3, #77	@ 0x4d
 80040d2:	2204      	movs	r2, #4
 80040d4:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	78fa      	ldrb	r2, [r7, #3]
 80040dc:	4611      	mov	r1, r2
 80040de:	4618      	mov	r0, r3
 80040e0:	f005 fed5 	bl	8009e8e <USB_HC_Halt>
 80040e4:	e03f      	b.n	8004166 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80040e6:	78fa      	ldrb	r2, [r7, #3]
 80040e8:	6879      	ldr	r1, [r7, #4]
 80040ea:	4613      	mov	r3, r2
 80040ec:	011b      	lsls	r3, r3, #4
 80040ee:	1a9b      	subs	r3, r3, r2
 80040f0:	009b      	lsls	r3, r3, #2
 80040f2:	440b      	add	r3, r1
 80040f4:	3326      	adds	r3, #38	@ 0x26
 80040f6:	781b      	ldrb	r3, [r3, #0]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d00a      	beq.n	8004112 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80040fc:	78fa      	ldrb	r2, [r7, #3]
 80040fe:	6879      	ldr	r1, [r7, #4]
 8004100:	4613      	mov	r3, r2
 8004102:	011b      	lsls	r3, r3, #4
 8004104:	1a9b      	subs	r3, r3, r2
 8004106:	009b      	lsls	r3, r3, #2
 8004108:	440b      	add	r3, r1
 800410a:	3326      	adds	r3, #38	@ 0x26
 800410c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800410e:	2b02      	cmp	r3, #2
 8004110:	d129      	bne.n	8004166 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004112:	78fa      	ldrb	r2, [r7, #3]
 8004114:	6879      	ldr	r1, [r7, #4]
 8004116:	4613      	mov	r3, r2
 8004118:	011b      	lsls	r3, r3, #4
 800411a:	1a9b      	subs	r3, r3, r2
 800411c:	009b      	lsls	r3, r3, #2
 800411e:	440b      	add	r3, r1
 8004120:	3344      	adds	r3, #68	@ 0x44
 8004122:	2200      	movs	r2, #0
 8004124:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	799b      	ldrb	r3, [r3, #6]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d00a      	beq.n	8004144 <HCD_HC_IN_IRQHandler+0xc2a>
 800412e:	78fa      	ldrb	r2, [r7, #3]
 8004130:	6879      	ldr	r1, [r7, #4]
 8004132:	4613      	mov	r3, r2
 8004134:	011b      	lsls	r3, r3, #4
 8004136:	1a9b      	subs	r3, r3, r2
 8004138:	009b      	lsls	r3, r3, #2
 800413a:	440b      	add	r3, r1
 800413c:	331b      	adds	r3, #27
 800413e:	781b      	ldrb	r3, [r3, #0]
 8004140:	2b01      	cmp	r3, #1
 8004142:	d110      	bne.n	8004166 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8004144:	78fa      	ldrb	r2, [r7, #3]
 8004146:	6879      	ldr	r1, [r7, #4]
 8004148:	4613      	mov	r3, r2
 800414a:	011b      	lsls	r3, r3, #4
 800414c:	1a9b      	subs	r3, r3, r2
 800414e:	009b      	lsls	r3, r3, #2
 8004150:	440b      	add	r3, r1
 8004152:	334d      	adds	r3, #77	@ 0x4d
 8004154:	2204      	movs	r2, #4
 8004156:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	78fa      	ldrb	r2, [r7, #3]
 800415e:	4611      	mov	r1, r2
 8004160:	4618      	mov	r0, r3
 8004162:	f005 fe94 	bl	8009e8e <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8004166:	78fa      	ldrb	r2, [r7, #3]
 8004168:	6879      	ldr	r1, [r7, #4]
 800416a:	4613      	mov	r3, r2
 800416c:	011b      	lsls	r3, r3, #4
 800416e:	1a9b      	subs	r3, r3, r2
 8004170:	009b      	lsls	r3, r3, #2
 8004172:	440b      	add	r3, r1
 8004174:	331b      	adds	r3, #27
 8004176:	781b      	ldrb	r3, [r3, #0]
 8004178:	2b01      	cmp	r3, #1
 800417a:	d129      	bne.n	80041d0 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800417c:	78fa      	ldrb	r2, [r7, #3]
 800417e:	6879      	ldr	r1, [r7, #4]
 8004180:	4613      	mov	r3, r2
 8004182:	011b      	lsls	r3, r3, #4
 8004184:	1a9b      	subs	r3, r3, r2
 8004186:	009b      	lsls	r3, r3, #2
 8004188:	440b      	add	r3, r1
 800418a:	331b      	adds	r3, #27
 800418c:	2200      	movs	r2, #0
 800418e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004190:	78fb      	ldrb	r3, [r7, #3]
 8004192:	015a      	lsls	r2, r3, #5
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	4413      	add	r3, r2
 8004198:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	78fa      	ldrb	r2, [r7, #3]
 80041a0:	0151      	lsls	r1, r2, #5
 80041a2:	693a      	ldr	r2, [r7, #16]
 80041a4:	440a      	add	r2, r1
 80041a6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80041aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80041ae:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 80041b0:	78fb      	ldrb	r3, [r7, #3]
 80041b2:	015a      	lsls	r2, r3, #5
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	4413      	add	r3, r2
 80041b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80041bc:	68db      	ldr	r3, [r3, #12]
 80041be:	78fa      	ldrb	r2, [r7, #3]
 80041c0:	0151      	lsls	r1, r2, #5
 80041c2:	693a      	ldr	r2, [r7, #16]
 80041c4:	440a      	add	r2, r1
 80041c6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80041ca:	f043 0320 	orr.w	r3, r3, #32
 80041ce:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80041d0:	78fb      	ldrb	r3, [r7, #3]
 80041d2:	015a      	lsls	r2, r3, #5
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	4413      	add	r3, r2
 80041d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80041dc:	461a      	mov	r2, r3
 80041de:	2310      	movs	r3, #16
 80041e0:	6093      	str	r3, [r2, #8]
 80041e2:	e000      	b.n	80041e6 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 80041e4:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 80041e6:	3718      	adds	r7, #24
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}

080041ec <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b086      	sub	sp, #24
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	460b      	mov	r3, r1
 80041f6:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	78fa      	ldrb	r2, [r7, #3]
 8004208:	4611      	mov	r1, r2
 800420a:	4618      	mov	r0, r3
 800420c:	f005 f89b 	bl	8009346 <USB_ReadChInterrupts>
 8004210:	4603      	mov	r3, r0
 8004212:	f003 0304 	and.w	r3, r3, #4
 8004216:	2b04      	cmp	r3, #4
 8004218:	d11b      	bne.n	8004252 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800421a:	78fb      	ldrb	r3, [r7, #3]
 800421c:	015a      	lsls	r2, r3, #5
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	4413      	add	r3, r2
 8004222:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004226:	461a      	mov	r2, r3
 8004228:	2304      	movs	r3, #4
 800422a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800422c:	78fa      	ldrb	r2, [r7, #3]
 800422e:	6879      	ldr	r1, [r7, #4]
 8004230:	4613      	mov	r3, r2
 8004232:	011b      	lsls	r3, r3, #4
 8004234:	1a9b      	subs	r3, r3, r2
 8004236:	009b      	lsls	r3, r3, #2
 8004238:	440b      	add	r3, r1
 800423a:	334d      	adds	r3, #77	@ 0x4d
 800423c:	2207      	movs	r2, #7
 800423e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	78fa      	ldrb	r2, [r7, #3]
 8004246:	4611      	mov	r1, r2
 8004248:	4618      	mov	r0, r3
 800424a:	f005 fe20 	bl	8009e8e <USB_HC_Halt>
 800424e:	f000 bc89 	b.w	8004b64 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	78fa      	ldrb	r2, [r7, #3]
 8004258:	4611      	mov	r1, r2
 800425a:	4618      	mov	r0, r3
 800425c:	f005 f873 	bl	8009346 <USB_ReadChInterrupts>
 8004260:	4603      	mov	r3, r0
 8004262:	f003 0320 	and.w	r3, r3, #32
 8004266:	2b20      	cmp	r3, #32
 8004268:	f040 8082 	bne.w	8004370 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800426c:	78fb      	ldrb	r3, [r7, #3]
 800426e:	015a      	lsls	r2, r3, #5
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	4413      	add	r3, r2
 8004274:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004278:	461a      	mov	r2, r3
 800427a:	2320      	movs	r3, #32
 800427c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 800427e:	78fa      	ldrb	r2, [r7, #3]
 8004280:	6879      	ldr	r1, [r7, #4]
 8004282:	4613      	mov	r3, r2
 8004284:	011b      	lsls	r3, r3, #4
 8004286:	1a9b      	subs	r3, r3, r2
 8004288:	009b      	lsls	r3, r3, #2
 800428a:	440b      	add	r3, r1
 800428c:	3319      	adds	r3, #25
 800428e:	781b      	ldrb	r3, [r3, #0]
 8004290:	2b01      	cmp	r3, #1
 8004292:	d124      	bne.n	80042de <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8004294:	78fa      	ldrb	r2, [r7, #3]
 8004296:	6879      	ldr	r1, [r7, #4]
 8004298:	4613      	mov	r3, r2
 800429a:	011b      	lsls	r3, r3, #4
 800429c:	1a9b      	subs	r3, r3, r2
 800429e:	009b      	lsls	r3, r3, #2
 80042a0:	440b      	add	r3, r1
 80042a2:	3319      	adds	r3, #25
 80042a4:	2200      	movs	r2, #0
 80042a6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80042a8:	78fa      	ldrb	r2, [r7, #3]
 80042aa:	6879      	ldr	r1, [r7, #4]
 80042ac:	4613      	mov	r3, r2
 80042ae:	011b      	lsls	r3, r3, #4
 80042b0:	1a9b      	subs	r3, r3, r2
 80042b2:	009b      	lsls	r3, r3, #2
 80042b4:	440b      	add	r3, r1
 80042b6:	334c      	adds	r3, #76	@ 0x4c
 80042b8:	2202      	movs	r2, #2
 80042ba:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80042bc:	78fa      	ldrb	r2, [r7, #3]
 80042be:	6879      	ldr	r1, [r7, #4]
 80042c0:	4613      	mov	r3, r2
 80042c2:	011b      	lsls	r3, r3, #4
 80042c4:	1a9b      	subs	r3, r3, r2
 80042c6:	009b      	lsls	r3, r3, #2
 80042c8:	440b      	add	r3, r1
 80042ca:	334d      	adds	r3, #77	@ 0x4d
 80042cc:	2203      	movs	r2, #3
 80042ce:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	78fa      	ldrb	r2, [r7, #3]
 80042d6:	4611      	mov	r1, r2
 80042d8:	4618      	mov	r0, r3
 80042da:	f005 fdd8 	bl	8009e8e <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 80042de:	78fa      	ldrb	r2, [r7, #3]
 80042e0:	6879      	ldr	r1, [r7, #4]
 80042e2:	4613      	mov	r3, r2
 80042e4:	011b      	lsls	r3, r3, #4
 80042e6:	1a9b      	subs	r3, r3, r2
 80042e8:	009b      	lsls	r3, r3, #2
 80042ea:	440b      	add	r3, r1
 80042ec:	331a      	adds	r3, #26
 80042ee:	781b      	ldrb	r3, [r3, #0]
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	f040 8437 	bne.w	8004b64 <HCD_HC_OUT_IRQHandler+0x978>
 80042f6:	78fa      	ldrb	r2, [r7, #3]
 80042f8:	6879      	ldr	r1, [r7, #4]
 80042fa:	4613      	mov	r3, r2
 80042fc:	011b      	lsls	r3, r3, #4
 80042fe:	1a9b      	subs	r3, r3, r2
 8004300:	009b      	lsls	r3, r3, #2
 8004302:	440b      	add	r3, r1
 8004304:	331b      	adds	r3, #27
 8004306:	781b      	ldrb	r3, [r3, #0]
 8004308:	2b00      	cmp	r3, #0
 800430a:	f040 842b 	bne.w	8004b64 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 800430e:	78fa      	ldrb	r2, [r7, #3]
 8004310:	6879      	ldr	r1, [r7, #4]
 8004312:	4613      	mov	r3, r2
 8004314:	011b      	lsls	r3, r3, #4
 8004316:	1a9b      	subs	r3, r3, r2
 8004318:	009b      	lsls	r3, r3, #2
 800431a:	440b      	add	r3, r1
 800431c:	3326      	adds	r3, #38	@ 0x26
 800431e:	781b      	ldrb	r3, [r3, #0]
 8004320:	2b01      	cmp	r3, #1
 8004322:	d009      	beq.n	8004338 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8004324:	78fa      	ldrb	r2, [r7, #3]
 8004326:	6879      	ldr	r1, [r7, #4]
 8004328:	4613      	mov	r3, r2
 800432a:	011b      	lsls	r3, r3, #4
 800432c:	1a9b      	subs	r3, r3, r2
 800432e:	009b      	lsls	r3, r3, #2
 8004330:	440b      	add	r3, r1
 8004332:	331b      	adds	r3, #27
 8004334:	2201      	movs	r2, #1
 8004336:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8004338:	78fa      	ldrb	r2, [r7, #3]
 800433a:	6879      	ldr	r1, [r7, #4]
 800433c:	4613      	mov	r3, r2
 800433e:	011b      	lsls	r3, r3, #4
 8004340:	1a9b      	subs	r3, r3, r2
 8004342:	009b      	lsls	r3, r3, #2
 8004344:	440b      	add	r3, r1
 8004346:	334d      	adds	r3, #77	@ 0x4d
 8004348:	2203      	movs	r2, #3
 800434a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	78fa      	ldrb	r2, [r7, #3]
 8004352:	4611      	mov	r1, r2
 8004354:	4618      	mov	r0, r3
 8004356:	f005 fd9a 	bl	8009e8e <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 800435a:	78fa      	ldrb	r2, [r7, #3]
 800435c:	6879      	ldr	r1, [r7, #4]
 800435e:	4613      	mov	r3, r2
 8004360:	011b      	lsls	r3, r3, #4
 8004362:	1a9b      	subs	r3, r3, r2
 8004364:	009b      	lsls	r3, r3, #2
 8004366:	440b      	add	r3, r1
 8004368:	3344      	adds	r3, #68	@ 0x44
 800436a:	2200      	movs	r2, #0
 800436c:	601a      	str	r2, [r3, #0]
 800436e:	e3f9      	b.n	8004b64 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	78fa      	ldrb	r2, [r7, #3]
 8004376:	4611      	mov	r1, r2
 8004378:	4618      	mov	r0, r3
 800437a:	f004 ffe4 	bl	8009346 <USB_ReadChInterrupts>
 800437e:	4603      	mov	r3, r0
 8004380:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004384:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004388:	d111      	bne.n	80043ae <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800438a:	78fb      	ldrb	r3, [r7, #3]
 800438c:	015a      	lsls	r2, r3, #5
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	4413      	add	r3, r2
 8004392:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004396:	461a      	mov	r2, r3
 8004398:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800439c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	78fa      	ldrb	r2, [r7, #3]
 80043a4:	4611      	mov	r1, r2
 80043a6:	4618      	mov	r0, r3
 80043a8:	f005 fd71 	bl	8009e8e <USB_HC_Halt>
 80043ac:	e3da      	b.n	8004b64 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	78fa      	ldrb	r2, [r7, #3]
 80043b4:	4611      	mov	r1, r2
 80043b6:	4618      	mov	r0, r3
 80043b8:	f004 ffc5 	bl	8009346 <USB_ReadChInterrupts>
 80043bc:	4603      	mov	r3, r0
 80043be:	f003 0301 	and.w	r3, r3, #1
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d168      	bne.n	8004498 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80043c6:	78fa      	ldrb	r2, [r7, #3]
 80043c8:	6879      	ldr	r1, [r7, #4]
 80043ca:	4613      	mov	r3, r2
 80043cc:	011b      	lsls	r3, r3, #4
 80043ce:	1a9b      	subs	r3, r3, r2
 80043d0:	009b      	lsls	r3, r3, #2
 80043d2:	440b      	add	r3, r1
 80043d4:	3344      	adds	r3, #68	@ 0x44
 80043d6:	2200      	movs	r2, #0
 80043d8:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	78fa      	ldrb	r2, [r7, #3]
 80043e0:	4611      	mov	r1, r2
 80043e2:	4618      	mov	r0, r3
 80043e4:	f004 ffaf 	bl	8009346 <USB_ReadChInterrupts>
 80043e8:	4603      	mov	r3, r0
 80043ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043ee:	2b40      	cmp	r3, #64	@ 0x40
 80043f0:	d112      	bne.n	8004418 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80043f2:	78fa      	ldrb	r2, [r7, #3]
 80043f4:	6879      	ldr	r1, [r7, #4]
 80043f6:	4613      	mov	r3, r2
 80043f8:	011b      	lsls	r3, r3, #4
 80043fa:	1a9b      	subs	r3, r3, r2
 80043fc:	009b      	lsls	r3, r3, #2
 80043fe:	440b      	add	r3, r1
 8004400:	3319      	adds	r3, #25
 8004402:	2201      	movs	r2, #1
 8004404:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004406:	78fb      	ldrb	r3, [r7, #3]
 8004408:	015a      	lsls	r2, r3, #5
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	4413      	add	r3, r2
 800440e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004412:	461a      	mov	r2, r3
 8004414:	2340      	movs	r3, #64	@ 0x40
 8004416:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8004418:	78fa      	ldrb	r2, [r7, #3]
 800441a:	6879      	ldr	r1, [r7, #4]
 800441c:	4613      	mov	r3, r2
 800441e:	011b      	lsls	r3, r3, #4
 8004420:	1a9b      	subs	r3, r3, r2
 8004422:	009b      	lsls	r3, r3, #2
 8004424:	440b      	add	r3, r1
 8004426:	331b      	adds	r3, #27
 8004428:	781b      	ldrb	r3, [r3, #0]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d019      	beq.n	8004462 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800442e:	78fa      	ldrb	r2, [r7, #3]
 8004430:	6879      	ldr	r1, [r7, #4]
 8004432:	4613      	mov	r3, r2
 8004434:	011b      	lsls	r3, r3, #4
 8004436:	1a9b      	subs	r3, r3, r2
 8004438:	009b      	lsls	r3, r3, #2
 800443a:	440b      	add	r3, r1
 800443c:	331b      	adds	r3, #27
 800443e:	2200      	movs	r2, #0
 8004440:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004442:	78fb      	ldrb	r3, [r7, #3]
 8004444:	015a      	lsls	r2, r3, #5
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	4413      	add	r3, r2
 800444a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	78fa      	ldrb	r2, [r7, #3]
 8004452:	0151      	lsls	r1, r2, #5
 8004454:	693a      	ldr	r2, [r7, #16]
 8004456:	440a      	add	r2, r1
 8004458:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800445c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004460:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8004462:	78fb      	ldrb	r3, [r7, #3]
 8004464:	015a      	lsls	r2, r3, #5
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	4413      	add	r3, r2
 800446a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800446e:	461a      	mov	r2, r3
 8004470:	2301      	movs	r3, #1
 8004472:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8004474:	78fa      	ldrb	r2, [r7, #3]
 8004476:	6879      	ldr	r1, [r7, #4]
 8004478:	4613      	mov	r3, r2
 800447a:	011b      	lsls	r3, r3, #4
 800447c:	1a9b      	subs	r3, r3, r2
 800447e:	009b      	lsls	r3, r3, #2
 8004480:	440b      	add	r3, r1
 8004482:	334d      	adds	r3, #77	@ 0x4d
 8004484:	2201      	movs	r2, #1
 8004486:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	78fa      	ldrb	r2, [r7, #3]
 800448e:	4611      	mov	r1, r2
 8004490:	4618      	mov	r0, r3
 8004492:	f005 fcfc 	bl	8009e8e <USB_HC_Halt>
 8004496:	e365      	b.n	8004b64 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	78fa      	ldrb	r2, [r7, #3]
 800449e:	4611      	mov	r1, r2
 80044a0:	4618      	mov	r0, r3
 80044a2:	f004 ff50 	bl	8009346 <USB_ReadChInterrupts>
 80044a6:	4603      	mov	r3, r0
 80044a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044ac:	2b40      	cmp	r3, #64	@ 0x40
 80044ae:	d139      	bne.n	8004524 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 80044b0:	78fa      	ldrb	r2, [r7, #3]
 80044b2:	6879      	ldr	r1, [r7, #4]
 80044b4:	4613      	mov	r3, r2
 80044b6:	011b      	lsls	r3, r3, #4
 80044b8:	1a9b      	subs	r3, r3, r2
 80044ba:	009b      	lsls	r3, r3, #2
 80044bc:	440b      	add	r3, r1
 80044be:	334d      	adds	r3, #77	@ 0x4d
 80044c0:	2205      	movs	r2, #5
 80044c2:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80044c4:	78fa      	ldrb	r2, [r7, #3]
 80044c6:	6879      	ldr	r1, [r7, #4]
 80044c8:	4613      	mov	r3, r2
 80044ca:	011b      	lsls	r3, r3, #4
 80044cc:	1a9b      	subs	r3, r3, r2
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	440b      	add	r3, r1
 80044d2:	331a      	adds	r3, #26
 80044d4:	781b      	ldrb	r3, [r3, #0]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d109      	bne.n	80044ee <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80044da:	78fa      	ldrb	r2, [r7, #3]
 80044dc:	6879      	ldr	r1, [r7, #4]
 80044de:	4613      	mov	r3, r2
 80044e0:	011b      	lsls	r3, r3, #4
 80044e2:	1a9b      	subs	r3, r3, r2
 80044e4:	009b      	lsls	r3, r3, #2
 80044e6:	440b      	add	r3, r1
 80044e8:	3319      	adds	r3, #25
 80044ea:	2201      	movs	r2, #1
 80044ec:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 80044ee:	78fa      	ldrb	r2, [r7, #3]
 80044f0:	6879      	ldr	r1, [r7, #4]
 80044f2:	4613      	mov	r3, r2
 80044f4:	011b      	lsls	r3, r3, #4
 80044f6:	1a9b      	subs	r3, r3, r2
 80044f8:	009b      	lsls	r3, r3, #2
 80044fa:	440b      	add	r3, r1
 80044fc:	3344      	adds	r3, #68	@ 0x44
 80044fe:	2200      	movs	r2, #0
 8004500:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	78fa      	ldrb	r2, [r7, #3]
 8004508:	4611      	mov	r1, r2
 800450a:	4618      	mov	r0, r3
 800450c:	f005 fcbf 	bl	8009e8e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004510:	78fb      	ldrb	r3, [r7, #3]
 8004512:	015a      	lsls	r2, r3, #5
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	4413      	add	r3, r2
 8004518:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800451c:	461a      	mov	r2, r3
 800451e:	2340      	movs	r3, #64	@ 0x40
 8004520:	6093      	str	r3, [r2, #8]
 8004522:	e31f      	b.n	8004b64 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	78fa      	ldrb	r2, [r7, #3]
 800452a:	4611      	mov	r1, r2
 800452c:	4618      	mov	r0, r3
 800452e:	f004 ff0a 	bl	8009346 <USB_ReadChInterrupts>
 8004532:	4603      	mov	r3, r0
 8004534:	f003 0308 	and.w	r3, r3, #8
 8004538:	2b08      	cmp	r3, #8
 800453a:	d11a      	bne.n	8004572 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 800453c:	78fb      	ldrb	r3, [r7, #3]
 800453e:	015a      	lsls	r2, r3, #5
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	4413      	add	r3, r2
 8004544:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004548:	461a      	mov	r2, r3
 800454a:	2308      	movs	r3, #8
 800454c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800454e:	78fa      	ldrb	r2, [r7, #3]
 8004550:	6879      	ldr	r1, [r7, #4]
 8004552:	4613      	mov	r3, r2
 8004554:	011b      	lsls	r3, r3, #4
 8004556:	1a9b      	subs	r3, r3, r2
 8004558:	009b      	lsls	r3, r3, #2
 800455a:	440b      	add	r3, r1
 800455c:	334d      	adds	r3, #77	@ 0x4d
 800455e:	2206      	movs	r2, #6
 8004560:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	78fa      	ldrb	r2, [r7, #3]
 8004568:	4611      	mov	r1, r2
 800456a:	4618      	mov	r0, r3
 800456c:	f005 fc8f 	bl	8009e8e <USB_HC_Halt>
 8004570:	e2f8      	b.n	8004b64 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	78fa      	ldrb	r2, [r7, #3]
 8004578:	4611      	mov	r1, r2
 800457a:	4618      	mov	r0, r3
 800457c:	f004 fee3 	bl	8009346 <USB_ReadChInterrupts>
 8004580:	4603      	mov	r3, r0
 8004582:	f003 0310 	and.w	r3, r3, #16
 8004586:	2b10      	cmp	r3, #16
 8004588:	d144      	bne.n	8004614 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800458a:	78fa      	ldrb	r2, [r7, #3]
 800458c:	6879      	ldr	r1, [r7, #4]
 800458e:	4613      	mov	r3, r2
 8004590:	011b      	lsls	r3, r3, #4
 8004592:	1a9b      	subs	r3, r3, r2
 8004594:	009b      	lsls	r3, r3, #2
 8004596:	440b      	add	r3, r1
 8004598:	3344      	adds	r3, #68	@ 0x44
 800459a:	2200      	movs	r2, #0
 800459c:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 800459e:	78fa      	ldrb	r2, [r7, #3]
 80045a0:	6879      	ldr	r1, [r7, #4]
 80045a2:	4613      	mov	r3, r2
 80045a4:	011b      	lsls	r3, r3, #4
 80045a6:	1a9b      	subs	r3, r3, r2
 80045a8:	009b      	lsls	r3, r3, #2
 80045aa:	440b      	add	r3, r1
 80045ac:	334d      	adds	r3, #77	@ 0x4d
 80045ae:	2204      	movs	r2, #4
 80045b0:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 80045b2:	78fa      	ldrb	r2, [r7, #3]
 80045b4:	6879      	ldr	r1, [r7, #4]
 80045b6:	4613      	mov	r3, r2
 80045b8:	011b      	lsls	r3, r3, #4
 80045ba:	1a9b      	subs	r3, r3, r2
 80045bc:	009b      	lsls	r3, r3, #2
 80045be:	440b      	add	r3, r1
 80045c0:	3319      	adds	r3, #25
 80045c2:	781b      	ldrb	r3, [r3, #0]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d114      	bne.n	80045f2 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 80045c8:	78fa      	ldrb	r2, [r7, #3]
 80045ca:	6879      	ldr	r1, [r7, #4]
 80045cc:	4613      	mov	r3, r2
 80045ce:	011b      	lsls	r3, r3, #4
 80045d0:	1a9b      	subs	r3, r3, r2
 80045d2:	009b      	lsls	r3, r3, #2
 80045d4:	440b      	add	r3, r1
 80045d6:	3318      	adds	r3, #24
 80045d8:	781b      	ldrb	r3, [r3, #0]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d109      	bne.n	80045f2 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 80045de:	78fa      	ldrb	r2, [r7, #3]
 80045e0:	6879      	ldr	r1, [r7, #4]
 80045e2:	4613      	mov	r3, r2
 80045e4:	011b      	lsls	r3, r3, #4
 80045e6:	1a9b      	subs	r3, r3, r2
 80045e8:	009b      	lsls	r3, r3, #2
 80045ea:	440b      	add	r3, r1
 80045ec:	3319      	adds	r3, #25
 80045ee:	2201      	movs	r2, #1
 80045f0:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	78fa      	ldrb	r2, [r7, #3]
 80045f8:	4611      	mov	r1, r2
 80045fa:	4618      	mov	r0, r3
 80045fc:	f005 fc47 	bl	8009e8e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004600:	78fb      	ldrb	r3, [r7, #3]
 8004602:	015a      	lsls	r2, r3, #5
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	4413      	add	r3, r2
 8004608:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800460c:	461a      	mov	r2, r3
 800460e:	2310      	movs	r3, #16
 8004610:	6093      	str	r3, [r2, #8]
 8004612:	e2a7      	b.n	8004b64 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	78fa      	ldrb	r2, [r7, #3]
 800461a:	4611      	mov	r1, r2
 800461c:	4618      	mov	r0, r3
 800461e:	f004 fe92 	bl	8009346 <USB_ReadChInterrupts>
 8004622:	4603      	mov	r3, r0
 8004624:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004628:	2b80      	cmp	r3, #128	@ 0x80
 800462a:	f040 8083 	bne.w	8004734 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	799b      	ldrb	r3, [r3, #6]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d111      	bne.n	800465a <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8004636:	78fa      	ldrb	r2, [r7, #3]
 8004638:	6879      	ldr	r1, [r7, #4]
 800463a:	4613      	mov	r3, r2
 800463c:	011b      	lsls	r3, r3, #4
 800463e:	1a9b      	subs	r3, r3, r2
 8004640:	009b      	lsls	r3, r3, #2
 8004642:	440b      	add	r3, r1
 8004644:	334d      	adds	r3, #77	@ 0x4d
 8004646:	2207      	movs	r2, #7
 8004648:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	78fa      	ldrb	r2, [r7, #3]
 8004650:	4611      	mov	r1, r2
 8004652:	4618      	mov	r0, r3
 8004654:	f005 fc1b 	bl	8009e8e <USB_HC_Halt>
 8004658:	e062      	b.n	8004720 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 800465a:	78fa      	ldrb	r2, [r7, #3]
 800465c:	6879      	ldr	r1, [r7, #4]
 800465e:	4613      	mov	r3, r2
 8004660:	011b      	lsls	r3, r3, #4
 8004662:	1a9b      	subs	r3, r3, r2
 8004664:	009b      	lsls	r3, r3, #2
 8004666:	440b      	add	r3, r1
 8004668:	3344      	adds	r3, #68	@ 0x44
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	1c59      	adds	r1, r3, #1
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	4613      	mov	r3, r2
 8004672:	011b      	lsls	r3, r3, #4
 8004674:	1a9b      	subs	r3, r3, r2
 8004676:	009b      	lsls	r3, r3, #2
 8004678:	4403      	add	r3, r0
 800467a:	3344      	adds	r3, #68	@ 0x44
 800467c:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800467e:	78fa      	ldrb	r2, [r7, #3]
 8004680:	6879      	ldr	r1, [r7, #4]
 8004682:	4613      	mov	r3, r2
 8004684:	011b      	lsls	r3, r3, #4
 8004686:	1a9b      	subs	r3, r3, r2
 8004688:	009b      	lsls	r3, r3, #2
 800468a:	440b      	add	r3, r1
 800468c:	3344      	adds	r3, #68	@ 0x44
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	2b02      	cmp	r3, #2
 8004692:	d922      	bls.n	80046da <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004694:	78fa      	ldrb	r2, [r7, #3]
 8004696:	6879      	ldr	r1, [r7, #4]
 8004698:	4613      	mov	r3, r2
 800469a:	011b      	lsls	r3, r3, #4
 800469c:	1a9b      	subs	r3, r3, r2
 800469e:	009b      	lsls	r3, r3, #2
 80046a0:	440b      	add	r3, r1
 80046a2:	3344      	adds	r3, #68	@ 0x44
 80046a4:	2200      	movs	r2, #0
 80046a6:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80046a8:	78fa      	ldrb	r2, [r7, #3]
 80046aa:	6879      	ldr	r1, [r7, #4]
 80046ac:	4613      	mov	r3, r2
 80046ae:	011b      	lsls	r3, r3, #4
 80046b0:	1a9b      	subs	r3, r3, r2
 80046b2:	009b      	lsls	r3, r3, #2
 80046b4:	440b      	add	r3, r1
 80046b6:	334c      	adds	r3, #76	@ 0x4c
 80046b8:	2204      	movs	r2, #4
 80046ba:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80046bc:	78fa      	ldrb	r2, [r7, #3]
 80046be:	6879      	ldr	r1, [r7, #4]
 80046c0:	4613      	mov	r3, r2
 80046c2:	011b      	lsls	r3, r3, #4
 80046c4:	1a9b      	subs	r3, r3, r2
 80046c6:	009b      	lsls	r3, r3, #2
 80046c8:	440b      	add	r3, r1
 80046ca:	334c      	adds	r3, #76	@ 0x4c
 80046cc:	781a      	ldrb	r2, [r3, #0]
 80046ce:	78fb      	ldrb	r3, [r7, #3]
 80046d0:	4619      	mov	r1, r3
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f007 ff34 	bl	800c540 <HAL_HCD_HC_NotifyURBChange_Callback>
 80046d8:	e022      	b.n	8004720 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80046da:	78fa      	ldrb	r2, [r7, #3]
 80046dc:	6879      	ldr	r1, [r7, #4]
 80046de:	4613      	mov	r3, r2
 80046e0:	011b      	lsls	r3, r3, #4
 80046e2:	1a9b      	subs	r3, r3, r2
 80046e4:	009b      	lsls	r3, r3, #2
 80046e6:	440b      	add	r3, r1
 80046e8:	334c      	adds	r3, #76	@ 0x4c
 80046ea:	2202      	movs	r2, #2
 80046ec:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80046ee:	78fb      	ldrb	r3, [r7, #3]
 80046f0:	015a      	lsls	r2, r3, #5
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	4413      	add	r3, r2
 80046f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004704:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800470c:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800470e:	78fb      	ldrb	r3, [r7, #3]
 8004710:	015a      	lsls	r2, r3, #5
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	4413      	add	r3, r2
 8004716:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800471a:	461a      	mov	r2, r3
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8004720:	78fb      	ldrb	r3, [r7, #3]
 8004722:	015a      	lsls	r2, r3, #5
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	4413      	add	r3, r2
 8004728:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800472c:	461a      	mov	r2, r3
 800472e:	2380      	movs	r3, #128	@ 0x80
 8004730:	6093      	str	r3, [r2, #8]
 8004732:	e217      	b.n	8004b64 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	78fa      	ldrb	r2, [r7, #3]
 800473a:	4611      	mov	r1, r2
 800473c:	4618      	mov	r0, r3
 800473e:	f004 fe02 	bl	8009346 <USB_ReadChInterrupts>
 8004742:	4603      	mov	r3, r0
 8004744:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004748:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800474c:	d11b      	bne.n	8004786 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800474e:	78fa      	ldrb	r2, [r7, #3]
 8004750:	6879      	ldr	r1, [r7, #4]
 8004752:	4613      	mov	r3, r2
 8004754:	011b      	lsls	r3, r3, #4
 8004756:	1a9b      	subs	r3, r3, r2
 8004758:	009b      	lsls	r3, r3, #2
 800475a:	440b      	add	r3, r1
 800475c:	334d      	adds	r3, #77	@ 0x4d
 800475e:	2209      	movs	r2, #9
 8004760:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	78fa      	ldrb	r2, [r7, #3]
 8004768:	4611      	mov	r1, r2
 800476a:	4618      	mov	r0, r3
 800476c:	f005 fb8f 	bl	8009e8e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8004770:	78fb      	ldrb	r3, [r7, #3]
 8004772:	015a      	lsls	r2, r3, #5
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	4413      	add	r3, r2
 8004778:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800477c:	461a      	mov	r2, r3
 800477e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004782:	6093      	str	r3, [r2, #8]
 8004784:	e1ee      	b.n	8004b64 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	78fa      	ldrb	r2, [r7, #3]
 800478c:	4611      	mov	r1, r2
 800478e:	4618      	mov	r0, r3
 8004790:	f004 fdd9 	bl	8009346 <USB_ReadChInterrupts>
 8004794:	4603      	mov	r3, r0
 8004796:	f003 0302 	and.w	r3, r3, #2
 800479a:	2b02      	cmp	r3, #2
 800479c:	f040 81df 	bne.w	8004b5e <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80047a0:	78fb      	ldrb	r3, [r7, #3]
 80047a2:	015a      	lsls	r2, r3, #5
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	4413      	add	r3, r2
 80047a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80047ac:	461a      	mov	r2, r3
 80047ae:	2302      	movs	r3, #2
 80047b0:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80047b2:	78fa      	ldrb	r2, [r7, #3]
 80047b4:	6879      	ldr	r1, [r7, #4]
 80047b6:	4613      	mov	r3, r2
 80047b8:	011b      	lsls	r3, r3, #4
 80047ba:	1a9b      	subs	r3, r3, r2
 80047bc:	009b      	lsls	r3, r3, #2
 80047be:	440b      	add	r3, r1
 80047c0:	334d      	adds	r3, #77	@ 0x4d
 80047c2:	781b      	ldrb	r3, [r3, #0]
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	f040 8093 	bne.w	80048f0 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80047ca:	78fa      	ldrb	r2, [r7, #3]
 80047cc:	6879      	ldr	r1, [r7, #4]
 80047ce:	4613      	mov	r3, r2
 80047d0:	011b      	lsls	r3, r3, #4
 80047d2:	1a9b      	subs	r3, r3, r2
 80047d4:	009b      	lsls	r3, r3, #2
 80047d6:	440b      	add	r3, r1
 80047d8:	334d      	adds	r3, #77	@ 0x4d
 80047da:	2202      	movs	r2, #2
 80047dc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80047de:	78fa      	ldrb	r2, [r7, #3]
 80047e0:	6879      	ldr	r1, [r7, #4]
 80047e2:	4613      	mov	r3, r2
 80047e4:	011b      	lsls	r3, r3, #4
 80047e6:	1a9b      	subs	r3, r3, r2
 80047e8:	009b      	lsls	r3, r3, #2
 80047ea:	440b      	add	r3, r1
 80047ec:	334c      	adds	r3, #76	@ 0x4c
 80047ee:	2201      	movs	r2, #1
 80047f0:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80047f2:	78fa      	ldrb	r2, [r7, #3]
 80047f4:	6879      	ldr	r1, [r7, #4]
 80047f6:	4613      	mov	r3, r2
 80047f8:	011b      	lsls	r3, r3, #4
 80047fa:	1a9b      	subs	r3, r3, r2
 80047fc:	009b      	lsls	r3, r3, #2
 80047fe:	440b      	add	r3, r1
 8004800:	3326      	adds	r3, #38	@ 0x26
 8004802:	781b      	ldrb	r3, [r3, #0]
 8004804:	2b02      	cmp	r3, #2
 8004806:	d00b      	beq.n	8004820 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8004808:	78fa      	ldrb	r2, [r7, #3]
 800480a:	6879      	ldr	r1, [r7, #4]
 800480c:	4613      	mov	r3, r2
 800480e:	011b      	lsls	r3, r3, #4
 8004810:	1a9b      	subs	r3, r3, r2
 8004812:	009b      	lsls	r3, r3, #2
 8004814:	440b      	add	r3, r1
 8004816:	3326      	adds	r3, #38	@ 0x26
 8004818:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800481a:	2b03      	cmp	r3, #3
 800481c:	f040 8190 	bne.w	8004b40 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	799b      	ldrb	r3, [r3, #6]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d115      	bne.n	8004854 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8004828:	78fa      	ldrb	r2, [r7, #3]
 800482a:	6879      	ldr	r1, [r7, #4]
 800482c:	4613      	mov	r3, r2
 800482e:	011b      	lsls	r3, r3, #4
 8004830:	1a9b      	subs	r3, r3, r2
 8004832:	009b      	lsls	r3, r3, #2
 8004834:	440b      	add	r3, r1
 8004836:	333d      	adds	r3, #61	@ 0x3d
 8004838:	781b      	ldrb	r3, [r3, #0]
 800483a:	78fa      	ldrb	r2, [r7, #3]
 800483c:	f083 0301 	eor.w	r3, r3, #1
 8004840:	b2d8      	uxtb	r0, r3
 8004842:	6879      	ldr	r1, [r7, #4]
 8004844:	4613      	mov	r3, r2
 8004846:	011b      	lsls	r3, r3, #4
 8004848:	1a9b      	subs	r3, r3, r2
 800484a:	009b      	lsls	r3, r3, #2
 800484c:	440b      	add	r3, r1
 800484e:	333d      	adds	r3, #61	@ 0x3d
 8004850:	4602      	mov	r2, r0
 8004852:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	799b      	ldrb	r3, [r3, #6]
 8004858:	2b01      	cmp	r3, #1
 800485a:	f040 8171 	bne.w	8004b40 <HCD_HC_OUT_IRQHandler+0x954>
 800485e:	78fa      	ldrb	r2, [r7, #3]
 8004860:	6879      	ldr	r1, [r7, #4]
 8004862:	4613      	mov	r3, r2
 8004864:	011b      	lsls	r3, r3, #4
 8004866:	1a9b      	subs	r3, r3, r2
 8004868:	009b      	lsls	r3, r3, #2
 800486a:	440b      	add	r3, r1
 800486c:	3334      	adds	r3, #52	@ 0x34
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	2b00      	cmp	r3, #0
 8004872:	f000 8165 	beq.w	8004b40 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8004876:	78fa      	ldrb	r2, [r7, #3]
 8004878:	6879      	ldr	r1, [r7, #4]
 800487a:	4613      	mov	r3, r2
 800487c:	011b      	lsls	r3, r3, #4
 800487e:	1a9b      	subs	r3, r3, r2
 8004880:	009b      	lsls	r3, r3, #2
 8004882:	440b      	add	r3, r1
 8004884:	3334      	adds	r3, #52	@ 0x34
 8004886:	6819      	ldr	r1, [r3, #0]
 8004888:	78fa      	ldrb	r2, [r7, #3]
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	4613      	mov	r3, r2
 800488e:	011b      	lsls	r3, r3, #4
 8004890:	1a9b      	subs	r3, r3, r2
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	4403      	add	r3, r0
 8004896:	3328      	adds	r3, #40	@ 0x28
 8004898:	881b      	ldrh	r3, [r3, #0]
 800489a:	440b      	add	r3, r1
 800489c:	1e59      	subs	r1, r3, #1
 800489e:	78fa      	ldrb	r2, [r7, #3]
 80048a0:	6878      	ldr	r0, [r7, #4]
 80048a2:	4613      	mov	r3, r2
 80048a4:	011b      	lsls	r3, r3, #4
 80048a6:	1a9b      	subs	r3, r3, r2
 80048a8:	009b      	lsls	r3, r3, #2
 80048aa:	4403      	add	r3, r0
 80048ac:	3328      	adds	r3, #40	@ 0x28
 80048ae:	881b      	ldrh	r3, [r3, #0]
 80048b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80048b4:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	f003 0301 	and.w	r3, r3, #1
 80048bc:	2b00      	cmp	r3, #0
 80048be:	f000 813f 	beq.w	8004b40 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 80048c2:	78fa      	ldrb	r2, [r7, #3]
 80048c4:	6879      	ldr	r1, [r7, #4]
 80048c6:	4613      	mov	r3, r2
 80048c8:	011b      	lsls	r3, r3, #4
 80048ca:	1a9b      	subs	r3, r3, r2
 80048cc:	009b      	lsls	r3, r3, #2
 80048ce:	440b      	add	r3, r1
 80048d0:	333d      	adds	r3, #61	@ 0x3d
 80048d2:	781b      	ldrb	r3, [r3, #0]
 80048d4:	78fa      	ldrb	r2, [r7, #3]
 80048d6:	f083 0301 	eor.w	r3, r3, #1
 80048da:	b2d8      	uxtb	r0, r3
 80048dc:	6879      	ldr	r1, [r7, #4]
 80048de:	4613      	mov	r3, r2
 80048e0:	011b      	lsls	r3, r3, #4
 80048e2:	1a9b      	subs	r3, r3, r2
 80048e4:	009b      	lsls	r3, r3, #2
 80048e6:	440b      	add	r3, r1
 80048e8:	333d      	adds	r3, #61	@ 0x3d
 80048ea:	4602      	mov	r2, r0
 80048ec:	701a      	strb	r2, [r3, #0]
 80048ee:	e127      	b.n	8004b40 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80048f0:	78fa      	ldrb	r2, [r7, #3]
 80048f2:	6879      	ldr	r1, [r7, #4]
 80048f4:	4613      	mov	r3, r2
 80048f6:	011b      	lsls	r3, r3, #4
 80048f8:	1a9b      	subs	r3, r3, r2
 80048fa:	009b      	lsls	r3, r3, #2
 80048fc:	440b      	add	r3, r1
 80048fe:	334d      	adds	r3, #77	@ 0x4d
 8004900:	781b      	ldrb	r3, [r3, #0]
 8004902:	2b03      	cmp	r3, #3
 8004904:	d120      	bne.n	8004948 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004906:	78fa      	ldrb	r2, [r7, #3]
 8004908:	6879      	ldr	r1, [r7, #4]
 800490a:	4613      	mov	r3, r2
 800490c:	011b      	lsls	r3, r3, #4
 800490e:	1a9b      	subs	r3, r3, r2
 8004910:	009b      	lsls	r3, r3, #2
 8004912:	440b      	add	r3, r1
 8004914:	334d      	adds	r3, #77	@ 0x4d
 8004916:	2202      	movs	r2, #2
 8004918:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800491a:	78fa      	ldrb	r2, [r7, #3]
 800491c:	6879      	ldr	r1, [r7, #4]
 800491e:	4613      	mov	r3, r2
 8004920:	011b      	lsls	r3, r3, #4
 8004922:	1a9b      	subs	r3, r3, r2
 8004924:	009b      	lsls	r3, r3, #2
 8004926:	440b      	add	r3, r1
 8004928:	331b      	adds	r3, #27
 800492a:	781b      	ldrb	r3, [r3, #0]
 800492c:	2b01      	cmp	r3, #1
 800492e:	f040 8107 	bne.w	8004b40 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004932:	78fa      	ldrb	r2, [r7, #3]
 8004934:	6879      	ldr	r1, [r7, #4]
 8004936:	4613      	mov	r3, r2
 8004938:	011b      	lsls	r3, r3, #4
 800493a:	1a9b      	subs	r3, r3, r2
 800493c:	009b      	lsls	r3, r3, #2
 800493e:	440b      	add	r3, r1
 8004940:	334c      	adds	r3, #76	@ 0x4c
 8004942:	2202      	movs	r2, #2
 8004944:	701a      	strb	r2, [r3, #0]
 8004946:	e0fb      	b.n	8004b40 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8004948:	78fa      	ldrb	r2, [r7, #3]
 800494a:	6879      	ldr	r1, [r7, #4]
 800494c:	4613      	mov	r3, r2
 800494e:	011b      	lsls	r3, r3, #4
 8004950:	1a9b      	subs	r3, r3, r2
 8004952:	009b      	lsls	r3, r3, #2
 8004954:	440b      	add	r3, r1
 8004956:	334d      	adds	r3, #77	@ 0x4d
 8004958:	781b      	ldrb	r3, [r3, #0]
 800495a:	2b04      	cmp	r3, #4
 800495c:	d13a      	bne.n	80049d4 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800495e:	78fa      	ldrb	r2, [r7, #3]
 8004960:	6879      	ldr	r1, [r7, #4]
 8004962:	4613      	mov	r3, r2
 8004964:	011b      	lsls	r3, r3, #4
 8004966:	1a9b      	subs	r3, r3, r2
 8004968:	009b      	lsls	r3, r3, #2
 800496a:	440b      	add	r3, r1
 800496c:	334d      	adds	r3, #77	@ 0x4d
 800496e:	2202      	movs	r2, #2
 8004970:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004972:	78fa      	ldrb	r2, [r7, #3]
 8004974:	6879      	ldr	r1, [r7, #4]
 8004976:	4613      	mov	r3, r2
 8004978:	011b      	lsls	r3, r3, #4
 800497a:	1a9b      	subs	r3, r3, r2
 800497c:	009b      	lsls	r3, r3, #2
 800497e:	440b      	add	r3, r1
 8004980:	334c      	adds	r3, #76	@ 0x4c
 8004982:	2202      	movs	r2, #2
 8004984:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004986:	78fa      	ldrb	r2, [r7, #3]
 8004988:	6879      	ldr	r1, [r7, #4]
 800498a:	4613      	mov	r3, r2
 800498c:	011b      	lsls	r3, r3, #4
 800498e:	1a9b      	subs	r3, r3, r2
 8004990:	009b      	lsls	r3, r3, #2
 8004992:	440b      	add	r3, r1
 8004994:	331b      	adds	r3, #27
 8004996:	781b      	ldrb	r3, [r3, #0]
 8004998:	2b01      	cmp	r3, #1
 800499a:	f040 80d1 	bne.w	8004b40 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 800499e:	78fa      	ldrb	r2, [r7, #3]
 80049a0:	6879      	ldr	r1, [r7, #4]
 80049a2:	4613      	mov	r3, r2
 80049a4:	011b      	lsls	r3, r3, #4
 80049a6:	1a9b      	subs	r3, r3, r2
 80049a8:	009b      	lsls	r3, r3, #2
 80049aa:	440b      	add	r3, r1
 80049ac:	331b      	adds	r3, #27
 80049ae:	2200      	movs	r2, #0
 80049b0:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80049b2:	78fb      	ldrb	r3, [r7, #3]
 80049b4:	015a      	lsls	r2, r3, #5
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	4413      	add	r3, r2
 80049ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	78fa      	ldrb	r2, [r7, #3]
 80049c2:	0151      	lsls	r1, r2, #5
 80049c4:	693a      	ldr	r2, [r7, #16]
 80049c6:	440a      	add	r2, r1
 80049c8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80049cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80049d0:	6053      	str	r3, [r2, #4]
 80049d2:	e0b5      	b.n	8004b40 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80049d4:	78fa      	ldrb	r2, [r7, #3]
 80049d6:	6879      	ldr	r1, [r7, #4]
 80049d8:	4613      	mov	r3, r2
 80049da:	011b      	lsls	r3, r3, #4
 80049dc:	1a9b      	subs	r3, r3, r2
 80049de:	009b      	lsls	r3, r3, #2
 80049e0:	440b      	add	r3, r1
 80049e2:	334d      	adds	r3, #77	@ 0x4d
 80049e4:	781b      	ldrb	r3, [r3, #0]
 80049e6:	2b05      	cmp	r3, #5
 80049e8:	d114      	bne.n	8004a14 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80049ea:	78fa      	ldrb	r2, [r7, #3]
 80049ec:	6879      	ldr	r1, [r7, #4]
 80049ee:	4613      	mov	r3, r2
 80049f0:	011b      	lsls	r3, r3, #4
 80049f2:	1a9b      	subs	r3, r3, r2
 80049f4:	009b      	lsls	r3, r3, #2
 80049f6:	440b      	add	r3, r1
 80049f8:	334d      	adds	r3, #77	@ 0x4d
 80049fa:	2202      	movs	r2, #2
 80049fc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80049fe:	78fa      	ldrb	r2, [r7, #3]
 8004a00:	6879      	ldr	r1, [r7, #4]
 8004a02:	4613      	mov	r3, r2
 8004a04:	011b      	lsls	r3, r3, #4
 8004a06:	1a9b      	subs	r3, r3, r2
 8004a08:	009b      	lsls	r3, r3, #2
 8004a0a:	440b      	add	r3, r1
 8004a0c:	334c      	adds	r3, #76	@ 0x4c
 8004a0e:	2202      	movs	r2, #2
 8004a10:	701a      	strb	r2, [r3, #0]
 8004a12:	e095      	b.n	8004b40 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8004a14:	78fa      	ldrb	r2, [r7, #3]
 8004a16:	6879      	ldr	r1, [r7, #4]
 8004a18:	4613      	mov	r3, r2
 8004a1a:	011b      	lsls	r3, r3, #4
 8004a1c:	1a9b      	subs	r3, r3, r2
 8004a1e:	009b      	lsls	r3, r3, #2
 8004a20:	440b      	add	r3, r1
 8004a22:	334d      	adds	r3, #77	@ 0x4d
 8004a24:	781b      	ldrb	r3, [r3, #0]
 8004a26:	2b06      	cmp	r3, #6
 8004a28:	d114      	bne.n	8004a54 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004a2a:	78fa      	ldrb	r2, [r7, #3]
 8004a2c:	6879      	ldr	r1, [r7, #4]
 8004a2e:	4613      	mov	r3, r2
 8004a30:	011b      	lsls	r3, r3, #4
 8004a32:	1a9b      	subs	r3, r3, r2
 8004a34:	009b      	lsls	r3, r3, #2
 8004a36:	440b      	add	r3, r1
 8004a38:	334d      	adds	r3, #77	@ 0x4d
 8004a3a:	2202      	movs	r2, #2
 8004a3c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8004a3e:	78fa      	ldrb	r2, [r7, #3]
 8004a40:	6879      	ldr	r1, [r7, #4]
 8004a42:	4613      	mov	r3, r2
 8004a44:	011b      	lsls	r3, r3, #4
 8004a46:	1a9b      	subs	r3, r3, r2
 8004a48:	009b      	lsls	r3, r3, #2
 8004a4a:	440b      	add	r3, r1
 8004a4c:	334c      	adds	r3, #76	@ 0x4c
 8004a4e:	2205      	movs	r2, #5
 8004a50:	701a      	strb	r2, [r3, #0]
 8004a52:	e075      	b.n	8004b40 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004a54:	78fa      	ldrb	r2, [r7, #3]
 8004a56:	6879      	ldr	r1, [r7, #4]
 8004a58:	4613      	mov	r3, r2
 8004a5a:	011b      	lsls	r3, r3, #4
 8004a5c:	1a9b      	subs	r3, r3, r2
 8004a5e:	009b      	lsls	r3, r3, #2
 8004a60:	440b      	add	r3, r1
 8004a62:	334d      	adds	r3, #77	@ 0x4d
 8004a64:	781b      	ldrb	r3, [r3, #0]
 8004a66:	2b07      	cmp	r3, #7
 8004a68:	d00a      	beq.n	8004a80 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8004a6a:	78fa      	ldrb	r2, [r7, #3]
 8004a6c:	6879      	ldr	r1, [r7, #4]
 8004a6e:	4613      	mov	r3, r2
 8004a70:	011b      	lsls	r3, r3, #4
 8004a72:	1a9b      	subs	r3, r3, r2
 8004a74:	009b      	lsls	r3, r3, #2
 8004a76:	440b      	add	r3, r1
 8004a78:	334d      	adds	r3, #77	@ 0x4d
 8004a7a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004a7c:	2b09      	cmp	r3, #9
 8004a7e:	d170      	bne.n	8004b62 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004a80:	78fa      	ldrb	r2, [r7, #3]
 8004a82:	6879      	ldr	r1, [r7, #4]
 8004a84:	4613      	mov	r3, r2
 8004a86:	011b      	lsls	r3, r3, #4
 8004a88:	1a9b      	subs	r3, r3, r2
 8004a8a:	009b      	lsls	r3, r3, #2
 8004a8c:	440b      	add	r3, r1
 8004a8e:	334d      	adds	r3, #77	@ 0x4d
 8004a90:	2202      	movs	r2, #2
 8004a92:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004a94:	78fa      	ldrb	r2, [r7, #3]
 8004a96:	6879      	ldr	r1, [r7, #4]
 8004a98:	4613      	mov	r3, r2
 8004a9a:	011b      	lsls	r3, r3, #4
 8004a9c:	1a9b      	subs	r3, r3, r2
 8004a9e:	009b      	lsls	r3, r3, #2
 8004aa0:	440b      	add	r3, r1
 8004aa2:	3344      	adds	r3, #68	@ 0x44
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	1c59      	adds	r1, r3, #1
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	4613      	mov	r3, r2
 8004aac:	011b      	lsls	r3, r3, #4
 8004aae:	1a9b      	subs	r3, r3, r2
 8004ab0:	009b      	lsls	r3, r3, #2
 8004ab2:	4403      	add	r3, r0
 8004ab4:	3344      	adds	r3, #68	@ 0x44
 8004ab6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004ab8:	78fa      	ldrb	r2, [r7, #3]
 8004aba:	6879      	ldr	r1, [r7, #4]
 8004abc:	4613      	mov	r3, r2
 8004abe:	011b      	lsls	r3, r3, #4
 8004ac0:	1a9b      	subs	r3, r3, r2
 8004ac2:	009b      	lsls	r3, r3, #2
 8004ac4:	440b      	add	r3, r1
 8004ac6:	3344      	adds	r3, #68	@ 0x44
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	2b02      	cmp	r3, #2
 8004acc:	d914      	bls.n	8004af8 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004ace:	78fa      	ldrb	r2, [r7, #3]
 8004ad0:	6879      	ldr	r1, [r7, #4]
 8004ad2:	4613      	mov	r3, r2
 8004ad4:	011b      	lsls	r3, r3, #4
 8004ad6:	1a9b      	subs	r3, r3, r2
 8004ad8:	009b      	lsls	r3, r3, #2
 8004ada:	440b      	add	r3, r1
 8004adc:	3344      	adds	r3, #68	@ 0x44
 8004ade:	2200      	movs	r2, #0
 8004ae0:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004ae2:	78fa      	ldrb	r2, [r7, #3]
 8004ae4:	6879      	ldr	r1, [r7, #4]
 8004ae6:	4613      	mov	r3, r2
 8004ae8:	011b      	lsls	r3, r3, #4
 8004aea:	1a9b      	subs	r3, r3, r2
 8004aec:	009b      	lsls	r3, r3, #2
 8004aee:	440b      	add	r3, r1
 8004af0:	334c      	adds	r3, #76	@ 0x4c
 8004af2:	2204      	movs	r2, #4
 8004af4:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004af6:	e022      	b.n	8004b3e <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004af8:	78fa      	ldrb	r2, [r7, #3]
 8004afa:	6879      	ldr	r1, [r7, #4]
 8004afc:	4613      	mov	r3, r2
 8004afe:	011b      	lsls	r3, r3, #4
 8004b00:	1a9b      	subs	r3, r3, r2
 8004b02:	009b      	lsls	r3, r3, #2
 8004b04:	440b      	add	r3, r1
 8004b06:	334c      	adds	r3, #76	@ 0x4c
 8004b08:	2202      	movs	r2, #2
 8004b0a:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004b0c:	78fb      	ldrb	r3, [r7, #3]
 8004b0e:	015a      	lsls	r2, r3, #5
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	4413      	add	r3, r2
 8004b14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004b22:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004b2a:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004b2c:	78fb      	ldrb	r3, [r7, #3]
 8004b2e:	015a      	lsls	r2, r3, #5
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	4413      	add	r3, r2
 8004b34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b38:	461a      	mov	r2, r3
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004b3e:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004b40:	78fa      	ldrb	r2, [r7, #3]
 8004b42:	6879      	ldr	r1, [r7, #4]
 8004b44:	4613      	mov	r3, r2
 8004b46:	011b      	lsls	r3, r3, #4
 8004b48:	1a9b      	subs	r3, r3, r2
 8004b4a:	009b      	lsls	r3, r3, #2
 8004b4c:	440b      	add	r3, r1
 8004b4e:	334c      	adds	r3, #76	@ 0x4c
 8004b50:	781a      	ldrb	r2, [r3, #0]
 8004b52:	78fb      	ldrb	r3, [r7, #3]
 8004b54:	4619      	mov	r1, r3
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f007 fcf2 	bl	800c540 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004b5c:	e002      	b.n	8004b64 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8004b5e:	bf00      	nop
 8004b60:	e000      	b.n	8004b64 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8004b62:	bf00      	nop
  }
}
 8004b64:	3718      	adds	r7, #24
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}

08004b6a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004b6a:	b580      	push	{r7, lr}
 8004b6c:	b08a      	sub	sp, #40	@ 0x28
 8004b6e:	af00      	add	r7, sp, #0
 8004b70:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b7a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	6a1b      	ldr	r3, [r3, #32]
 8004b82:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004b84:	69fb      	ldr	r3, [r7, #28]
 8004b86:	f003 030f 	and.w	r3, r3, #15
 8004b8a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004b8c:	69fb      	ldr	r3, [r7, #28]
 8004b8e:	0c5b      	lsrs	r3, r3, #17
 8004b90:	f003 030f 	and.w	r3, r3, #15
 8004b94:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004b96:	69fb      	ldr	r3, [r7, #28]
 8004b98:	091b      	lsrs	r3, r3, #4
 8004b9a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004b9e:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	2b02      	cmp	r3, #2
 8004ba4:	d004      	beq.n	8004bb0 <HCD_RXQLVL_IRQHandler+0x46>
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	2b05      	cmp	r3, #5
 8004baa:	f000 80b6 	beq.w	8004d1a <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004bae:	e0b7      	b.n	8004d20 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	f000 80b3 	beq.w	8004d1e <HCD_RXQLVL_IRQHandler+0x1b4>
 8004bb8:	6879      	ldr	r1, [r7, #4]
 8004bba:	69ba      	ldr	r2, [r7, #24]
 8004bbc:	4613      	mov	r3, r2
 8004bbe:	011b      	lsls	r3, r3, #4
 8004bc0:	1a9b      	subs	r3, r3, r2
 8004bc2:	009b      	lsls	r3, r3, #2
 8004bc4:	440b      	add	r3, r1
 8004bc6:	332c      	adds	r3, #44	@ 0x2c
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	f000 80a7 	beq.w	8004d1e <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8004bd0:	6879      	ldr	r1, [r7, #4]
 8004bd2:	69ba      	ldr	r2, [r7, #24]
 8004bd4:	4613      	mov	r3, r2
 8004bd6:	011b      	lsls	r3, r3, #4
 8004bd8:	1a9b      	subs	r3, r3, r2
 8004bda:	009b      	lsls	r3, r3, #2
 8004bdc:	440b      	add	r3, r1
 8004bde:	3338      	adds	r3, #56	@ 0x38
 8004be0:	681a      	ldr	r2, [r3, #0]
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	18d1      	adds	r1, r2, r3
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	69ba      	ldr	r2, [r7, #24]
 8004bea:	4613      	mov	r3, r2
 8004bec:	011b      	lsls	r3, r3, #4
 8004bee:	1a9b      	subs	r3, r3, r2
 8004bf0:	009b      	lsls	r3, r3, #2
 8004bf2:	4403      	add	r3, r0
 8004bf4:	3334      	adds	r3, #52	@ 0x34
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4299      	cmp	r1, r3
 8004bfa:	f200 8083 	bhi.w	8004d04 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6818      	ldr	r0, [r3, #0]
 8004c02:	6879      	ldr	r1, [r7, #4]
 8004c04:	69ba      	ldr	r2, [r7, #24]
 8004c06:	4613      	mov	r3, r2
 8004c08:	011b      	lsls	r3, r3, #4
 8004c0a:	1a9b      	subs	r3, r3, r2
 8004c0c:	009b      	lsls	r3, r3, #2
 8004c0e:	440b      	add	r3, r1
 8004c10:	332c      	adds	r3, #44	@ 0x2c
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	693a      	ldr	r2, [r7, #16]
 8004c16:	b292      	uxth	r2, r2
 8004c18:	4619      	mov	r1, r3
 8004c1a:	f004 fb29 	bl	8009270 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8004c1e:	6879      	ldr	r1, [r7, #4]
 8004c20:	69ba      	ldr	r2, [r7, #24]
 8004c22:	4613      	mov	r3, r2
 8004c24:	011b      	lsls	r3, r3, #4
 8004c26:	1a9b      	subs	r3, r3, r2
 8004c28:	009b      	lsls	r3, r3, #2
 8004c2a:	440b      	add	r3, r1
 8004c2c:	332c      	adds	r3, #44	@ 0x2c
 8004c2e:	681a      	ldr	r2, [r3, #0]
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	18d1      	adds	r1, r2, r3
 8004c34:	6878      	ldr	r0, [r7, #4]
 8004c36:	69ba      	ldr	r2, [r7, #24]
 8004c38:	4613      	mov	r3, r2
 8004c3a:	011b      	lsls	r3, r3, #4
 8004c3c:	1a9b      	subs	r3, r3, r2
 8004c3e:	009b      	lsls	r3, r3, #2
 8004c40:	4403      	add	r3, r0
 8004c42:	332c      	adds	r3, #44	@ 0x2c
 8004c44:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8004c46:	6879      	ldr	r1, [r7, #4]
 8004c48:	69ba      	ldr	r2, [r7, #24]
 8004c4a:	4613      	mov	r3, r2
 8004c4c:	011b      	lsls	r3, r3, #4
 8004c4e:	1a9b      	subs	r3, r3, r2
 8004c50:	009b      	lsls	r3, r3, #2
 8004c52:	440b      	add	r3, r1
 8004c54:	3338      	adds	r3, #56	@ 0x38
 8004c56:	681a      	ldr	r2, [r3, #0]
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	18d1      	adds	r1, r2, r3
 8004c5c:	6878      	ldr	r0, [r7, #4]
 8004c5e:	69ba      	ldr	r2, [r7, #24]
 8004c60:	4613      	mov	r3, r2
 8004c62:	011b      	lsls	r3, r3, #4
 8004c64:	1a9b      	subs	r3, r3, r2
 8004c66:	009b      	lsls	r3, r3, #2
 8004c68:	4403      	add	r3, r0
 8004c6a:	3338      	adds	r3, #56	@ 0x38
 8004c6c:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004c6e:	69bb      	ldr	r3, [r7, #24]
 8004c70:	015a      	lsls	r2, r3, #5
 8004c72:	6a3b      	ldr	r3, [r7, #32]
 8004c74:	4413      	add	r3, r2
 8004c76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c7a:	691b      	ldr	r3, [r3, #16]
 8004c7c:	0cdb      	lsrs	r3, r3, #19
 8004c7e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c82:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004c84:	6879      	ldr	r1, [r7, #4]
 8004c86:	69ba      	ldr	r2, [r7, #24]
 8004c88:	4613      	mov	r3, r2
 8004c8a:	011b      	lsls	r3, r3, #4
 8004c8c:	1a9b      	subs	r3, r3, r2
 8004c8e:	009b      	lsls	r3, r3, #2
 8004c90:	440b      	add	r3, r1
 8004c92:	3328      	adds	r3, #40	@ 0x28
 8004c94:	881b      	ldrh	r3, [r3, #0]
 8004c96:	461a      	mov	r2, r3
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d13f      	bne.n	8004d1e <HCD_RXQLVL_IRQHandler+0x1b4>
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d03c      	beq.n	8004d1e <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8004ca4:	69bb      	ldr	r3, [r7, #24]
 8004ca6:	015a      	lsls	r2, r3, #5
 8004ca8:	6a3b      	ldr	r3, [r7, #32]
 8004caa:	4413      	add	r3, r2
 8004cac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004cba:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004cc2:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8004cc4:	69bb      	ldr	r3, [r7, #24]
 8004cc6:	015a      	lsls	r2, r3, #5
 8004cc8:	6a3b      	ldr	r3, [r7, #32]
 8004cca:	4413      	add	r3, r2
 8004ccc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004cd0:	461a      	mov	r2, r3
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8004cd6:	6879      	ldr	r1, [r7, #4]
 8004cd8:	69ba      	ldr	r2, [r7, #24]
 8004cda:	4613      	mov	r3, r2
 8004cdc:	011b      	lsls	r3, r3, #4
 8004cde:	1a9b      	subs	r3, r3, r2
 8004ce0:	009b      	lsls	r3, r3, #2
 8004ce2:	440b      	add	r3, r1
 8004ce4:	333c      	adds	r3, #60	@ 0x3c
 8004ce6:	781b      	ldrb	r3, [r3, #0]
 8004ce8:	f083 0301 	eor.w	r3, r3, #1
 8004cec:	b2d8      	uxtb	r0, r3
 8004cee:	6879      	ldr	r1, [r7, #4]
 8004cf0:	69ba      	ldr	r2, [r7, #24]
 8004cf2:	4613      	mov	r3, r2
 8004cf4:	011b      	lsls	r3, r3, #4
 8004cf6:	1a9b      	subs	r3, r3, r2
 8004cf8:	009b      	lsls	r3, r3, #2
 8004cfa:	440b      	add	r3, r1
 8004cfc:	333c      	adds	r3, #60	@ 0x3c
 8004cfe:	4602      	mov	r2, r0
 8004d00:	701a      	strb	r2, [r3, #0]
      break;
 8004d02:	e00c      	b.n	8004d1e <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8004d04:	6879      	ldr	r1, [r7, #4]
 8004d06:	69ba      	ldr	r2, [r7, #24]
 8004d08:	4613      	mov	r3, r2
 8004d0a:	011b      	lsls	r3, r3, #4
 8004d0c:	1a9b      	subs	r3, r3, r2
 8004d0e:	009b      	lsls	r3, r3, #2
 8004d10:	440b      	add	r3, r1
 8004d12:	334c      	adds	r3, #76	@ 0x4c
 8004d14:	2204      	movs	r2, #4
 8004d16:	701a      	strb	r2, [r3, #0]
      break;
 8004d18:	e001      	b.n	8004d1e <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8004d1a:	bf00      	nop
 8004d1c:	e000      	b.n	8004d20 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8004d1e:	bf00      	nop
  }
}
 8004d20:	bf00      	nop
 8004d22:	3728      	adds	r7, #40	@ 0x28
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}

08004d28 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b086      	sub	sp, #24
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8004d54:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	f003 0302 	and.w	r3, r3, #2
 8004d5c:	2b02      	cmp	r3, #2
 8004d5e:	d10b      	bne.n	8004d78 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	f003 0301 	and.w	r3, r3, #1
 8004d66:	2b01      	cmp	r3, #1
 8004d68:	d102      	bne.n	8004d70 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f007 fbcc 	bl	800c508 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	f043 0302 	orr.w	r3, r3, #2
 8004d76:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	f003 0308 	and.w	r3, r3, #8
 8004d7e:	2b08      	cmp	r3, #8
 8004d80:	d132      	bne.n	8004de8 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	f043 0308 	orr.w	r3, r3, #8
 8004d88:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	f003 0304 	and.w	r3, r3, #4
 8004d90:	2b04      	cmp	r3, #4
 8004d92:	d126      	bne.n	8004de2 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	7a5b      	ldrb	r3, [r3, #9]
 8004d98:	2b02      	cmp	r3, #2
 8004d9a:	d113      	bne.n	8004dc4 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8004da2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004da6:	d106      	bne.n	8004db6 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	2102      	movs	r1, #2
 8004dae:	4618      	mov	r0, r3
 8004db0:	f004 fbee 	bl	8009590 <USB_InitFSLSPClkSel>
 8004db4:	e011      	b.n	8004dda <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	2101      	movs	r1, #1
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f004 fbe7 	bl	8009590 <USB_InitFSLSPClkSel>
 8004dc2:	e00a      	b.n	8004dda <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	79db      	ldrb	r3, [r3, #7]
 8004dc8:	2b01      	cmp	r3, #1
 8004dca:	d106      	bne.n	8004dda <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004dd2:	461a      	mov	r2, r3
 8004dd4:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8004dd8:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f007 fbbe 	bl	800c55c <HAL_HCD_PortEnabled_Callback>
 8004de0:	e002      	b.n	8004de8 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f007 fbc8 	bl	800c578 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	f003 0320 	and.w	r3, r3, #32
 8004dee:	2b20      	cmp	r3, #32
 8004df0:	d103      	bne.n	8004dfa <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	f043 0320 	orr.w	r3, r3, #32
 8004df8:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004e00:	461a      	mov	r2, r3
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	6013      	str	r3, [r2, #0]
}
 8004e06:	bf00      	nop
 8004e08:	3718      	adds	r7, #24
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}
	...

08004e10 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b084      	sub	sp, #16
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d101      	bne.n	8004e22 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e1ba      	b.n	8005198 <HAL_I2C_Init+0x388>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a9d      	ldr	r2, [pc, #628]	@ (800509c <HAL_I2C_Init+0x28c>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d00e      	beq.n	8004e4a <HAL_I2C_Init+0x3a>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a9b      	ldr	r2, [pc, #620]	@ (80050a0 <HAL_I2C_Init+0x290>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d009      	beq.n	8004e4a <HAL_I2C_Init+0x3a>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a9a      	ldr	r2, [pc, #616]	@ (80050a4 <HAL_I2C_Init+0x294>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d004      	beq.n	8004e4a <HAL_I2C_Init+0x3a>
 8004e40:	f240 11c9 	movw	r1, #457	@ 0x1c9
 8004e44:	4898      	ldr	r0, [pc, #608]	@ (80050a8 <HAL_I2C_Init+0x298>)
 8004e46:	f7fb fe4d 	bl	8000ae4 <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d004      	beq.n	8004e5c <HAL_I2C_Init+0x4c>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	4a95      	ldr	r2, [pc, #596]	@ (80050ac <HAL_I2C_Init+0x29c>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d904      	bls.n	8004e66 <HAL_I2C_Init+0x56>
 8004e5c:	f44f 71e5 	mov.w	r1, #458	@ 0x1ca
 8004e60:	4891      	ldr	r0, [pc, #580]	@ (80050a8 <HAL_I2C_Init+0x298>)
 8004e62:	f7fb fe3f 	bl	8000ae4 <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	689b      	ldr	r3, [r3, #8]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d009      	beq.n	8004e82 <HAL_I2C_Init+0x72>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004e76:	d004      	beq.n	8004e82 <HAL_I2C_Init+0x72>
 8004e78:	f240 11cb 	movw	r1, #459	@ 0x1cb
 8004e7c:	488a      	ldr	r0, [pc, #552]	@ (80050a8 <HAL_I2C_Init+0x298>)
 8004e7e:	f7fb fe31 	bl	8000ae4 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	68db      	ldr	r3, [r3, #12]
 8004e86:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e8a:	d304      	bcc.n	8004e96 <HAL_I2C_Init+0x86>
 8004e8c:	f44f 71e6 	mov.w	r1, #460	@ 0x1cc
 8004e90:	4885      	ldr	r0, [pc, #532]	@ (80050a8 <HAL_I2C_Init+0x298>)
 8004e92:	f7fb fe27 	bl	8000ae4 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	691b      	ldr	r3, [r3, #16]
 8004e9a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004e9e:	d009      	beq.n	8004eb4 <HAL_I2C_Init+0xa4>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	691b      	ldr	r3, [r3, #16]
 8004ea4:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004ea8:	d004      	beq.n	8004eb4 <HAL_I2C_Init+0xa4>
 8004eaa:	f240 11cd 	movw	r1, #461	@ 0x1cd
 8004eae:	487e      	ldr	r0, [pc, #504]	@ (80050a8 <HAL_I2C_Init+0x298>)
 8004eb0:	f7fb fe18 	bl	8000ae4 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	695b      	ldr	r3, [r3, #20]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d008      	beq.n	8004ece <HAL_I2C_Init+0xbe>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	695b      	ldr	r3, [r3, #20]
 8004ec0:	2b01      	cmp	r3, #1
 8004ec2:	d004      	beq.n	8004ece <HAL_I2C_Init+0xbe>
 8004ec4:	f44f 71e7 	mov.w	r1, #462	@ 0x1ce
 8004ec8:	4877      	ldr	r0, [pc, #476]	@ (80050a8 <HAL_I2C_Init+0x298>)
 8004eca:	f7fb fe0b 	bl	8000ae4 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	699b      	ldr	r3, [r3, #24]
 8004ed2:	f023 03fe 	bic.w	r3, r3, #254	@ 0xfe
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d004      	beq.n	8004ee4 <HAL_I2C_Init+0xd4>
 8004eda:	f240 11cf 	movw	r1, #463	@ 0x1cf
 8004ede:	4872      	ldr	r0, [pc, #456]	@ (80050a8 <HAL_I2C_Init+0x298>)
 8004ee0:	f7fb fe00 	bl	8000ae4 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	69db      	ldr	r3, [r3, #28]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d008      	beq.n	8004efe <HAL_I2C_Init+0xee>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	69db      	ldr	r3, [r3, #28]
 8004ef0:	2b40      	cmp	r3, #64	@ 0x40
 8004ef2:	d004      	beq.n	8004efe <HAL_I2C_Init+0xee>
 8004ef4:	f44f 71e8 	mov.w	r1, #464	@ 0x1d0
 8004ef8:	486b      	ldr	r0, [pc, #428]	@ (80050a8 <HAL_I2C_Init+0x298>)
 8004efa:	f7fb fdf3 	bl	8000ae4 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6a1b      	ldr	r3, [r3, #32]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d008      	beq.n	8004f18 <HAL_I2C_Init+0x108>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6a1b      	ldr	r3, [r3, #32]
 8004f0a:	2b80      	cmp	r3, #128	@ 0x80
 8004f0c:	d004      	beq.n	8004f18 <HAL_I2C_Init+0x108>
 8004f0e:	f240 11d1 	movw	r1, #465	@ 0x1d1
 8004f12:	4865      	ldr	r0, [pc, #404]	@ (80050a8 <HAL_I2C_Init+0x298>)
 8004f14:	f7fb fde6 	bl	8000ae4 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f1e:	b2db      	uxtb	r3, r3
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d106      	bne.n	8004f32 <HAL_I2C_Init+0x122>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2200      	movs	r2, #0
 8004f28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004f2c:	6878      	ldr	r0, [r7, #4]
 8004f2e:	f7fb fce1 	bl	80008f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2224      	movs	r2, #36	@ 0x24
 8004f36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	681a      	ldr	r2, [r3, #0]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f022 0201 	bic.w	r2, r2, #1
 8004f48:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004f58:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	681a      	ldr	r2, [r3, #0]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004f68:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004f6a:	f001 fc2d 	bl	80067c8 <HAL_RCC_GetPCLK1Freq>
 8004f6e:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	4a4e      	ldr	r2, [pc, #312]	@ (80050b0 <HAL_I2C_Init+0x2a0>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d807      	bhi.n	8004f8a <HAL_I2C_Init+0x17a>
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	4a4d      	ldr	r2, [pc, #308]	@ (80050b4 <HAL_I2C_Init+0x2a4>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	bf94      	ite	ls
 8004f82:	2301      	movls	r3, #1
 8004f84:	2300      	movhi	r3, #0
 8004f86:	b2db      	uxtb	r3, r3
 8004f88:	e006      	b.n	8004f98 <HAL_I2C_Init+0x188>
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	4a4a      	ldr	r2, [pc, #296]	@ (80050b8 <HAL_I2C_Init+0x2a8>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	bf94      	ite	ls
 8004f92:	2301      	movls	r3, #1
 8004f94:	2300      	movhi	r3, #0
 8004f96:	b2db      	uxtb	r3, r3
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d001      	beq.n	8004fa0 <HAL_I2C_Init+0x190>
  {
    return HAL_ERROR;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	e0fb      	b.n	8005198 <HAL_I2C_Init+0x388>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	4a46      	ldr	r2, [pc, #280]	@ (80050bc <HAL_I2C_Init+0x2ac>)
 8004fa4:	fba2 2303 	umull	r2, r3, r2, r3
 8004fa8:	0c9b      	lsrs	r3, r3, #18
 8004faa:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	68ba      	ldr	r2, [r7, #8]
 8004fbc:	430a      	orrs	r2, r1
 8004fbe:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	6a1b      	ldr	r3, [r3, #32]
 8004fc6:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	4a38      	ldr	r2, [pc, #224]	@ (80050b0 <HAL_I2C_Init+0x2a0>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d802      	bhi.n	8004fda <HAL_I2C_Init+0x1ca>
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	3301      	adds	r3, #1
 8004fd8:	e009      	b.n	8004fee <HAL_I2C_Init+0x1de>
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004fe0:	fb02 f303 	mul.w	r3, r2, r3
 8004fe4:	4a36      	ldr	r2, [pc, #216]	@ (80050c0 <HAL_I2C_Init+0x2b0>)
 8004fe6:	fba2 2303 	umull	r2, r3, r2, r3
 8004fea:	099b      	lsrs	r3, r3, #6
 8004fec:	3301      	adds	r3, #1
 8004fee:	687a      	ldr	r2, [r7, #4]
 8004ff0:	6812      	ldr	r2, [r2, #0]
 8004ff2:	430b      	orrs	r3, r1
 8004ff4:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	69db      	ldr	r3, [r3, #28]
 8004ffc:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005000:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	4929      	ldr	r1, [pc, #164]	@ (80050b0 <HAL_I2C_Init+0x2a0>)
 800500a:	428b      	cmp	r3, r1
 800500c:	d819      	bhi.n	8005042 <HAL_I2C_Init+0x232>
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	1e59      	subs	r1, r3, #1
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	005b      	lsls	r3, r3, #1
 8005018:	fbb1 f3f3 	udiv	r3, r1, r3
 800501c:	1c59      	adds	r1, r3, #1
 800501e:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005022:	400b      	ands	r3, r1
 8005024:	2b00      	cmp	r3, #0
 8005026:	d00a      	beq.n	800503e <HAL_I2C_Init+0x22e>
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	1e59      	subs	r1, r3, #1
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	005b      	lsls	r3, r3, #1
 8005032:	fbb1 f3f3 	udiv	r3, r1, r3
 8005036:	3301      	adds	r3, #1
 8005038:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800503c:	e065      	b.n	800510a <HAL_I2C_Init+0x2fa>
 800503e:	2304      	movs	r3, #4
 8005040:	e063      	b.n	800510a <HAL_I2C_Init+0x2fa>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d111      	bne.n	800506e <HAL_I2C_Init+0x25e>
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	1e58      	subs	r0, r3, #1
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6859      	ldr	r1, [r3, #4]
 8005052:	460b      	mov	r3, r1
 8005054:	005b      	lsls	r3, r3, #1
 8005056:	440b      	add	r3, r1
 8005058:	fbb0 f3f3 	udiv	r3, r0, r3
 800505c:	3301      	adds	r3, #1
 800505e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005062:	2b00      	cmp	r3, #0
 8005064:	bf0c      	ite	eq
 8005066:	2301      	moveq	r3, #1
 8005068:	2300      	movne	r3, #0
 800506a:	b2db      	uxtb	r3, r3
 800506c:	e012      	b.n	8005094 <HAL_I2C_Init+0x284>
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	1e58      	subs	r0, r3, #1
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6859      	ldr	r1, [r3, #4]
 8005076:	460b      	mov	r3, r1
 8005078:	009b      	lsls	r3, r3, #2
 800507a:	440b      	add	r3, r1
 800507c:	0099      	lsls	r1, r3, #2
 800507e:	440b      	add	r3, r1
 8005080:	fbb0 f3f3 	udiv	r3, r0, r3
 8005084:	3301      	adds	r3, #1
 8005086:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800508a:	2b00      	cmp	r3, #0
 800508c:	bf0c      	ite	eq
 800508e:	2301      	moveq	r3, #1
 8005090:	2300      	movne	r3, #0
 8005092:	b2db      	uxtb	r3, r3
 8005094:	2b00      	cmp	r3, #0
 8005096:	d015      	beq.n	80050c4 <HAL_I2C_Init+0x2b4>
 8005098:	2301      	movs	r3, #1
 800509a:	e036      	b.n	800510a <HAL_I2C_Init+0x2fa>
 800509c:	40005400 	.word	0x40005400
 80050a0:	40005800 	.word	0x40005800
 80050a4:	40005c00 	.word	0x40005c00
 80050a8:	0800cf30 	.word	0x0800cf30
 80050ac:	00061a80 	.word	0x00061a80
 80050b0:	000186a0 	.word	0x000186a0
 80050b4:	001e847f 	.word	0x001e847f
 80050b8:	003d08ff 	.word	0x003d08ff
 80050bc:	431bde83 	.word	0x431bde83
 80050c0:	10624dd3 	.word	0x10624dd3
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	689b      	ldr	r3, [r3, #8]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d10e      	bne.n	80050ea <HAL_I2C_Init+0x2da>
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	1e58      	subs	r0, r3, #1
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6859      	ldr	r1, [r3, #4]
 80050d4:	460b      	mov	r3, r1
 80050d6:	005b      	lsls	r3, r3, #1
 80050d8:	440b      	add	r3, r1
 80050da:	fbb0 f3f3 	udiv	r3, r0, r3
 80050de:	3301      	adds	r3, #1
 80050e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80050e8:	e00f      	b.n	800510a <HAL_I2C_Init+0x2fa>
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	1e58      	subs	r0, r3, #1
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6859      	ldr	r1, [r3, #4]
 80050f2:	460b      	mov	r3, r1
 80050f4:	009b      	lsls	r3, r3, #2
 80050f6:	440b      	add	r3, r1
 80050f8:	0099      	lsls	r1, r3, #2
 80050fa:	440b      	add	r3, r1
 80050fc:	fbb0 f3f3 	udiv	r3, r0, r3
 8005100:	3301      	adds	r3, #1
 8005102:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005106:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800510a:	6879      	ldr	r1, [r7, #4]
 800510c:	6809      	ldr	r1, [r1, #0]
 800510e:	4313      	orrs	r3, r2
 8005110:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	69da      	ldr	r2, [r3, #28]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6a1b      	ldr	r3, [r3, #32]
 8005124:	431a      	orrs	r2, r3
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	430a      	orrs	r2, r1
 800512c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	689b      	ldr	r3, [r3, #8]
 8005134:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005138:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800513c:	687a      	ldr	r2, [r7, #4]
 800513e:	6911      	ldr	r1, [r2, #16]
 8005140:	687a      	ldr	r2, [r7, #4]
 8005142:	68d2      	ldr	r2, [r2, #12]
 8005144:	4311      	orrs	r1, r2
 8005146:	687a      	ldr	r2, [r7, #4]
 8005148:	6812      	ldr	r2, [r2, #0]
 800514a:	430b      	orrs	r3, r1
 800514c:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	68db      	ldr	r3, [r3, #12]
 8005154:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	695a      	ldr	r2, [r3, #20]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	699b      	ldr	r3, [r3, #24]
 8005160:	431a      	orrs	r2, r3
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	430a      	orrs	r2, r1
 8005168:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f042 0201 	orr.w	r2, r2, #1
 8005178:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2200      	movs	r2, #0
 800517e:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2220      	movs	r2, #32
 8005184:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2200      	movs	r2, #0
 800518c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2200      	movs	r2, #0
 8005192:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005196:	2300      	movs	r3, #0
}
 8005198:	4618      	mov	r0, r3
 800519a:	3710      	adds	r7, #16
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}

080051a0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b088      	sub	sp, #32
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d101      	bne.n	80051b2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80051ae:	2301      	movs	r3, #1
 80051b0:	e1d1      	b.n	8005556 <HAL_I2S_Init+0x3b6>
  }

  /* Check the I2S parameters */
  assert_param(IS_I2S_ALL_INSTANCE(hi2s->Instance));
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a93      	ldr	r2, [pc, #588]	@ (8005404 <HAL_I2S_Init+0x264>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d009      	beq.n	80051d0 <HAL_I2S_Init+0x30>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a91      	ldr	r2, [pc, #580]	@ (8005408 <HAL_I2S_Init+0x268>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d004      	beq.n	80051d0 <HAL_I2S_Init+0x30>
 80051c6:	f240 111b 	movw	r1, #283	@ 0x11b
 80051ca:	4890      	ldr	r0, [pc, #576]	@ (800540c <HAL_I2S_Init+0x26c>)
 80051cc:	f7fb fc8a 	bl	8000ae4 <assert_failed>
  assert_param(IS_I2S_MODE(hi2s->Init.Mode));
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d013      	beq.n	8005200 <HAL_I2S_Init+0x60>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80051e0:	d00e      	beq.n	8005200 <HAL_I2S_Init+0x60>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80051ea:	d009      	beq.n	8005200 <HAL_I2S_Init+0x60>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80051f4:	d004      	beq.n	8005200 <HAL_I2S_Init+0x60>
 80051f6:	f44f 718e 	mov.w	r1, #284	@ 0x11c
 80051fa:	4884      	ldr	r0, [pc, #528]	@ (800540c <HAL_I2S_Init+0x26c>)
 80051fc:	f7fb fc72 	bl	8000ae4 <assert_failed>
  assert_param(IS_I2S_STANDARD(hi2s->Init.Standard));
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d014      	beq.n	8005232 <HAL_I2S_Init+0x92>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	689b      	ldr	r3, [r3, #8]
 800520c:	2b10      	cmp	r3, #16
 800520e:	d010      	beq.n	8005232 <HAL_I2S_Init+0x92>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	2b20      	cmp	r3, #32
 8005216:	d00c      	beq.n	8005232 <HAL_I2S_Init+0x92>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	689b      	ldr	r3, [r3, #8]
 800521c:	2b30      	cmp	r3, #48	@ 0x30
 800521e:	d008      	beq.n	8005232 <HAL_I2S_Init+0x92>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	689b      	ldr	r3, [r3, #8]
 8005224:	2bb0      	cmp	r3, #176	@ 0xb0
 8005226:	d004      	beq.n	8005232 <HAL_I2S_Init+0x92>
 8005228:	f240 111d 	movw	r1, #285	@ 0x11d
 800522c:	4877      	ldr	r0, [pc, #476]	@ (800540c <HAL_I2S_Init+0x26c>)
 800522e:	f7fb fc59 	bl	8000ae4 <assert_failed>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	68db      	ldr	r3, [r3, #12]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d010      	beq.n	800525c <HAL_I2S_Init+0xbc>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	68db      	ldr	r3, [r3, #12]
 800523e:	2b01      	cmp	r3, #1
 8005240:	d00c      	beq.n	800525c <HAL_I2S_Init+0xbc>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	68db      	ldr	r3, [r3, #12]
 8005246:	2b03      	cmp	r3, #3
 8005248:	d008      	beq.n	800525c <HAL_I2S_Init+0xbc>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	68db      	ldr	r3, [r3, #12]
 800524e:	2b05      	cmp	r3, #5
 8005250:	d004      	beq.n	800525c <HAL_I2S_Init+0xbc>
 8005252:	f44f 718f 	mov.w	r1, #286	@ 0x11e
 8005256:	486d      	ldr	r0, [pc, #436]	@ (800540c <HAL_I2S_Init+0x26c>)
 8005258:	f7fb fc44 	bl	8000ae4 <assert_failed>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	691b      	ldr	r3, [r3, #16]
 8005260:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005264:	d008      	beq.n	8005278 <HAL_I2S_Init+0xd8>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	691b      	ldr	r3, [r3, #16]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d004      	beq.n	8005278 <HAL_I2S_Init+0xd8>
 800526e:	f240 111f 	movw	r1, #287	@ 0x11f
 8005272:	4866      	ldr	r0, [pc, #408]	@ (800540c <HAL_I2S_Init+0x26c>)
 8005274:	f7fb fc36 	bl	8000ae4 <assert_failed>
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	695b      	ldr	r3, [r3, #20]
 800527c:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 8005280:	d304      	bcc.n	800528c <HAL_I2S_Init+0xec>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	695b      	ldr	r3, [r3, #20]
 8005286:	4a62      	ldr	r2, [pc, #392]	@ (8005410 <HAL_I2S_Init+0x270>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d908      	bls.n	800529e <HAL_I2S_Init+0xfe>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	695b      	ldr	r3, [r3, #20]
 8005290:	2b02      	cmp	r3, #2
 8005292:	d004      	beq.n	800529e <HAL_I2S_Init+0xfe>
 8005294:	f44f 7190 	mov.w	r1, #288	@ 0x120
 8005298:	485c      	ldr	r0, [pc, #368]	@ (800540c <HAL_I2S_Init+0x26c>)
 800529a:	f7fb fc23 	bl	8000ae4 <assert_failed>
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	699b      	ldr	r3, [r3, #24]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d008      	beq.n	80052b8 <HAL_I2S_Init+0x118>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	699b      	ldr	r3, [r3, #24]
 80052aa:	2b08      	cmp	r3, #8
 80052ac:	d004      	beq.n	80052b8 <HAL_I2S_Init+0x118>
 80052ae:	f240 1121 	movw	r1, #289	@ 0x121
 80052b2:	4856      	ldr	r0, [pc, #344]	@ (800540c <HAL_I2S_Init+0x26c>)
 80052b4:	f7fb fc16 	bl	8000ae4 <assert_failed>
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	69db      	ldr	r3, [r3, #28]
 80052bc:	2b01      	cmp	r3, #1
 80052be:	d008      	beq.n	80052d2 <HAL_I2S_Init+0x132>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	69db      	ldr	r3, [r3, #28]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d004      	beq.n	80052d2 <HAL_I2S_Init+0x132>
 80052c8:	f44f 7191 	mov.w	r1, #290	@ 0x122
 80052cc:	484f      	ldr	r0, [pc, #316]	@ (800540c <HAL_I2S_Init+0x26c>)
 80052ce:	f7fb fc09 	bl	8000ae4 <assert_failed>

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80052d8:	b2db      	uxtb	r3, r3
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d109      	bne.n	80052f2 <HAL_I2S_Init+0x152>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2200      	movs	r2, #0
 80052e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	4a4a      	ldr	r2, [pc, #296]	@ (8005414 <HAL_I2S_Init+0x274>)
 80052ea:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80052ec:	6878      	ldr	r0, [r7, #4]
 80052ee:	f7fb fb79 	bl	80009e4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2202      	movs	r2, #2
 80052f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	69db      	ldr	r3, [r3, #28]
 8005300:	687a      	ldr	r2, [r7, #4]
 8005302:	6812      	ldr	r2, [r2, #0]
 8005304:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8005308:	f023 030f 	bic.w	r3, r3, #15
 800530c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	2202      	movs	r2, #2
 8005314:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	695b      	ldr	r3, [r3, #20]
 800531a:	2b02      	cmp	r3, #2
 800531c:	d060      	beq.n	80053e0 <HAL_I2S_Init+0x240>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	68db      	ldr	r3, [r3, #12]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d102      	bne.n	800532c <HAL_I2S_Init+0x18c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8005326:	2310      	movs	r3, #16
 8005328:	617b      	str	r3, [r7, #20]
 800532a:	e001      	b.n	8005330 <HAL_I2S_Init+0x190>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800532c:	2320      	movs	r3, #32
 800532e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	689b      	ldr	r3, [r3, #8]
 8005334:	2b20      	cmp	r3, #32
 8005336:	d802      	bhi.n	800533e <HAL_I2S_Init+0x19e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	005b      	lsls	r3, r3, #1
 800533c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800533e:	2001      	movs	r0, #1
 8005340:	f001 fc64 	bl	8006c0c <HAL_RCCEx_GetPeriphCLKFreq>
 8005344:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	691b      	ldr	r3, [r3, #16]
 800534a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800534e:	d125      	bne.n	800539c <HAL_I2S_Init+0x1fc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	68db      	ldr	r3, [r3, #12]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d010      	beq.n	800537a <HAL_I2S_Init+0x1da>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	009b      	lsls	r3, r3, #2
 800535c:	68fa      	ldr	r2, [r7, #12]
 800535e:	fbb2 f2f3 	udiv	r2, r2, r3
 8005362:	4613      	mov	r3, r2
 8005364:	009b      	lsls	r3, r3, #2
 8005366:	4413      	add	r3, r2
 8005368:	005b      	lsls	r3, r3, #1
 800536a:	461a      	mov	r2, r3
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	695b      	ldr	r3, [r3, #20]
 8005370:	fbb2 f3f3 	udiv	r3, r2, r3
 8005374:	3305      	adds	r3, #5
 8005376:	613b      	str	r3, [r7, #16]
 8005378:	e01f      	b.n	80053ba <HAL_I2S_Init+0x21a>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	00db      	lsls	r3, r3, #3
 800537e:	68fa      	ldr	r2, [r7, #12]
 8005380:	fbb2 f2f3 	udiv	r2, r2, r3
 8005384:	4613      	mov	r3, r2
 8005386:	009b      	lsls	r3, r3, #2
 8005388:	4413      	add	r3, r2
 800538a:	005b      	lsls	r3, r3, #1
 800538c:	461a      	mov	r2, r3
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	695b      	ldr	r3, [r3, #20]
 8005392:	fbb2 f3f3 	udiv	r3, r2, r3
 8005396:	3305      	adds	r3, #5
 8005398:	613b      	str	r3, [r7, #16]
 800539a:	e00e      	b.n	80053ba <HAL_I2S_Init+0x21a>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800539c:	68fa      	ldr	r2, [r7, #12]
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80053a4:	4613      	mov	r3, r2
 80053a6:	009b      	lsls	r3, r3, #2
 80053a8:	4413      	add	r3, r2
 80053aa:	005b      	lsls	r3, r3, #1
 80053ac:	461a      	mov	r2, r3
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	695b      	ldr	r3, [r3, #20]
 80053b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80053b6:	3305      	adds	r3, #5
 80053b8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	4a16      	ldr	r2, [pc, #88]	@ (8005418 <HAL_I2S_Init+0x278>)
 80053be:	fba2 2303 	umull	r2, r3, r2, r3
 80053c2:	08db      	lsrs	r3, r3, #3
 80053c4:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	f003 0301 	and.w	r3, r3, #1
 80053cc:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80053ce:	693a      	ldr	r2, [r7, #16]
 80053d0:	69bb      	ldr	r3, [r7, #24]
 80053d2:	1ad3      	subs	r3, r2, r3
 80053d4:	085b      	lsrs	r3, r3, #1
 80053d6:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80053d8:	69bb      	ldr	r3, [r7, #24]
 80053da:	021b      	lsls	r3, r3, #8
 80053dc:	61bb      	str	r3, [r7, #24]
 80053de:	e003      	b.n	80053e8 <HAL_I2S_Init+0x248>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80053e0:	2302      	movs	r3, #2
 80053e2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80053e4:	2300      	movs	r3, #0
 80053e6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80053e8:	69fb      	ldr	r3, [r7, #28]
 80053ea:	2b01      	cmp	r3, #1
 80053ec:	d902      	bls.n	80053f4 <HAL_I2S_Init+0x254>
 80053ee:	69fb      	ldr	r3, [r7, #28]
 80053f0:	2bff      	cmp	r3, #255	@ 0xff
 80053f2:	d913      	bls.n	800541c <HAL_I2S_Init+0x27c>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053f8:	f043 0210 	orr.w	r2, r3, #16
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8005400:	2301      	movs	r3, #1
 8005402:	e0a8      	b.n	8005556 <HAL_I2S_Init+0x3b6>
 8005404:	40003800 	.word	0x40003800
 8005408:	40003c00 	.word	0x40003c00
 800540c:	0800cf68 	.word	0x0800cf68
 8005410:	0002ee00 	.word	0x0002ee00
 8005414:	08005667 	.word	0x08005667
 8005418:	cccccccd 	.word	0xcccccccd
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	691a      	ldr	r2, [r3, #16]
 8005420:	69bb      	ldr	r3, [r7, #24]
 8005422:	ea42 0103 	orr.w	r1, r2, r3
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	69fa      	ldr	r2, [r7, #28]
 800542c:	430a      	orrs	r2, r1
 800542e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	69db      	ldr	r3, [r3, #28]
 8005436:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800543a:	f023 030f 	bic.w	r3, r3, #15
 800543e:	687a      	ldr	r2, [r7, #4]
 8005440:	6851      	ldr	r1, [r2, #4]
 8005442:	687a      	ldr	r2, [r7, #4]
 8005444:	6892      	ldr	r2, [r2, #8]
 8005446:	4311      	orrs	r1, r2
 8005448:	687a      	ldr	r2, [r7, #4]
 800544a:	68d2      	ldr	r2, [r2, #12]
 800544c:	4311      	orrs	r1, r2
 800544e:	687a      	ldr	r2, [r7, #4]
 8005450:	6992      	ldr	r2, [r2, #24]
 8005452:	430a      	orrs	r2, r1
 8005454:	431a      	orrs	r2, r3
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800545e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_ASTRTEN */

#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6a1b      	ldr	r3, [r3, #32]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d008      	beq.n	800547a <HAL_I2S_Init+0x2da>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6a1b      	ldr	r3, [r3, #32]
 800546c:	2b01      	cmp	r3, #1
 800546e:	d004      	beq.n	800547a <HAL_I2S_Init+0x2da>
 8005470:	f240 11bd 	movw	r1, #445	@ 0x1bd
 8005474:	483a      	ldr	r0, [pc, #232]	@ (8005560 <HAL_I2S_Init+0x3c0>)
 8005476:	f7fb fb35 	bl	8000ae4 <assert_failed>

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6a1b      	ldr	r3, [r3, #32]
 800547e:	2b01      	cmp	r3, #1
 8005480:	d161      	bne.n	8005546 <HAL_I2S_Init+0x3a6>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	4a37      	ldr	r2, [pc, #220]	@ (8005564 <HAL_I2S_Init+0x3c4>)
 8005486:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a36      	ldr	r2, [pc, #216]	@ (8005568 <HAL_I2S_Init+0x3c8>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d101      	bne.n	8005496 <HAL_I2S_Init+0x2f6>
 8005492:	4b36      	ldr	r3, [pc, #216]	@ (800556c <HAL_I2S_Init+0x3cc>)
 8005494:	e001      	b.n	800549a <HAL_I2S_Init+0x2fa>
 8005496:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800549a:	69db      	ldr	r3, [r3, #28]
 800549c:	687a      	ldr	r2, [r7, #4]
 800549e:	6812      	ldr	r2, [r2, #0]
 80054a0:	4931      	ldr	r1, [pc, #196]	@ (8005568 <HAL_I2S_Init+0x3c8>)
 80054a2:	428a      	cmp	r2, r1
 80054a4:	d101      	bne.n	80054aa <HAL_I2S_Init+0x30a>
 80054a6:	4a31      	ldr	r2, [pc, #196]	@ (800556c <HAL_I2S_Init+0x3cc>)
 80054a8:	e001      	b.n	80054ae <HAL_I2S_Init+0x30e>
 80054aa:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80054ae:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80054b2:	f023 030f 	bic.w	r3, r3, #15
 80054b6:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a2a      	ldr	r2, [pc, #168]	@ (8005568 <HAL_I2S_Init+0x3c8>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d101      	bne.n	80054c6 <HAL_I2S_Init+0x326>
 80054c2:	4b2a      	ldr	r3, [pc, #168]	@ (800556c <HAL_I2S_Init+0x3cc>)
 80054c4:	e001      	b.n	80054ca <HAL_I2S_Init+0x32a>
 80054c6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80054ca:	2202      	movs	r2, #2
 80054cc:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a25      	ldr	r2, [pc, #148]	@ (8005568 <HAL_I2S_Init+0x3c8>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d101      	bne.n	80054dc <HAL_I2S_Init+0x33c>
 80054d8:	4b24      	ldr	r3, [pc, #144]	@ (800556c <HAL_I2S_Init+0x3cc>)
 80054da:	e001      	b.n	80054e0 <HAL_I2S_Init+0x340>
 80054dc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80054e0:	69db      	ldr	r3, [r3, #28]
 80054e2:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80054ec:	d003      	beq.n	80054f6 <HAL_I2S_Init+0x356>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d103      	bne.n	80054fe <HAL_I2S_Init+0x35e>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80054f6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80054fa:	613b      	str	r3, [r7, #16]
 80054fc:	e001      	b.n	8005502 <HAL_I2S_Init+0x362>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80054fe:	2300      	movs	r3, #0
 8005500:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	689b      	ldr	r3, [r3, #8]
 800550a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800550c:	4313      	orrs	r3, r2
 800550e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	68db      	ldr	r3, [r3, #12]
 8005514:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005516:	4313      	orrs	r3, r2
 8005518:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	699b      	ldr	r3, [r3, #24]
 800551e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005520:	4313      	orrs	r3, r2
 8005522:	b29a      	uxth	r2, r3
 8005524:	897b      	ldrh	r3, [r7, #10]
 8005526:	4313      	orrs	r3, r2
 8005528:	b29b      	uxth	r3, r3
 800552a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800552e:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a0c      	ldr	r2, [pc, #48]	@ (8005568 <HAL_I2S_Init+0x3c8>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d101      	bne.n	800553e <HAL_I2S_Init+0x39e>
 800553a:	4b0c      	ldr	r3, [pc, #48]	@ (800556c <HAL_I2S_Init+0x3cc>)
 800553c:	e001      	b.n	8005542 <HAL_I2S_Init+0x3a2>
 800553e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005542:	897a      	ldrh	r2, [r7, #10]
 8005544:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2200      	movs	r2, #0
 800554a:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2201      	movs	r2, #1
 8005550:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8005554:	2300      	movs	r3, #0
}
 8005556:	4618      	mov	r0, r3
 8005558:	3720      	adds	r7, #32
 800555a:	46bd      	mov	sp, r7
 800555c:	bd80      	pop	{r7, pc}
 800555e:	bf00      	nop
 8005560:	0800cf68 	.word	0x0800cf68
 8005564:	0800577d 	.word	0x0800577d
 8005568:	40003800 	.word	0x40003800
 800556c:	40003400 	.word	0x40003400

08005570 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005570:	b480      	push	{r7}
 8005572:	b083      	sub	sp, #12
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8005578:	bf00      	nop
 800557a:	370c      	adds	r7, #12
 800557c:	46bd      	mov	sp, r7
 800557e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005582:	4770      	bx	lr

08005584 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005584:	b480      	push	{r7}
 8005586:	b083      	sub	sp, #12
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800558c:	bf00      	nop
 800558e:	370c      	adds	r7, #12
 8005590:	46bd      	mov	sp, r7
 8005592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005596:	4770      	bx	lr

08005598 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8005598:	b480      	push	{r7}
 800559a:	b083      	sub	sp, #12
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80055a0:	bf00      	nop
 80055a2:	370c      	adds	r7, #12
 80055a4:	46bd      	mov	sp, r7
 80055a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055aa:	4770      	bx	lr

080055ac <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b082      	sub	sp, #8
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055b8:	881a      	ldrh	r2, [r3, #0]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055c4:	1c9a      	adds	r2, r3, #2
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055ce:	b29b      	uxth	r3, r3
 80055d0:	3b01      	subs	r3, #1
 80055d2:	b29a      	uxth	r2, r3
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055dc:	b29b      	uxth	r3, r3
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d10e      	bne.n	8005600 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	685a      	ldr	r2, [r3, #4]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80055f0:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2201      	movs	r2, #1
 80055f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	f7ff ffb8 	bl	8005570 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005600:	bf00      	nop
 8005602:	3708      	adds	r7, #8
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}

08005608 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b082      	sub	sp, #8
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	68da      	ldr	r2, [r3, #12]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800561a:	b292      	uxth	r2, r2
 800561c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005622:	1c9a      	adds	r2, r3, #2
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800562c:	b29b      	uxth	r3, r3
 800562e:	3b01      	subs	r3, #1
 8005630:	b29a      	uxth	r2, r3
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800563a:	b29b      	uxth	r3, r3
 800563c:	2b00      	cmp	r3, #0
 800563e:	d10e      	bne.n	800565e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	685a      	ldr	r2, [r3, #4]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800564e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2201      	movs	r2, #1
 8005654:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	f7ff ff93 	bl	8005584 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800565e:	bf00      	nop
 8005660:	3708      	adds	r7, #8
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}

08005666 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005666:	b580      	push	{r7, lr}
 8005668:	b086      	sub	sp, #24
 800566a:	af00      	add	r7, sp, #0
 800566c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	689b      	ldr	r3, [r3, #8]
 8005674:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800567c:	b2db      	uxtb	r3, r3
 800567e:	2b04      	cmp	r3, #4
 8005680:	d13a      	bne.n	80056f8 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8005682:	697b      	ldr	r3, [r7, #20]
 8005684:	f003 0301 	and.w	r3, r3, #1
 8005688:	2b01      	cmp	r3, #1
 800568a:	d109      	bne.n	80056a0 <I2S_IRQHandler+0x3a>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005696:	2b40      	cmp	r3, #64	@ 0x40
 8005698:	d102      	bne.n	80056a0 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f7ff ffb4 	bl	8005608 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056a6:	2b40      	cmp	r3, #64	@ 0x40
 80056a8:	d126      	bne.n	80056f8 <I2S_IRQHandler+0x92>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	f003 0320 	and.w	r3, r3, #32
 80056b4:	2b20      	cmp	r3, #32
 80056b6:	d11f      	bne.n	80056f8 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	685a      	ldr	r2, [r3, #4]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80056c6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80056c8:	2300      	movs	r3, #0
 80056ca:	613b      	str	r3, [r7, #16]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	68db      	ldr	r3, [r3, #12]
 80056d2:	613b      	str	r3, [r7, #16]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	689b      	ldr	r3, [r3, #8]
 80056da:	613b      	str	r3, [r7, #16]
 80056dc:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2201      	movs	r2, #1
 80056e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056ea:	f043 0202 	orr.w	r2, r3, #2
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f7ff ff50 	bl	8005598 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80056fe:	b2db      	uxtb	r3, r3
 8005700:	2b03      	cmp	r3, #3
 8005702:	d136      	bne.n	8005772 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	f003 0302 	and.w	r3, r3, #2
 800570a:	2b02      	cmp	r3, #2
 800570c:	d109      	bne.n	8005722 <I2S_IRQHandler+0xbc>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005718:	2b80      	cmp	r3, #128	@ 0x80
 800571a:	d102      	bne.n	8005722 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800571c:	6878      	ldr	r0, [r7, #4]
 800571e:	f7ff ff45 	bl	80055ac <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	f003 0308 	and.w	r3, r3, #8
 8005728:	2b08      	cmp	r3, #8
 800572a:	d122      	bne.n	8005772 <I2S_IRQHandler+0x10c>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	f003 0320 	and.w	r3, r3, #32
 8005736:	2b20      	cmp	r3, #32
 8005738:	d11b      	bne.n	8005772 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	685a      	ldr	r2, [r3, #4]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005748:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800574a:	2300      	movs	r3, #0
 800574c:	60fb      	str	r3, [r7, #12]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	689b      	ldr	r3, [r3, #8]
 8005754:	60fb      	str	r3, [r7, #12]
 8005756:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2201      	movs	r2, #1
 800575c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005764:	f043 0204 	orr.w	r2, r3, #4
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800576c:	6878      	ldr	r0, [r7, #4]
 800576e:	f7ff ff13 	bl	8005598 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005772:	bf00      	nop
 8005774:	3718      	adds	r7, #24
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}
	...

0800577c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b088      	sub	sp, #32
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	689b      	ldr	r3, [r3, #8]
 800578a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a92      	ldr	r2, [pc, #584]	@ (80059dc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d101      	bne.n	800579a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8005796:	4b92      	ldr	r3, [pc, #584]	@ (80059e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005798:	e001      	b.n	800579e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800579a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800579e:	689b      	ldr	r3, [r3, #8]
 80057a0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4a8b      	ldr	r2, [pc, #556]	@ (80059dc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d101      	bne.n	80057b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80057b4:	4b8a      	ldr	r3, [pc, #552]	@ (80059e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80057b6:	e001      	b.n	80057bc <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80057b8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80057c8:	d004      	beq.n	80057d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	f040 8099 	bne.w	8005906 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80057d4:	69fb      	ldr	r3, [r7, #28]
 80057d6:	f003 0302 	and.w	r3, r3, #2
 80057da:	2b02      	cmp	r3, #2
 80057dc:	d107      	bne.n	80057ee <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d002      	beq.n	80057ee <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80057e8:	6878      	ldr	r0, [r7, #4]
 80057ea:	f000 f925 	bl	8005a38 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80057ee:	69bb      	ldr	r3, [r7, #24]
 80057f0:	f003 0301 	and.w	r3, r3, #1
 80057f4:	2b01      	cmp	r3, #1
 80057f6:	d107      	bne.n	8005808 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d002      	beq.n	8005808 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f000 f9c8 	bl	8005b98 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005808:	69bb      	ldr	r3, [r7, #24]
 800580a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800580e:	2b40      	cmp	r3, #64	@ 0x40
 8005810:	d13a      	bne.n	8005888 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	f003 0320 	and.w	r3, r3, #32
 8005818:	2b00      	cmp	r3, #0
 800581a:	d035      	beq.n	8005888 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a6e      	ldr	r2, [pc, #440]	@ (80059dc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d101      	bne.n	800582a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8005826:	4b6e      	ldr	r3, [pc, #440]	@ (80059e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005828:	e001      	b.n	800582e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800582a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800582e:	685a      	ldr	r2, [r3, #4]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4969      	ldr	r1, [pc, #420]	@ (80059dc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005836:	428b      	cmp	r3, r1
 8005838:	d101      	bne.n	800583e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800583a:	4b69      	ldr	r3, [pc, #420]	@ (80059e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800583c:	e001      	b.n	8005842 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800583e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005842:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005846:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	685a      	ldr	r2, [r3, #4]
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005856:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005858:	2300      	movs	r3, #0
 800585a:	60fb      	str	r3, [r7, #12]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	68db      	ldr	r3, [r3, #12]
 8005862:	60fb      	str	r3, [r7, #12]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	689b      	ldr	r3, [r3, #8]
 800586a:	60fb      	str	r3, [r7, #12]
 800586c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2201      	movs	r2, #1
 8005872:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800587a:	f043 0202 	orr.w	r2, r3, #2
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f7ff fe88 	bl	8005598 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005888:	69fb      	ldr	r3, [r7, #28]
 800588a:	f003 0308 	and.w	r3, r3, #8
 800588e:	2b08      	cmp	r3, #8
 8005890:	f040 80c3 	bne.w	8005a1a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	f003 0320 	and.w	r3, r3, #32
 800589a:	2b00      	cmp	r3, #0
 800589c:	f000 80bd 	beq.w	8005a1a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	685a      	ldr	r2, [r3, #4]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80058ae:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a49      	ldr	r2, [pc, #292]	@ (80059dc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d101      	bne.n	80058be <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80058ba:	4b49      	ldr	r3, [pc, #292]	@ (80059e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80058bc:	e001      	b.n	80058c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80058be:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80058c2:	685a      	ldr	r2, [r3, #4]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4944      	ldr	r1, [pc, #272]	@ (80059dc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80058ca:	428b      	cmp	r3, r1
 80058cc:	d101      	bne.n	80058d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80058ce:	4b44      	ldr	r3, [pc, #272]	@ (80059e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80058d0:	e001      	b.n	80058d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80058d2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80058d6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80058da:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80058dc:	2300      	movs	r3, #0
 80058de:	60bb      	str	r3, [r7, #8]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	60bb      	str	r3, [r7, #8]
 80058e8:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2201      	movs	r2, #1
 80058ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058f6:	f043 0204 	orr.w	r2, r3, #4
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f7ff fe4a 	bl	8005598 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005904:	e089      	b.n	8005a1a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8005906:	69bb      	ldr	r3, [r7, #24]
 8005908:	f003 0302 	and.w	r3, r3, #2
 800590c:	2b02      	cmp	r3, #2
 800590e:	d107      	bne.n	8005920 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8005910:	693b      	ldr	r3, [r7, #16]
 8005912:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005916:	2b00      	cmp	r3, #0
 8005918:	d002      	beq.n	8005920 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f000 f8be 	bl	8005a9c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8005920:	69fb      	ldr	r3, [r7, #28]
 8005922:	f003 0301 	and.w	r3, r3, #1
 8005926:	2b01      	cmp	r3, #1
 8005928:	d107      	bne.n	800593a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005930:	2b00      	cmp	r3, #0
 8005932:	d002      	beq.n	800593a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8005934:	6878      	ldr	r0, [r7, #4]
 8005936:	f000 f8fd 	bl	8005b34 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800593a:	69fb      	ldr	r3, [r7, #28]
 800593c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005940:	2b40      	cmp	r3, #64	@ 0x40
 8005942:	d12f      	bne.n	80059a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	f003 0320 	and.w	r3, r3, #32
 800594a:	2b00      	cmp	r3, #0
 800594c:	d02a      	beq.n	80059a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	685a      	ldr	r2, [r3, #4]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800595c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a1e      	ldr	r2, [pc, #120]	@ (80059dc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d101      	bne.n	800596c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8005968:	4b1d      	ldr	r3, [pc, #116]	@ (80059e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800596a:	e001      	b.n	8005970 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800596c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005970:	685a      	ldr	r2, [r3, #4]
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4919      	ldr	r1, [pc, #100]	@ (80059dc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005978:	428b      	cmp	r3, r1
 800597a:	d101      	bne.n	8005980 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800597c:	4b18      	ldr	r3, [pc, #96]	@ (80059e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800597e:	e001      	b.n	8005984 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8005980:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005984:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005988:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2201      	movs	r2, #1
 800598e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005996:	f043 0202 	orr.w	r2, r3, #2
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f7ff fdfa 	bl	8005598 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80059a4:	69bb      	ldr	r3, [r7, #24]
 80059a6:	f003 0308 	and.w	r3, r3, #8
 80059aa:	2b08      	cmp	r3, #8
 80059ac:	d136      	bne.n	8005a1c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80059ae:	693b      	ldr	r3, [r7, #16]
 80059b0:	f003 0320 	and.w	r3, r3, #32
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d031      	beq.n	8005a1c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a07      	ldr	r2, [pc, #28]	@ (80059dc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d101      	bne.n	80059c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80059c2:	4b07      	ldr	r3, [pc, #28]	@ (80059e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80059c4:	e001      	b.n	80059ca <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80059c6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80059ca:	685a      	ldr	r2, [r3, #4]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4902      	ldr	r1, [pc, #8]	@ (80059dc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80059d2:	428b      	cmp	r3, r1
 80059d4:	d106      	bne.n	80059e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80059d6:	4b02      	ldr	r3, [pc, #8]	@ (80059e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80059d8:	e006      	b.n	80059e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80059da:	bf00      	nop
 80059dc:	40003800 	.word	0x40003800
 80059e0:	40003400 	.word	0x40003400
 80059e4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80059e8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80059ec:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	685a      	ldr	r2, [r3, #4]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80059fc:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2201      	movs	r2, #1
 8005a02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a0a:	f043 0204 	orr.w	r2, r3, #4
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f7ff fdc0 	bl	8005598 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005a18:	e000      	b.n	8005a1c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005a1a:	bf00      	nop
}
 8005a1c:	bf00      	nop
 8005a1e:	3720      	adds	r7, #32
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd80      	pop	{r7, pc}

08005a24 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005a24:	b480      	push	{r7}
 8005a26:	b083      	sub	sp, #12
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8005a2c:	bf00      	nop
 8005a2e:	370c      	adds	r7, #12
 8005a30:	46bd      	mov	sp, r7
 8005a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a36:	4770      	bx	lr

08005a38 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b082      	sub	sp, #8
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a44:	1c99      	adds	r1, r3, #2
 8005a46:	687a      	ldr	r2, [r7, #4]
 8005a48:	6251      	str	r1, [r2, #36]	@ 0x24
 8005a4a:	881a      	ldrh	r2, [r3, #0]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a56:	b29b      	uxth	r3, r3
 8005a58:	3b01      	subs	r3, #1
 8005a5a:	b29a      	uxth	r2, r3
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a64:	b29b      	uxth	r3, r3
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d113      	bne.n	8005a92 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	685a      	ldr	r2, [r3, #4]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005a78:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005a7e:	b29b      	uxth	r3, r3
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d106      	bne.n	8005a92 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2201      	movs	r2, #1
 8005a88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005a8c:	6878      	ldr	r0, [r7, #4]
 8005a8e:	f7ff ffc9 	bl	8005a24 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005a92:	bf00      	nop
 8005a94:	3708      	adds	r7, #8
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}
	...

08005a9c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b082      	sub	sp, #8
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005aa8:	1c99      	adds	r1, r3, #2
 8005aaa:	687a      	ldr	r2, [r7, #4]
 8005aac:	6251      	str	r1, [r2, #36]	@ 0x24
 8005aae:	8819      	ldrh	r1, [r3, #0]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4a1d      	ldr	r2, [pc, #116]	@ (8005b2c <I2SEx_TxISR_I2SExt+0x90>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d101      	bne.n	8005abe <I2SEx_TxISR_I2SExt+0x22>
 8005aba:	4b1d      	ldr	r3, [pc, #116]	@ (8005b30 <I2SEx_TxISR_I2SExt+0x94>)
 8005abc:	e001      	b.n	8005ac2 <I2SEx_TxISR_I2SExt+0x26>
 8005abe:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005ac2:	460a      	mov	r2, r1
 8005ac4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005aca:	b29b      	uxth	r3, r3
 8005acc:	3b01      	subs	r3, #1
 8005ace:	b29a      	uxth	r2, r3
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ad8:	b29b      	uxth	r3, r3
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d121      	bne.n	8005b22 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a12      	ldr	r2, [pc, #72]	@ (8005b2c <I2SEx_TxISR_I2SExt+0x90>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d101      	bne.n	8005aec <I2SEx_TxISR_I2SExt+0x50>
 8005ae8:	4b11      	ldr	r3, [pc, #68]	@ (8005b30 <I2SEx_TxISR_I2SExt+0x94>)
 8005aea:	e001      	b.n	8005af0 <I2SEx_TxISR_I2SExt+0x54>
 8005aec:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005af0:	685a      	ldr	r2, [r3, #4]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	490d      	ldr	r1, [pc, #52]	@ (8005b2c <I2SEx_TxISR_I2SExt+0x90>)
 8005af8:	428b      	cmp	r3, r1
 8005afa:	d101      	bne.n	8005b00 <I2SEx_TxISR_I2SExt+0x64>
 8005afc:	4b0c      	ldr	r3, [pc, #48]	@ (8005b30 <I2SEx_TxISR_I2SExt+0x94>)
 8005afe:	e001      	b.n	8005b04 <I2SEx_TxISR_I2SExt+0x68>
 8005b00:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005b04:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005b08:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005b0e:	b29b      	uxth	r3, r3
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d106      	bne.n	8005b22 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2201      	movs	r2, #1
 8005b18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005b1c:	6878      	ldr	r0, [r7, #4]
 8005b1e:	f7ff ff81 	bl	8005a24 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005b22:	bf00      	nop
 8005b24:	3708      	adds	r7, #8
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}
 8005b2a:	bf00      	nop
 8005b2c:	40003800 	.word	0x40003800
 8005b30:	40003400 	.word	0x40003400

08005b34 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b082      	sub	sp, #8
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	68d8      	ldr	r0, [r3, #12]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b46:	1c99      	adds	r1, r3, #2
 8005b48:	687a      	ldr	r2, [r7, #4]
 8005b4a:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8005b4c:	b282      	uxth	r2, r0
 8005b4e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005b54:	b29b      	uxth	r3, r3
 8005b56:	3b01      	subs	r3, #1
 8005b58:	b29a      	uxth	r2, r3
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005b62:	b29b      	uxth	r3, r3
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d113      	bne.n	8005b90 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	685a      	ldr	r2, [r3, #4]
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005b76:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b7c:	b29b      	uxth	r3, r3
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d106      	bne.n	8005b90 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2201      	movs	r2, #1
 8005b86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	f7ff ff4a 	bl	8005a24 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005b90:	bf00      	nop
 8005b92:	3708      	adds	r7, #8
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}

08005b98 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b082      	sub	sp, #8
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a20      	ldr	r2, [pc, #128]	@ (8005c28 <I2SEx_RxISR_I2SExt+0x90>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d101      	bne.n	8005bae <I2SEx_RxISR_I2SExt+0x16>
 8005baa:	4b20      	ldr	r3, [pc, #128]	@ (8005c2c <I2SEx_RxISR_I2SExt+0x94>)
 8005bac:	e001      	b.n	8005bb2 <I2SEx_RxISR_I2SExt+0x1a>
 8005bae:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005bb2:	68d8      	ldr	r0, [r3, #12]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bb8:	1c99      	adds	r1, r3, #2
 8005bba:	687a      	ldr	r2, [r7, #4]
 8005bbc:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8005bbe:	b282      	uxth	r2, r0
 8005bc0:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005bc6:	b29b      	uxth	r3, r3
 8005bc8:	3b01      	subs	r3, #1
 8005bca:	b29a      	uxth	r2, r3
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005bd4:	b29b      	uxth	r3, r3
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d121      	bne.n	8005c1e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4a12      	ldr	r2, [pc, #72]	@ (8005c28 <I2SEx_RxISR_I2SExt+0x90>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d101      	bne.n	8005be8 <I2SEx_RxISR_I2SExt+0x50>
 8005be4:	4b11      	ldr	r3, [pc, #68]	@ (8005c2c <I2SEx_RxISR_I2SExt+0x94>)
 8005be6:	e001      	b.n	8005bec <I2SEx_RxISR_I2SExt+0x54>
 8005be8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005bec:	685a      	ldr	r2, [r3, #4]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	490d      	ldr	r1, [pc, #52]	@ (8005c28 <I2SEx_RxISR_I2SExt+0x90>)
 8005bf4:	428b      	cmp	r3, r1
 8005bf6:	d101      	bne.n	8005bfc <I2SEx_RxISR_I2SExt+0x64>
 8005bf8:	4b0c      	ldr	r3, [pc, #48]	@ (8005c2c <I2SEx_RxISR_I2SExt+0x94>)
 8005bfa:	e001      	b.n	8005c00 <I2SEx_RxISR_I2SExt+0x68>
 8005bfc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005c00:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005c04:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c0a:	b29b      	uxth	r3, r3
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d106      	bne.n	8005c1e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2201      	movs	r2, #1
 8005c14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005c18:	6878      	ldr	r0, [r7, #4]
 8005c1a:	f7ff ff03 	bl	8005a24 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005c1e:	bf00      	nop
 8005c20:	3708      	adds	r7, #8
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}
 8005c26:	bf00      	nop
 8005c28:	40003800 	.word	0x40003800
 8005c2c:	40003400 	.word	0x40003400

08005c30 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b086      	sub	sp, #24
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d101      	bne.n	8005c42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005c3e:	2301      	movs	r3, #1
 8005c40:	e318      	b.n	8006274 <HAL_RCC_OscConfig+0x644>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	2b0f      	cmp	r3, #15
 8005c48:	d903      	bls.n	8005c52 <HAL_RCC_OscConfig+0x22>
 8005c4a:	21e6      	movs	r1, #230	@ 0xe6
 8005c4c:	4897      	ldr	r0, [pc, #604]	@ (8005eac <HAL_RCC_OscConfig+0x27c>)
 8005c4e:	f7fa ff49 	bl	8000ae4 <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f003 0301 	and.w	r3, r3, #1
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	f000 8088 	beq.w	8005d70 <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d00d      	beq.n	8005c84 <HAL_RCC_OscConfig+0x54>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	685b      	ldr	r3, [r3, #4]
 8005c6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c70:	d008      	beq.n	8005c84 <HAL_RCC_OscConfig+0x54>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005c7a:	d003      	beq.n	8005c84 <HAL_RCC_OscConfig+0x54>
 8005c7c:	21eb      	movs	r1, #235	@ 0xeb
 8005c7e:	488b      	ldr	r0, [pc, #556]	@ (8005eac <HAL_RCC_OscConfig+0x27c>)
 8005c80:	f7fa ff30 	bl	8000ae4 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005c84:	4b8a      	ldr	r3, [pc, #552]	@ (8005eb0 <HAL_RCC_OscConfig+0x280>)
 8005c86:	689b      	ldr	r3, [r3, #8]
 8005c88:	f003 030c 	and.w	r3, r3, #12
 8005c8c:	2b04      	cmp	r3, #4
 8005c8e:	d00c      	beq.n	8005caa <HAL_RCC_OscConfig+0x7a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005c90:	4b87      	ldr	r3, [pc, #540]	@ (8005eb0 <HAL_RCC_OscConfig+0x280>)
 8005c92:	689b      	ldr	r3, [r3, #8]
 8005c94:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005c98:	2b08      	cmp	r3, #8
 8005c9a:	d112      	bne.n	8005cc2 <HAL_RCC_OscConfig+0x92>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005c9c:	4b84      	ldr	r3, [pc, #528]	@ (8005eb0 <HAL_RCC_OscConfig+0x280>)
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005ca4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005ca8:	d10b      	bne.n	8005cc2 <HAL_RCC_OscConfig+0x92>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005caa:	4b81      	ldr	r3, [pc, #516]	@ (8005eb0 <HAL_RCC_OscConfig+0x280>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d05b      	beq.n	8005d6e <HAL_RCC_OscConfig+0x13e>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d157      	bne.n	8005d6e <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	e2d8      	b.n	8006274 <HAL_RCC_OscConfig+0x644>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005cca:	d106      	bne.n	8005cda <HAL_RCC_OscConfig+0xaa>
 8005ccc:	4b78      	ldr	r3, [pc, #480]	@ (8005eb0 <HAL_RCC_OscConfig+0x280>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a77      	ldr	r2, [pc, #476]	@ (8005eb0 <HAL_RCC_OscConfig+0x280>)
 8005cd2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005cd6:	6013      	str	r3, [r2, #0]
 8005cd8:	e01d      	b.n	8005d16 <HAL_RCC_OscConfig+0xe6>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005ce2:	d10c      	bne.n	8005cfe <HAL_RCC_OscConfig+0xce>
 8005ce4:	4b72      	ldr	r3, [pc, #456]	@ (8005eb0 <HAL_RCC_OscConfig+0x280>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a71      	ldr	r2, [pc, #452]	@ (8005eb0 <HAL_RCC_OscConfig+0x280>)
 8005cea:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005cee:	6013      	str	r3, [r2, #0]
 8005cf0:	4b6f      	ldr	r3, [pc, #444]	@ (8005eb0 <HAL_RCC_OscConfig+0x280>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a6e      	ldr	r2, [pc, #440]	@ (8005eb0 <HAL_RCC_OscConfig+0x280>)
 8005cf6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005cfa:	6013      	str	r3, [r2, #0]
 8005cfc:	e00b      	b.n	8005d16 <HAL_RCC_OscConfig+0xe6>
 8005cfe:	4b6c      	ldr	r3, [pc, #432]	@ (8005eb0 <HAL_RCC_OscConfig+0x280>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a6b      	ldr	r2, [pc, #428]	@ (8005eb0 <HAL_RCC_OscConfig+0x280>)
 8005d04:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005d08:	6013      	str	r3, [r2, #0]
 8005d0a:	4b69      	ldr	r3, [pc, #420]	@ (8005eb0 <HAL_RCC_OscConfig+0x280>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4a68      	ldr	r2, [pc, #416]	@ (8005eb0 <HAL_RCC_OscConfig+0x280>)
 8005d10:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005d14:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d013      	beq.n	8005d46 <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d1e:	f7fb fc4f 	bl	80015c0 <HAL_GetTick>
 8005d22:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d24:	e008      	b.n	8005d38 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d26:	f7fb fc4b 	bl	80015c0 <HAL_GetTick>
 8005d2a:	4602      	mov	r2, r0
 8005d2c:	693b      	ldr	r3, [r7, #16]
 8005d2e:	1ad3      	subs	r3, r2, r3
 8005d30:	2b64      	cmp	r3, #100	@ 0x64
 8005d32:	d901      	bls.n	8005d38 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8005d34:	2303      	movs	r3, #3
 8005d36:	e29d      	b.n	8006274 <HAL_RCC_OscConfig+0x644>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d38:	4b5d      	ldr	r3, [pc, #372]	@ (8005eb0 <HAL_RCC_OscConfig+0x280>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d0f0      	beq.n	8005d26 <HAL_RCC_OscConfig+0xf6>
 8005d44:	e014      	b.n	8005d70 <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d46:	f7fb fc3b 	bl	80015c0 <HAL_GetTick>
 8005d4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d4c:	e008      	b.n	8005d60 <HAL_RCC_OscConfig+0x130>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d4e:	f7fb fc37 	bl	80015c0 <HAL_GetTick>
 8005d52:	4602      	mov	r2, r0
 8005d54:	693b      	ldr	r3, [r7, #16]
 8005d56:	1ad3      	subs	r3, r2, r3
 8005d58:	2b64      	cmp	r3, #100	@ 0x64
 8005d5a:	d901      	bls.n	8005d60 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8005d5c:	2303      	movs	r3, #3
 8005d5e:	e289      	b.n	8006274 <HAL_RCC_OscConfig+0x644>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d60:	4b53      	ldr	r3, [pc, #332]	@ (8005eb0 <HAL_RCC_OscConfig+0x280>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d1f0      	bne.n	8005d4e <HAL_RCC_OscConfig+0x11e>
 8005d6c:	e000      	b.n	8005d70 <HAL_RCC_OscConfig+0x140>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d6e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f003 0302 	and.w	r3, r3, #2
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d079      	beq.n	8005e70 <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	68db      	ldr	r3, [r3, #12]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d008      	beq.n	8005d96 <HAL_RCC_OscConfig+0x166>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	68db      	ldr	r3, [r3, #12]
 8005d88:	2b01      	cmp	r3, #1
 8005d8a:	d004      	beq.n	8005d96 <HAL_RCC_OscConfig+0x166>
 8005d8c:	f240 111d 	movw	r1, #285	@ 0x11d
 8005d90:	4846      	ldr	r0, [pc, #280]	@ (8005eac <HAL_RCC_OscConfig+0x27c>)
 8005d92:	f7fa fea7 	bl	8000ae4 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	691b      	ldr	r3, [r3, #16]
 8005d9a:	2b1f      	cmp	r3, #31
 8005d9c:	d904      	bls.n	8005da8 <HAL_RCC_OscConfig+0x178>
 8005d9e:	f44f 718f 	mov.w	r1, #286	@ 0x11e
 8005da2:	4842      	ldr	r0, [pc, #264]	@ (8005eac <HAL_RCC_OscConfig+0x27c>)
 8005da4:	f7fa fe9e 	bl	8000ae4 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005da8:	4b41      	ldr	r3, [pc, #260]	@ (8005eb0 <HAL_RCC_OscConfig+0x280>)
 8005daa:	689b      	ldr	r3, [r3, #8]
 8005dac:	f003 030c 	and.w	r3, r3, #12
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d00b      	beq.n	8005dcc <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005db4:	4b3e      	ldr	r3, [pc, #248]	@ (8005eb0 <HAL_RCC_OscConfig+0x280>)
 8005db6:	689b      	ldr	r3, [r3, #8]
 8005db8:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005dbc:	2b08      	cmp	r3, #8
 8005dbe:	d11c      	bne.n	8005dfa <HAL_RCC_OscConfig+0x1ca>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005dc0:	4b3b      	ldr	r3, [pc, #236]	@ (8005eb0 <HAL_RCC_OscConfig+0x280>)
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d116      	bne.n	8005dfa <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005dcc:	4b38      	ldr	r3, [pc, #224]	@ (8005eb0 <HAL_RCC_OscConfig+0x280>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f003 0302 	and.w	r3, r3, #2
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d005      	beq.n	8005de4 <HAL_RCC_OscConfig+0x1b4>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	68db      	ldr	r3, [r3, #12]
 8005ddc:	2b01      	cmp	r3, #1
 8005dde:	d001      	beq.n	8005de4 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 8005de0:	2301      	movs	r3, #1
 8005de2:	e247      	b.n	8006274 <HAL_RCC_OscConfig+0x644>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005de4:	4b32      	ldr	r3, [pc, #200]	@ (8005eb0 <HAL_RCC_OscConfig+0x280>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	691b      	ldr	r3, [r3, #16]
 8005df0:	00db      	lsls	r3, r3, #3
 8005df2:	492f      	ldr	r1, [pc, #188]	@ (8005eb0 <HAL_RCC_OscConfig+0x280>)
 8005df4:	4313      	orrs	r3, r2
 8005df6:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005df8:	e03a      	b.n	8005e70 <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	68db      	ldr	r3, [r3, #12]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d020      	beq.n	8005e44 <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005e02:	4b2c      	ldr	r3, [pc, #176]	@ (8005eb4 <HAL_RCC_OscConfig+0x284>)
 8005e04:	2201      	movs	r2, #1
 8005e06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e08:	f7fb fbda 	bl	80015c0 <HAL_GetTick>
 8005e0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e0e:	e008      	b.n	8005e22 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e10:	f7fb fbd6 	bl	80015c0 <HAL_GetTick>
 8005e14:	4602      	mov	r2, r0
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	1ad3      	subs	r3, r2, r3
 8005e1a:	2b02      	cmp	r3, #2
 8005e1c:	d901      	bls.n	8005e22 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005e1e:	2303      	movs	r3, #3
 8005e20:	e228      	b.n	8006274 <HAL_RCC_OscConfig+0x644>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e22:	4b23      	ldr	r3, [pc, #140]	@ (8005eb0 <HAL_RCC_OscConfig+0x280>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f003 0302 	and.w	r3, r3, #2
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d0f0      	beq.n	8005e10 <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e2e:	4b20      	ldr	r3, [pc, #128]	@ (8005eb0 <HAL_RCC_OscConfig+0x280>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	691b      	ldr	r3, [r3, #16]
 8005e3a:	00db      	lsls	r3, r3, #3
 8005e3c:	491c      	ldr	r1, [pc, #112]	@ (8005eb0 <HAL_RCC_OscConfig+0x280>)
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	600b      	str	r3, [r1, #0]
 8005e42:	e015      	b.n	8005e70 <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005e44:	4b1b      	ldr	r3, [pc, #108]	@ (8005eb4 <HAL_RCC_OscConfig+0x284>)
 8005e46:	2200      	movs	r2, #0
 8005e48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e4a:	f7fb fbb9 	bl	80015c0 <HAL_GetTick>
 8005e4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e50:	e008      	b.n	8005e64 <HAL_RCC_OscConfig+0x234>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e52:	f7fb fbb5 	bl	80015c0 <HAL_GetTick>
 8005e56:	4602      	mov	r2, r0
 8005e58:	693b      	ldr	r3, [r7, #16]
 8005e5a:	1ad3      	subs	r3, r2, r3
 8005e5c:	2b02      	cmp	r3, #2
 8005e5e:	d901      	bls.n	8005e64 <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 8005e60:	2303      	movs	r3, #3
 8005e62:	e207      	b.n	8006274 <HAL_RCC_OscConfig+0x644>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e64:	4b12      	ldr	r3, [pc, #72]	@ (8005eb0 <HAL_RCC_OscConfig+0x280>)
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f003 0302 	and.w	r3, r3, #2
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d1f0      	bne.n	8005e52 <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f003 0308 	and.w	r3, r3, #8
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d045      	beq.n	8005f08 <HAL_RCC_OscConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	695b      	ldr	r3, [r3, #20]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d008      	beq.n	8005e96 <HAL_RCC_OscConfig+0x266>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	695b      	ldr	r3, [r3, #20]
 8005e88:	2b01      	cmp	r3, #1
 8005e8a:	d004      	beq.n	8005e96 <HAL_RCC_OscConfig+0x266>
 8005e8c:	f44f 71af 	mov.w	r1, #350	@ 0x15e
 8005e90:	4806      	ldr	r0, [pc, #24]	@ (8005eac <HAL_RCC_OscConfig+0x27c>)
 8005e92:	f7fa fe27 	bl	8000ae4 <assert_failed>

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	695b      	ldr	r3, [r3, #20]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d01e      	beq.n	8005edc <HAL_RCC_OscConfig+0x2ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e9e:	4b06      	ldr	r3, [pc, #24]	@ (8005eb8 <HAL_RCC_OscConfig+0x288>)
 8005ea0:	2201      	movs	r2, #1
 8005ea2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ea4:	f7fb fb8c 	bl	80015c0 <HAL_GetTick>
 8005ea8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005eaa:	e010      	b.n	8005ece <HAL_RCC_OscConfig+0x29e>
 8005eac:	0800cfa0 	.word	0x0800cfa0
 8005eb0:	40023800 	.word	0x40023800
 8005eb4:	42470000 	.word	0x42470000
 8005eb8:	42470e80 	.word	0x42470e80
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ebc:	f7fb fb80 	bl	80015c0 <HAL_GetTick>
 8005ec0:	4602      	mov	r2, r0
 8005ec2:	693b      	ldr	r3, [r7, #16]
 8005ec4:	1ad3      	subs	r3, r2, r3
 8005ec6:	2b02      	cmp	r3, #2
 8005ec8:	d901      	bls.n	8005ece <HAL_RCC_OscConfig+0x29e>
        {
          return HAL_TIMEOUT;
 8005eca:	2303      	movs	r3, #3
 8005ecc:	e1d2      	b.n	8006274 <HAL_RCC_OscConfig+0x644>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ece:	4b5e      	ldr	r3, [pc, #376]	@ (8006048 <HAL_RCC_OscConfig+0x418>)
 8005ed0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005ed2:	f003 0302 	and.w	r3, r3, #2
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d0f0      	beq.n	8005ebc <HAL_RCC_OscConfig+0x28c>
 8005eda:	e015      	b.n	8005f08 <HAL_RCC_OscConfig+0x2d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005edc:	4b5b      	ldr	r3, [pc, #364]	@ (800604c <HAL_RCC_OscConfig+0x41c>)
 8005ede:	2200      	movs	r2, #0
 8005ee0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ee2:	f7fb fb6d 	bl	80015c0 <HAL_GetTick>
 8005ee6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ee8:	e008      	b.n	8005efc <HAL_RCC_OscConfig+0x2cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005eea:	f7fb fb69 	bl	80015c0 <HAL_GetTick>
 8005eee:	4602      	mov	r2, r0
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	1ad3      	subs	r3, r2, r3
 8005ef4:	2b02      	cmp	r3, #2
 8005ef6:	d901      	bls.n	8005efc <HAL_RCC_OscConfig+0x2cc>
        {
          return HAL_TIMEOUT;
 8005ef8:	2303      	movs	r3, #3
 8005efa:	e1bb      	b.n	8006274 <HAL_RCC_OscConfig+0x644>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005efc:	4b52      	ldr	r3, [pc, #328]	@ (8006048 <HAL_RCC_OscConfig+0x418>)
 8005efe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f00:	f003 0302 	and.w	r3, r3, #2
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d1f0      	bne.n	8005eea <HAL_RCC_OscConfig+0x2ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f003 0304 	and.w	r3, r3, #4
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	f000 80b0 	beq.w	8006076 <HAL_RCC_OscConfig+0x446>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005f16:	2300      	movs	r3, #0
 8005f18:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	689b      	ldr	r3, [r3, #8]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d00c      	beq.n	8005f3c <HAL_RCC_OscConfig+0x30c>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	689b      	ldr	r3, [r3, #8]
 8005f26:	2b01      	cmp	r3, #1
 8005f28:	d008      	beq.n	8005f3c <HAL_RCC_OscConfig+0x30c>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	689b      	ldr	r3, [r3, #8]
 8005f2e:	2b05      	cmp	r3, #5
 8005f30:	d004      	beq.n	8005f3c <HAL_RCC_OscConfig+0x30c>
 8005f32:	f44f 71c5 	mov.w	r1, #394	@ 0x18a
 8005f36:	4846      	ldr	r0, [pc, #280]	@ (8006050 <HAL_RCC_OscConfig+0x420>)
 8005f38:	f7fa fdd4 	bl	8000ae4 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f3c:	4b42      	ldr	r3, [pc, #264]	@ (8006048 <HAL_RCC_OscConfig+0x418>)
 8005f3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d10f      	bne.n	8005f68 <HAL_RCC_OscConfig+0x338>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f48:	2300      	movs	r3, #0
 8005f4a:	60bb      	str	r3, [r7, #8]
 8005f4c:	4b3e      	ldr	r3, [pc, #248]	@ (8006048 <HAL_RCC_OscConfig+0x418>)
 8005f4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f50:	4a3d      	ldr	r2, [pc, #244]	@ (8006048 <HAL_RCC_OscConfig+0x418>)
 8005f52:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005f56:	6413      	str	r3, [r2, #64]	@ 0x40
 8005f58:	4b3b      	ldr	r3, [pc, #236]	@ (8006048 <HAL_RCC_OscConfig+0x418>)
 8005f5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005f60:	60bb      	str	r3, [r7, #8]
 8005f62:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f64:	2301      	movs	r3, #1
 8005f66:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f68:	4b3a      	ldr	r3, [pc, #232]	@ (8006054 <HAL_RCC_OscConfig+0x424>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d118      	bne.n	8005fa6 <HAL_RCC_OscConfig+0x376>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005f74:	4b37      	ldr	r3, [pc, #220]	@ (8006054 <HAL_RCC_OscConfig+0x424>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4a36      	ldr	r2, [pc, #216]	@ (8006054 <HAL_RCC_OscConfig+0x424>)
 8005f7a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f7e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f80:	f7fb fb1e 	bl	80015c0 <HAL_GetTick>
 8005f84:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f86:	e008      	b.n	8005f9a <HAL_RCC_OscConfig+0x36a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f88:	f7fb fb1a 	bl	80015c0 <HAL_GetTick>
 8005f8c:	4602      	mov	r2, r0
 8005f8e:	693b      	ldr	r3, [r7, #16]
 8005f90:	1ad3      	subs	r3, r2, r3
 8005f92:	2b02      	cmp	r3, #2
 8005f94:	d901      	bls.n	8005f9a <HAL_RCC_OscConfig+0x36a>
        {
          return HAL_TIMEOUT;
 8005f96:	2303      	movs	r3, #3
 8005f98:	e16c      	b.n	8006274 <HAL_RCC_OscConfig+0x644>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f9a:	4b2e      	ldr	r3, [pc, #184]	@ (8006054 <HAL_RCC_OscConfig+0x424>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d0f0      	beq.n	8005f88 <HAL_RCC_OscConfig+0x358>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	689b      	ldr	r3, [r3, #8]
 8005faa:	2b01      	cmp	r3, #1
 8005fac:	d106      	bne.n	8005fbc <HAL_RCC_OscConfig+0x38c>
 8005fae:	4b26      	ldr	r3, [pc, #152]	@ (8006048 <HAL_RCC_OscConfig+0x418>)
 8005fb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fb2:	4a25      	ldr	r2, [pc, #148]	@ (8006048 <HAL_RCC_OscConfig+0x418>)
 8005fb4:	f043 0301 	orr.w	r3, r3, #1
 8005fb8:	6713      	str	r3, [r2, #112]	@ 0x70
 8005fba:	e01c      	b.n	8005ff6 <HAL_RCC_OscConfig+0x3c6>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	689b      	ldr	r3, [r3, #8]
 8005fc0:	2b05      	cmp	r3, #5
 8005fc2:	d10c      	bne.n	8005fde <HAL_RCC_OscConfig+0x3ae>
 8005fc4:	4b20      	ldr	r3, [pc, #128]	@ (8006048 <HAL_RCC_OscConfig+0x418>)
 8005fc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fc8:	4a1f      	ldr	r2, [pc, #124]	@ (8006048 <HAL_RCC_OscConfig+0x418>)
 8005fca:	f043 0304 	orr.w	r3, r3, #4
 8005fce:	6713      	str	r3, [r2, #112]	@ 0x70
 8005fd0:	4b1d      	ldr	r3, [pc, #116]	@ (8006048 <HAL_RCC_OscConfig+0x418>)
 8005fd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fd4:	4a1c      	ldr	r2, [pc, #112]	@ (8006048 <HAL_RCC_OscConfig+0x418>)
 8005fd6:	f043 0301 	orr.w	r3, r3, #1
 8005fda:	6713      	str	r3, [r2, #112]	@ 0x70
 8005fdc:	e00b      	b.n	8005ff6 <HAL_RCC_OscConfig+0x3c6>
 8005fde:	4b1a      	ldr	r3, [pc, #104]	@ (8006048 <HAL_RCC_OscConfig+0x418>)
 8005fe0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fe2:	4a19      	ldr	r2, [pc, #100]	@ (8006048 <HAL_RCC_OscConfig+0x418>)
 8005fe4:	f023 0301 	bic.w	r3, r3, #1
 8005fe8:	6713      	str	r3, [r2, #112]	@ 0x70
 8005fea:	4b17      	ldr	r3, [pc, #92]	@ (8006048 <HAL_RCC_OscConfig+0x418>)
 8005fec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fee:	4a16      	ldr	r2, [pc, #88]	@ (8006048 <HAL_RCC_OscConfig+0x418>)
 8005ff0:	f023 0304 	bic.w	r3, r3, #4
 8005ff4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	689b      	ldr	r3, [r3, #8]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d015      	beq.n	800602a <HAL_RCC_OscConfig+0x3fa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ffe:	f7fb fadf 	bl	80015c0 <HAL_GetTick>
 8006002:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006004:	e00a      	b.n	800601c <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006006:	f7fb fadb 	bl	80015c0 <HAL_GetTick>
 800600a:	4602      	mov	r2, r0
 800600c:	693b      	ldr	r3, [r7, #16]
 800600e:	1ad3      	subs	r3, r2, r3
 8006010:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006014:	4293      	cmp	r3, r2
 8006016:	d901      	bls.n	800601c <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8006018:	2303      	movs	r3, #3
 800601a:	e12b      	b.n	8006274 <HAL_RCC_OscConfig+0x644>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800601c:	4b0a      	ldr	r3, [pc, #40]	@ (8006048 <HAL_RCC_OscConfig+0x418>)
 800601e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006020:	f003 0302 	and.w	r3, r3, #2
 8006024:	2b00      	cmp	r3, #0
 8006026:	d0ee      	beq.n	8006006 <HAL_RCC_OscConfig+0x3d6>
 8006028:	e01c      	b.n	8006064 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800602a:	f7fb fac9 	bl	80015c0 <HAL_GetTick>
 800602e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006030:	e012      	b.n	8006058 <HAL_RCC_OscConfig+0x428>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006032:	f7fb fac5 	bl	80015c0 <HAL_GetTick>
 8006036:	4602      	mov	r2, r0
 8006038:	693b      	ldr	r3, [r7, #16]
 800603a:	1ad3      	subs	r3, r2, r3
 800603c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006040:	4293      	cmp	r3, r2
 8006042:	d909      	bls.n	8006058 <HAL_RCC_OscConfig+0x428>
        {
          return HAL_TIMEOUT;
 8006044:	2303      	movs	r3, #3
 8006046:	e115      	b.n	8006274 <HAL_RCC_OscConfig+0x644>
 8006048:	40023800 	.word	0x40023800
 800604c:	42470e80 	.word	0x42470e80
 8006050:	0800cfa0 	.word	0x0800cfa0
 8006054:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006058:	4b88      	ldr	r3, [pc, #544]	@ (800627c <HAL_RCC_OscConfig+0x64c>)
 800605a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800605c:	f003 0302 	and.w	r3, r3, #2
 8006060:	2b00      	cmp	r3, #0
 8006062:	d1e6      	bne.n	8006032 <HAL_RCC_OscConfig+0x402>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006064:	7dfb      	ldrb	r3, [r7, #23]
 8006066:	2b01      	cmp	r3, #1
 8006068:	d105      	bne.n	8006076 <HAL_RCC_OscConfig+0x446>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800606a:	4b84      	ldr	r3, [pc, #528]	@ (800627c <HAL_RCC_OscConfig+0x64c>)
 800606c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800606e:	4a83      	ldr	r2, [pc, #524]	@ (800627c <HAL_RCC_OscConfig+0x64c>)
 8006070:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006074:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	699b      	ldr	r3, [r3, #24]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d00c      	beq.n	8006098 <HAL_RCC_OscConfig+0x468>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	699b      	ldr	r3, [r3, #24]
 8006082:	2b01      	cmp	r3, #1
 8006084:	d008      	beq.n	8006098 <HAL_RCC_OscConfig+0x468>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	699b      	ldr	r3, [r3, #24]
 800608a:	2b02      	cmp	r3, #2
 800608c:	d004      	beq.n	8006098 <HAL_RCC_OscConfig+0x468>
 800608e:	f240 11cd 	movw	r1, #461	@ 0x1cd
 8006092:	487b      	ldr	r0, [pc, #492]	@ (8006280 <HAL_RCC_OscConfig+0x650>)
 8006094:	f7fa fd26 	bl	8000ae4 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	699b      	ldr	r3, [r3, #24]
 800609c:	2b00      	cmp	r3, #0
 800609e:	f000 80e8 	beq.w	8006272 <HAL_RCC_OscConfig+0x642>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80060a2:	4b76      	ldr	r3, [pc, #472]	@ (800627c <HAL_RCC_OscConfig+0x64c>)
 80060a4:	689b      	ldr	r3, [r3, #8]
 80060a6:	f003 030c 	and.w	r3, r3, #12
 80060aa:	2b08      	cmp	r3, #8
 80060ac:	f000 80a9 	beq.w	8006202 <HAL_RCC_OscConfig+0x5d2>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	699b      	ldr	r3, [r3, #24]
 80060b4:	2b02      	cmp	r3, #2
 80060b6:	f040 808d 	bne.w	80061d4 <HAL_RCC_OscConfig+0x5a4>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	69db      	ldr	r3, [r3, #28]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d009      	beq.n	80060d6 <HAL_RCC_OscConfig+0x4a6>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	69db      	ldr	r3, [r3, #28]
 80060c6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80060ca:	d004      	beq.n	80060d6 <HAL_RCC_OscConfig+0x4a6>
 80060cc:	f44f 71eb 	mov.w	r1, #470	@ 0x1d6
 80060d0:	486b      	ldr	r0, [pc, #428]	@ (8006280 <HAL_RCC_OscConfig+0x650>)
 80060d2:	f7fa fd07 	bl	8000ae4 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6a1b      	ldr	r3, [r3, #32]
 80060da:	2b01      	cmp	r3, #1
 80060dc:	d903      	bls.n	80060e6 <HAL_RCC_OscConfig+0x4b6>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6a1b      	ldr	r3, [r3, #32]
 80060e2:	2b3f      	cmp	r3, #63	@ 0x3f
 80060e4:	d904      	bls.n	80060f0 <HAL_RCC_OscConfig+0x4c0>
 80060e6:	f240 11d7 	movw	r1, #471	@ 0x1d7
 80060ea:	4865      	ldr	r0, [pc, #404]	@ (8006280 <HAL_RCC_OscConfig+0x650>)
 80060ec:	f7fa fcfa 	bl	8000ae4 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060f4:	2b31      	cmp	r3, #49	@ 0x31
 80060f6:	d904      	bls.n	8006102 <HAL_RCC_OscConfig+0x4d2>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060fc:	f5b3 7fd8 	cmp.w	r3, #432	@ 0x1b0
 8006100:	d904      	bls.n	800610c <HAL_RCC_OscConfig+0x4dc>
 8006102:	f44f 71ec 	mov.w	r1, #472	@ 0x1d8
 8006106:	485e      	ldr	r0, [pc, #376]	@ (8006280 <HAL_RCC_OscConfig+0x650>)
 8006108:	f7fa fcec 	bl	8000ae4 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006110:	2b02      	cmp	r3, #2
 8006112:	d010      	beq.n	8006136 <HAL_RCC_OscConfig+0x506>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006118:	2b04      	cmp	r3, #4
 800611a:	d00c      	beq.n	8006136 <HAL_RCC_OscConfig+0x506>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006120:	2b06      	cmp	r3, #6
 8006122:	d008      	beq.n	8006136 <HAL_RCC_OscConfig+0x506>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006128:	2b08      	cmp	r3, #8
 800612a:	d004      	beq.n	8006136 <HAL_RCC_OscConfig+0x506>
 800612c:	f240 11d9 	movw	r1, #473	@ 0x1d9
 8006130:	4853      	ldr	r0, [pc, #332]	@ (8006280 <HAL_RCC_OscConfig+0x650>)
 8006132:	f7fa fcd7 	bl	8000ae4 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800613a:	2b01      	cmp	r3, #1
 800613c:	d903      	bls.n	8006146 <HAL_RCC_OscConfig+0x516>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006142:	2b0f      	cmp	r3, #15
 8006144:	d904      	bls.n	8006150 <HAL_RCC_OscConfig+0x520>
 8006146:	f44f 71ed 	mov.w	r1, #474	@ 0x1da
 800614a:	484d      	ldr	r0, [pc, #308]	@ (8006280 <HAL_RCC_OscConfig+0x650>)
 800614c:	f7fa fcca 	bl	8000ae4 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006150:	4b4c      	ldr	r3, [pc, #304]	@ (8006284 <HAL_RCC_OscConfig+0x654>)
 8006152:	2200      	movs	r2, #0
 8006154:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006156:	f7fb fa33 	bl	80015c0 <HAL_GetTick>
 800615a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800615c:	e008      	b.n	8006170 <HAL_RCC_OscConfig+0x540>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800615e:	f7fb fa2f 	bl	80015c0 <HAL_GetTick>
 8006162:	4602      	mov	r2, r0
 8006164:	693b      	ldr	r3, [r7, #16]
 8006166:	1ad3      	subs	r3, r2, r3
 8006168:	2b02      	cmp	r3, #2
 800616a:	d901      	bls.n	8006170 <HAL_RCC_OscConfig+0x540>
          {
            return HAL_TIMEOUT;
 800616c:	2303      	movs	r3, #3
 800616e:	e081      	b.n	8006274 <HAL_RCC_OscConfig+0x644>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006170:	4b42      	ldr	r3, [pc, #264]	@ (800627c <HAL_RCC_OscConfig+0x64c>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006178:	2b00      	cmp	r3, #0
 800617a:	d1f0      	bne.n	800615e <HAL_RCC_OscConfig+0x52e>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	69da      	ldr	r2, [r3, #28]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6a1b      	ldr	r3, [r3, #32]
 8006184:	431a      	orrs	r2, r3
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800618a:	019b      	lsls	r3, r3, #6
 800618c:	431a      	orrs	r2, r3
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006192:	085b      	lsrs	r3, r3, #1
 8006194:	3b01      	subs	r3, #1
 8006196:	041b      	lsls	r3, r3, #16
 8006198:	431a      	orrs	r2, r3
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800619e:	061b      	lsls	r3, r3, #24
 80061a0:	4936      	ldr	r1, [pc, #216]	@ (800627c <HAL_RCC_OscConfig+0x64c>)
 80061a2:	4313      	orrs	r3, r2
 80061a4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80061a6:	4b37      	ldr	r3, [pc, #220]	@ (8006284 <HAL_RCC_OscConfig+0x654>)
 80061a8:	2201      	movs	r2, #1
 80061aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061ac:	f7fb fa08 	bl	80015c0 <HAL_GetTick>
 80061b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80061b2:	e008      	b.n	80061c6 <HAL_RCC_OscConfig+0x596>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061b4:	f7fb fa04 	bl	80015c0 <HAL_GetTick>
 80061b8:	4602      	mov	r2, r0
 80061ba:	693b      	ldr	r3, [r7, #16]
 80061bc:	1ad3      	subs	r3, r2, r3
 80061be:	2b02      	cmp	r3, #2
 80061c0:	d901      	bls.n	80061c6 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 80061c2:	2303      	movs	r3, #3
 80061c4:	e056      	b.n	8006274 <HAL_RCC_OscConfig+0x644>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80061c6:	4b2d      	ldr	r3, [pc, #180]	@ (800627c <HAL_RCC_OscConfig+0x64c>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d0f0      	beq.n	80061b4 <HAL_RCC_OscConfig+0x584>
 80061d2:	e04e      	b.n	8006272 <HAL_RCC_OscConfig+0x642>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061d4:	4b2b      	ldr	r3, [pc, #172]	@ (8006284 <HAL_RCC_OscConfig+0x654>)
 80061d6:	2200      	movs	r2, #0
 80061d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061da:	f7fb f9f1 	bl	80015c0 <HAL_GetTick>
 80061de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061e0:	e008      	b.n	80061f4 <HAL_RCC_OscConfig+0x5c4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061e2:	f7fb f9ed 	bl	80015c0 <HAL_GetTick>
 80061e6:	4602      	mov	r2, r0
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	1ad3      	subs	r3, r2, r3
 80061ec:	2b02      	cmp	r3, #2
 80061ee:	d901      	bls.n	80061f4 <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 80061f0:	2303      	movs	r3, #3
 80061f2:	e03f      	b.n	8006274 <HAL_RCC_OscConfig+0x644>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061f4:	4b21      	ldr	r3, [pc, #132]	@ (800627c <HAL_RCC_OscConfig+0x64c>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d1f0      	bne.n	80061e2 <HAL_RCC_OscConfig+0x5b2>
 8006200:	e037      	b.n	8006272 <HAL_RCC_OscConfig+0x642>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	699b      	ldr	r3, [r3, #24]
 8006206:	2b01      	cmp	r3, #1
 8006208:	d101      	bne.n	800620e <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 800620a:	2301      	movs	r3, #1
 800620c:	e032      	b.n	8006274 <HAL_RCC_OscConfig+0x644>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800620e:	4b1b      	ldr	r3, [pc, #108]	@ (800627c <HAL_RCC_OscConfig+0x64c>)
 8006210:	685b      	ldr	r3, [r3, #4]
 8006212:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	699b      	ldr	r3, [r3, #24]
 8006218:	2b01      	cmp	r3, #1
 800621a:	d028      	beq.n	800626e <HAL_RCC_OscConfig+0x63e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006226:	429a      	cmp	r2, r3
 8006228:	d121      	bne.n	800626e <HAL_RCC_OscConfig+0x63e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006234:	429a      	cmp	r2, r3
 8006236:	d11a      	bne.n	800626e <HAL_RCC_OscConfig+0x63e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006238:	68fa      	ldr	r2, [r7, #12]
 800623a:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800623e:	4013      	ands	r3, r2
 8006240:	687a      	ldr	r2, [r7, #4]
 8006242:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006244:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006246:	4293      	cmp	r3, r2
 8006248:	d111      	bne.n	800626e <HAL_RCC_OscConfig+0x63e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006254:	085b      	lsrs	r3, r3, #1
 8006256:	3b01      	subs	r3, #1
 8006258:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800625a:	429a      	cmp	r2, r3
 800625c:	d107      	bne.n	800626e <HAL_RCC_OscConfig+0x63e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006268:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800626a:	429a      	cmp	r2, r3
 800626c:	d001      	beq.n	8006272 <HAL_RCC_OscConfig+0x642>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800626e:	2301      	movs	r3, #1
 8006270:	e000      	b.n	8006274 <HAL_RCC_OscConfig+0x644>
        }
      }
    }
  }
  return HAL_OK;
 8006272:	2300      	movs	r3, #0
}
 8006274:	4618      	mov	r0, r3
 8006276:	3718      	adds	r7, #24
 8006278:	46bd      	mov	sp, r7
 800627a:	bd80      	pop	{r7, pc}
 800627c:	40023800 	.word	0x40023800
 8006280:	0800cfa0 	.word	0x0800cfa0
 8006284:	42470060 	.word	0x42470060

08006288 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b084      	sub	sp, #16
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
 8006290:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d101      	bne.n	800629c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006298:	2301      	movs	r3, #1
 800629a:	e174      	b.n	8006586 <HAL_RCC_ClockConfig+0x2fe>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d003      	beq.n	80062ac <HAL_RCC_ClockConfig+0x24>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	2b0f      	cmp	r3, #15
 80062aa:	d904      	bls.n	80062b6 <HAL_RCC_ClockConfig+0x2e>
 80062ac:	f240 215a 	movw	r1, #602	@ 0x25a
 80062b0:	487b      	ldr	r0, [pc, #492]	@ (80064a0 <HAL_RCC_ClockConfig+0x218>)
 80062b2:	f7fa fc17 	bl	8000ae4 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d019      	beq.n	80062f0 <HAL_RCC_ClockConfig+0x68>
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	2b01      	cmp	r3, #1
 80062c0:	d016      	beq.n	80062f0 <HAL_RCC_ClockConfig+0x68>
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	2b02      	cmp	r3, #2
 80062c6:	d013      	beq.n	80062f0 <HAL_RCC_ClockConfig+0x68>
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	2b03      	cmp	r3, #3
 80062cc:	d010      	beq.n	80062f0 <HAL_RCC_ClockConfig+0x68>
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	2b04      	cmp	r3, #4
 80062d2:	d00d      	beq.n	80062f0 <HAL_RCC_ClockConfig+0x68>
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	2b05      	cmp	r3, #5
 80062d8:	d00a      	beq.n	80062f0 <HAL_RCC_ClockConfig+0x68>
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	2b06      	cmp	r3, #6
 80062de:	d007      	beq.n	80062f0 <HAL_RCC_ClockConfig+0x68>
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	2b07      	cmp	r3, #7
 80062e4:	d004      	beq.n	80062f0 <HAL_RCC_ClockConfig+0x68>
 80062e6:	f240 215b 	movw	r1, #603	@ 0x25b
 80062ea:	486d      	ldr	r0, [pc, #436]	@ (80064a0 <HAL_RCC_ClockConfig+0x218>)
 80062ec:	f7fa fbfa 	bl	8000ae4 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80062f0:	4b6c      	ldr	r3, [pc, #432]	@ (80064a4 <HAL_RCC_ClockConfig+0x21c>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f003 0307 	and.w	r3, r3, #7
 80062f8:	683a      	ldr	r2, [r7, #0]
 80062fa:	429a      	cmp	r2, r3
 80062fc:	d90c      	bls.n	8006318 <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062fe:	4b69      	ldr	r3, [pc, #420]	@ (80064a4 <HAL_RCC_ClockConfig+0x21c>)
 8006300:	683a      	ldr	r2, [r7, #0]
 8006302:	b2d2      	uxtb	r2, r2
 8006304:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006306:	4b67      	ldr	r3, [pc, #412]	@ (80064a4 <HAL_RCC_ClockConfig+0x21c>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f003 0307 	and.w	r3, r3, #7
 800630e:	683a      	ldr	r2, [r7, #0]
 8006310:	429a      	cmp	r2, r3
 8006312:	d001      	beq.n	8006318 <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 8006314:	2301      	movs	r3, #1
 8006316:	e136      	b.n	8006586 <HAL_RCC_ClockConfig+0x2fe>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f003 0302 	and.w	r3, r3, #2
 8006320:	2b00      	cmp	r3, #0
 8006322:	d049      	beq.n	80063b8 <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f003 0304 	and.w	r3, r3, #4
 800632c:	2b00      	cmp	r3, #0
 800632e:	d005      	beq.n	800633c <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006330:	4b5d      	ldr	r3, [pc, #372]	@ (80064a8 <HAL_RCC_ClockConfig+0x220>)
 8006332:	689b      	ldr	r3, [r3, #8]
 8006334:	4a5c      	ldr	r2, [pc, #368]	@ (80064a8 <HAL_RCC_ClockConfig+0x220>)
 8006336:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800633a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f003 0308 	and.w	r3, r3, #8
 8006344:	2b00      	cmp	r3, #0
 8006346:	d005      	beq.n	8006354 <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006348:	4b57      	ldr	r3, [pc, #348]	@ (80064a8 <HAL_RCC_ClockConfig+0x220>)
 800634a:	689b      	ldr	r3, [r3, #8]
 800634c:	4a56      	ldr	r2, [pc, #344]	@ (80064a8 <HAL_RCC_ClockConfig+0x220>)
 800634e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006352:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	689b      	ldr	r3, [r3, #8]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d024      	beq.n	80063a6 <HAL_RCC_ClockConfig+0x11e>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	689b      	ldr	r3, [r3, #8]
 8006360:	2b80      	cmp	r3, #128	@ 0x80
 8006362:	d020      	beq.n	80063a6 <HAL_RCC_ClockConfig+0x11e>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	689b      	ldr	r3, [r3, #8]
 8006368:	2b90      	cmp	r3, #144	@ 0x90
 800636a:	d01c      	beq.n	80063a6 <HAL_RCC_ClockConfig+0x11e>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	689b      	ldr	r3, [r3, #8]
 8006370:	2ba0      	cmp	r3, #160	@ 0xa0
 8006372:	d018      	beq.n	80063a6 <HAL_RCC_ClockConfig+0x11e>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	689b      	ldr	r3, [r3, #8]
 8006378:	2bb0      	cmp	r3, #176	@ 0xb0
 800637a:	d014      	beq.n	80063a6 <HAL_RCC_ClockConfig+0x11e>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	689b      	ldr	r3, [r3, #8]
 8006380:	2bc0      	cmp	r3, #192	@ 0xc0
 8006382:	d010      	beq.n	80063a6 <HAL_RCC_ClockConfig+0x11e>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	689b      	ldr	r3, [r3, #8]
 8006388:	2bd0      	cmp	r3, #208	@ 0xd0
 800638a:	d00c      	beq.n	80063a6 <HAL_RCC_ClockConfig+0x11e>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	689b      	ldr	r3, [r3, #8]
 8006390:	2be0      	cmp	r3, #224	@ 0xe0
 8006392:	d008      	beq.n	80063a6 <HAL_RCC_ClockConfig+0x11e>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	689b      	ldr	r3, [r3, #8]
 8006398:	2bf0      	cmp	r3, #240	@ 0xf0
 800639a:	d004      	beq.n	80063a6 <HAL_RCC_ClockConfig+0x11e>
 800639c:	f240 217e 	movw	r1, #638	@ 0x27e
 80063a0:	483f      	ldr	r0, [pc, #252]	@ (80064a0 <HAL_RCC_ClockConfig+0x218>)
 80063a2:	f7fa fb9f 	bl	8000ae4 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80063a6:	4b40      	ldr	r3, [pc, #256]	@ (80064a8 <HAL_RCC_ClockConfig+0x220>)
 80063a8:	689b      	ldr	r3, [r3, #8]
 80063aa:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	689b      	ldr	r3, [r3, #8]
 80063b2:	493d      	ldr	r1, [pc, #244]	@ (80064a8 <HAL_RCC_ClockConfig+0x220>)
 80063b4:	4313      	orrs	r3, r2
 80063b6:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f003 0301 	and.w	r3, r3, #1
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d059      	beq.n	8006478 <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d010      	beq.n	80063ee <HAL_RCC_ClockConfig+0x166>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	2b01      	cmp	r3, #1
 80063d2:	d00c      	beq.n	80063ee <HAL_RCC_ClockConfig+0x166>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	685b      	ldr	r3, [r3, #4]
 80063d8:	2b02      	cmp	r3, #2
 80063da:	d008      	beq.n	80063ee <HAL_RCC_ClockConfig+0x166>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	685b      	ldr	r3, [r3, #4]
 80063e0:	2b03      	cmp	r3, #3
 80063e2:	d004      	beq.n	80063ee <HAL_RCC_ClockConfig+0x166>
 80063e4:	f240 2185 	movw	r1, #645	@ 0x285
 80063e8:	482d      	ldr	r0, [pc, #180]	@ (80064a0 <HAL_RCC_ClockConfig+0x218>)
 80063ea:	f7fa fb7b 	bl	8000ae4 <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	685b      	ldr	r3, [r3, #4]
 80063f2:	2b01      	cmp	r3, #1
 80063f4:	d107      	bne.n	8006406 <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063f6:	4b2c      	ldr	r3, [pc, #176]	@ (80064a8 <HAL_RCC_ClockConfig+0x220>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d119      	bne.n	8006436 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8006402:	2301      	movs	r3, #1
 8006404:	e0bf      	b.n	8006586 <HAL_RCC_ClockConfig+0x2fe>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	685b      	ldr	r3, [r3, #4]
 800640a:	2b02      	cmp	r3, #2
 800640c:	d003      	beq.n	8006416 <HAL_RCC_ClockConfig+0x18e>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006412:	2b03      	cmp	r3, #3
 8006414:	d107      	bne.n	8006426 <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006416:	4b24      	ldr	r3, [pc, #144]	@ (80064a8 <HAL_RCC_ClockConfig+0x220>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800641e:	2b00      	cmp	r3, #0
 8006420:	d109      	bne.n	8006436 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8006422:	2301      	movs	r3, #1
 8006424:	e0af      	b.n	8006586 <HAL_RCC_ClockConfig+0x2fe>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006426:	4b20      	ldr	r3, [pc, #128]	@ (80064a8 <HAL_RCC_ClockConfig+0x220>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f003 0302 	and.w	r3, r3, #2
 800642e:	2b00      	cmp	r3, #0
 8006430:	d101      	bne.n	8006436 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8006432:	2301      	movs	r3, #1
 8006434:	e0a7      	b.n	8006586 <HAL_RCC_ClockConfig+0x2fe>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006436:	4b1c      	ldr	r3, [pc, #112]	@ (80064a8 <HAL_RCC_ClockConfig+0x220>)
 8006438:	689b      	ldr	r3, [r3, #8]
 800643a:	f023 0203 	bic.w	r2, r3, #3
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	685b      	ldr	r3, [r3, #4]
 8006442:	4919      	ldr	r1, [pc, #100]	@ (80064a8 <HAL_RCC_ClockConfig+0x220>)
 8006444:	4313      	orrs	r3, r2
 8006446:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006448:	f7fb f8ba 	bl	80015c0 <HAL_GetTick>
 800644c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800644e:	e00a      	b.n	8006466 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006450:	f7fb f8b6 	bl	80015c0 <HAL_GetTick>
 8006454:	4602      	mov	r2, r0
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	1ad3      	subs	r3, r2, r3
 800645a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800645e:	4293      	cmp	r3, r2
 8006460:	d901      	bls.n	8006466 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8006462:	2303      	movs	r3, #3
 8006464:	e08f      	b.n	8006586 <HAL_RCC_ClockConfig+0x2fe>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006466:	4b10      	ldr	r3, [pc, #64]	@ (80064a8 <HAL_RCC_ClockConfig+0x220>)
 8006468:	689b      	ldr	r3, [r3, #8]
 800646a:	f003 020c 	and.w	r2, r3, #12
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	685b      	ldr	r3, [r3, #4]
 8006472:	009b      	lsls	r3, r3, #2
 8006474:	429a      	cmp	r2, r3
 8006476:	d1eb      	bne.n	8006450 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006478:	4b0a      	ldr	r3, [pc, #40]	@ (80064a4 <HAL_RCC_ClockConfig+0x21c>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f003 0307 	and.w	r3, r3, #7
 8006480:	683a      	ldr	r2, [r7, #0]
 8006482:	429a      	cmp	r2, r3
 8006484:	d212      	bcs.n	80064ac <HAL_RCC_ClockConfig+0x224>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006486:	4b07      	ldr	r3, [pc, #28]	@ (80064a4 <HAL_RCC_ClockConfig+0x21c>)
 8006488:	683a      	ldr	r2, [r7, #0]
 800648a:	b2d2      	uxtb	r2, r2
 800648c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800648e:	4b05      	ldr	r3, [pc, #20]	@ (80064a4 <HAL_RCC_ClockConfig+0x21c>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f003 0307 	and.w	r3, r3, #7
 8006496:	683a      	ldr	r2, [r7, #0]
 8006498:	429a      	cmp	r2, r3
 800649a:	d007      	beq.n	80064ac <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 800649c:	2301      	movs	r3, #1
 800649e:	e072      	b.n	8006586 <HAL_RCC_ClockConfig+0x2fe>
 80064a0:	0800cfa0 	.word	0x0800cfa0
 80064a4:	40023c00 	.word	0x40023c00
 80064a8:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f003 0304 	and.w	r3, r3, #4
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d025      	beq.n	8006504 <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	68db      	ldr	r3, [r3, #12]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d018      	beq.n	80064f2 <HAL_RCC_ClockConfig+0x26a>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	68db      	ldr	r3, [r3, #12]
 80064c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80064c8:	d013      	beq.n	80064f2 <HAL_RCC_ClockConfig+0x26a>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	68db      	ldr	r3, [r3, #12]
 80064ce:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80064d2:	d00e      	beq.n	80064f2 <HAL_RCC_ClockConfig+0x26a>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	68db      	ldr	r3, [r3, #12]
 80064d8:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 80064dc:	d009      	beq.n	80064f2 <HAL_RCC_ClockConfig+0x26a>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	68db      	ldr	r3, [r3, #12]
 80064e2:	f5b3 5fe0 	cmp.w	r3, #7168	@ 0x1c00
 80064e6:	d004      	beq.n	80064f2 <HAL_RCC_ClockConfig+0x26a>
 80064e8:	f240 21c3 	movw	r1, #707	@ 0x2c3
 80064ec:	4828      	ldr	r0, [pc, #160]	@ (8006590 <HAL_RCC_ClockConfig+0x308>)
 80064ee:	f7fa faf9 	bl	8000ae4 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80064f2:	4b28      	ldr	r3, [pc, #160]	@ (8006594 <HAL_RCC_ClockConfig+0x30c>)
 80064f4:	689b      	ldr	r3, [r3, #8]
 80064f6:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	68db      	ldr	r3, [r3, #12]
 80064fe:	4925      	ldr	r1, [pc, #148]	@ (8006594 <HAL_RCC_ClockConfig+0x30c>)
 8006500:	4313      	orrs	r3, r2
 8006502:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f003 0308 	and.w	r3, r3, #8
 800650c:	2b00      	cmp	r3, #0
 800650e:	d026      	beq.n	800655e <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	691b      	ldr	r3, [r3, #16]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d018      	beq.n	800654a <HAL_RCC_ClockConfig+0x2c2>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	691b      	ldr	r3, [r3, #16]
 800651c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006520:	d013      	beq.n	800654a <HAL_RCC_ClockConfig+0x2c2>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	691b      	ldr	r3, [r3, #16]
 8006526:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800652a:	d00e      	beq.n	800654a <HAL_RCC_ClockConfig+0x2c2>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	691b      	ldr	r3, [r3, #16]
 8006530:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 8006534:	d009      	beq.n	800654a <HAL_RCC_ClockConfig+0x2c2>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	691b      	ldr	r3, [r3, #16]
 800653a:	f5b3 5fe0 	cmp.w	r3, #7168	@ 0x1c00
 800653e:	d004      	beq.n	800654a <HAL_RCC_ClockConfig+0x2c2>
 8006540:	f240 21ca 	movw	r1, #714	@ 0x2ca
 8006544:	4812      	ldr	r0, [pc, #72]	@ (8006590 <HAL_RCC_ClockConfig+0x308>)
 8006546:	f7fa facd 	bl	8000ae4 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800654a:	4b12      	ldr	r3, [pc, #72]	@ (8006594 <HAL_RCC_ClockConfig+0x30c>)
 800654c:	689b      	ldr	r3, [r3, #8]
 800654e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	691b      	ldr	r3, [r3, #16]
 8006556:	00db      	lsls	r3, r3, #3
 8006558:	490e      	ldr	r1, [pc, #56]	@ (8006594 <HAL_RCC_ClockConfig+0x30c>)
 800655a:	4313      	orrs	r3, r2
 800655c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800655e:	f000 f821 	bl	80065a4 <HAL_RCC_GetSysClockFreq>
 8006562:	4602      	mov	r2, r0
 8006564:	4b0b      	ldr	r3, [pc, #44]	@ (8006594 <HAL_RCC_ClockConfig+0x30c>)
 8006566:	689b      	ldr	r3, [r3, #8]
 8006568:	091b      	lsrs	r3, r3, #4
 800656a:	f003 030f 	and.w	r3, r3, #15
 800656e:	490a      	ldr	r1, [pc, #40]	@ (8006598 <HAL_RCC_ClockConfig+0x310>)
 8006570:	5ccb      	ldrb	r3, [r1, r3]
 8006572:	fa22 f303 	lsr.w	r3, r2, r3
 8006576:	4a09      	ldr	r2, [pc, #36]	@ (800659c <HAL_RCC_ClockConfig+0x314>)
 8006578:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800657a:	4b09      	ldr	r3, [pc, #36]	@ (80065a0 <HAL_RCC_ClockConfig+0x318>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4618      	mov	r0, r3
 8006580:	f7fa ffda 	bl	8001538 <HAL_InitTick>

  return HAL_OK;
 8006584:	2300      	movs	r3, #0
}
 8006586:	4618      	mov	r0, r3
 8006588:	3710      	adds	r7, #16
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}
 800658e:	bf00      	nop
 8006590:	0800cfa0 	.word	0x0800cfa0
 8006594:	40023800 	.word	0x40023800
 8006598:	0800d100 	.word	0x0800d100
 800659c:	20000008 	.word	0x20000008
 80065a0:	2000000c 	.word	0x2000000c

080065a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80065a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80065a8:	b094      	sub	sp, #80	@ 0x50
 80065aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80065ac:	2300      	movs	r3, #0
 80065ae:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80065b0:	2300      	movs	r3, #0
 80065b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80065b4:	2300      	movs	r3, #0
 80065b6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80065b8:	2300      	movs	r3, #0
 80065ba:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80065bc:	4b79      	ldr	r3, [pc, #484]	@ (80067a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80065be:	689b      	ldr	r3, [r3, #8]
 80065c0:	f003 030c 	and.w	r3, r3, #12
 80065c4:	2b08      	cmp	r3, #8
 80065c6:	d00d      	beq.n	80065e4 <HAL_RCC_GetSysClockFreq+0x40>
 80065c8:	2b08      	cmp	r3, #8
 80065ca:	f200 80e1 	bhi.w	8006790 <HAL_RCC_GetSysClockFreq+0x1ec>
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d002      	beq.n	80065d8 <HAL_RCC_GetSysClockFreq+0x34>
 80065d2:	2b04      	cmp	r3, #4
 80065d4:	d003      	beq.n	80065de <HAL_RCC_GetSysClockFreq+0x3a>
 80065d6:	e0db      	b.n	8006790 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80065d8:	4b73      	ldr	r3, [pc, #460]	@ (80067a8 <HAL_RCC_GetSysClockFreq+0x204>)
 80065da:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80065dc:	e0db      	b.n	8006796 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80065de:	4b73      	ldr	r3, [pc, #460]	@ (80067ac <HAL_RCC_GetSysClockFreq+0x208>)
 80065e0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80065e2:	e0d8      	b.n	8006796 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80065e4:	4b6f      	ldr	r3, [pc, #444]	@ (80067a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80065e6:	685b      	ldr	r3, [r3, #4]
 80065e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80065ec:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80065ee:	4b6d      	ldr	r3, [pc, #436]	@ (80067a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80065f0:	685b      	ldr	r3, [r3, #4]
 80065f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d063      	beq.n	80066c2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80065fa:	4b6a      	ldr	r3, [pc, #424]	@ (80067a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80065fc:	685b      	ldr	r3, [r3, #4]
 80065fe:	099b      	lsrs	r3, r3, #6
 8006600:	2200      	movs	r2, #0
 8006602:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006604:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006606:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006608:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800660c:	633b      	str	r3, [r7, #48]	@ 0x30
 800660e:	2300      	movs	r3, #0
 8006610:	637b      	str	r3, [r7, #52]	@ 0x34
 8006612:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006616:	4622      	mov	r2, r4
 8006618:	462b      	mov	r3, r5
 800661a:	f04f 0000 	mov.w	r0, #0
 800661e:	f04f 0100 	mov.w	r1, #0
 8006622:	0159      	lsls	r1, r3, #5
 8006624:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006628:	0150      	lsls	r0, r2, #5
 800662a:	4602      	mov	r2, r0
 800662c:	460b      	mov	r3, r1
 800662e:	4621      	mov	r1, r4
 8006630:	1a51      	subs	r1, r2, r1
 8006632:	6139      	str	r1, [r7, #16]
 8006634:	4629      	mov	r1, r5
 8006636:	eb63 0301 	sbc.w	r3, r3, r1
 800663a:	617b      	str	r3, [r7, #20]
 800663c:	f04f 0200 	mov.w	r2, #0
 8006640:	f04f 0300 	mov.w	r3, #0
 8006644:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006648:	4659      	mov	r1, fp
 800664a:	018b      	lsls	r3, r1, #6
 800664c:	4651      	mov	r1, sl
 800664e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006652:	4651      	mov	r1, sl
 8006654:	018a      	lsls	r2, r1, #6
 8006656:	4651      	mov	r1, sl
 8006658:	ebb2 0801 	subs.w	r8, r2, r1
 800665c:	4659      	mov	r1, fp
 800665e:	eb63 0901 	sbc.w	r9, r3, r1
 8006662:	f04f 0200 	mov.w	r2, #0
 8006666:	f04f 0300 	mov.w	r3, #0
 800666a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800666e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006672:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006676:	4690      	mov	r8, r2
 8006678:	4699      	mov	r9, r3
 800667a:	4623      	mov	r3, r4
 800667c:	eb18 0303 	adds.w	r3, r8, r3
 8006680:	60bb      	str	r3, [r7, #8]
 8006682:	462b      	mov	r3, r5
 8006684:	eb49 0303 	adc.w	r3, r9, r3
 8006688:	60fb      	str	r3, [r7, #12]
 800668a:	f04f 0200 	mov.w	r2, #0
 800668e:	f04f 0300 	mov.w	r3, #0
 8006692:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006696:	4629      	mov	r1, r5
 8006698:	024b      	lsls	r3, r1, #9
 800669a:	4621      	mov	r1, r4
 800669c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80066a0:	4621      	mov	r1, r4
 80066a2:	024a      	lsls	r2, r1, #9
 80066a4:	4610      	mov	r0, r2
 80066a6:	4619      	mov	r1, r3
 80066a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80066aa:	2200      	movs	r2, #0
 80066ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 80066ae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80066b0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80066b4:	f7f9 fd90 	bl	80001d8 <__aeabi_uldivmod>
 80066b8:	4602      	mov	r2, r0
 80066ba:	460b      	mov	r3, r1
 80066bc:	4613      	mov	r3, r2
 80066be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80066c0:	e058      	b.n	8006774 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80066c2:	4b38      	ldr	r3, [pc, #224]	@ (80067a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80066c4:	685b      	ldr	r3, [r3, #4]
 80066c6:	099b      	lsrs	r3, r3, #6
 80066c8:	2200      	movs	r2, #0
 80066ca:	4618      	mov	r0, r3
 80066cc:	4611      	mov	r1, r2
 80066ce:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80066d2:	623b      	str	r3, [r7, #32]
 80066d4:	2300      	movs	r3, #0
 80066d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80066d8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80066dc:	4642      	mov	r2, r8
 80066de:	464b      	mov	r3, r9
 80066e0:	f04f 0000 	mov.w	r0, #0
 80066e4:	f04f 0100 	mov.w	r1, #0
 80066e8:	0159      	lsls	r1, r3, #5
 80066ea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80066ee:	0150      	lsls	r0, r2, #5
 80066f0:	4602      	mov	r2, r0
 80066f2:	460b      	mov	r3, r1
 80066f4:	4641      	mov	r1, r8
 80066f6:	ebb2 0a01 	subs.w	sl, r2, r1
 80066fa:	4649      	mov	r1, r9
 80066fc:	eb63 0b01 	sbc.w	fp, r3, r1
 8006700:	f04f 0200 	mov.w	r2, #0
 8006704:	f04f 0300 	mov.w	r3, #0
 8006708:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800670c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006710:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006714:	ebb2 040a 	subs.w	r4, r2, sl
 8006718:	eb63 050b 	sbc.w	r5, r3, fp
 800671c:	f04f 0200 	mov.w	r2, #0
 8006720:	f04f 0300 	mov.w	r3, #0
 8006724:	00eb      	lsls	r3, r5, #3
 8006726:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800672a:	00e2      	lsls	r2, r4, #3
 800672c:	4614      	mov	r4, r2
 800672e:	461d      	mov	r5, r3
 8006730:	4643      	mov	r3, r8
 8006732:	18e3      	adds	r3, r4, r3
 8006734:	603b      	str	r3, [r7, #0]
 8006736:	464b      	mov	r3, r9
 8006738:	eb45 0303 	adc.w	r3, r5, r3
 800673c:	607b      	str	r3, [r7, #4]
 800673e:	f04f 0200 	mov.w	r2, #0
 8006742:	f04f 0300 	mov.w	r3, #0
 8006746:	e9d7 4500 	ldrd	r4, r5, [r7]
 800674a:	4629      	mov	r1, r5
 800674c:	028b      	lsls	r3, r1, #10
 800674e:	4621      	mov	r1, r4
 8006750:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006754:	4621      	mov	r1, r4
 8006756:	028a      	lsls	r2, r1, #10
 8006758:	4610      	mov	r0, r2
 800675a:	4619      	mov	r1, r3
 800675c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800675e:	2200      	movs	r2, #0
 8006760:	61bb      	str	r3, [r7, #24]
 8006762:	61fa      	str	r2, [r7, #28]
 8006764:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006768:	f7f9 fd36 	bl	80001d8 <__aeabi_uldivmod>
 800676c:	4602      	mov	r2, r0
 800676e:	460b      	mov	r3, r1
 8006770:	4613      	mov	r3, r2
 8006772:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006774:	4b0b      	ldr	r3, [pc, #44]	@ (80067a4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006776:	685b      	ldr	r3, [r3, #4]
 8006778:	0c1b      	lsrs	r3, r3, #16
 800677a:	f003 0303 	and.w	r3, r3, #3
 800677e:	3301      	adds	r3, #1
 8006780:	005b      	lsls	r3, r3, #1
 8006782:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006784:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006786:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006788:	fbb2 f3f3 	udiv	r3, r2, r3
 800678c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800678e:	e002      	b.n	8006796 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006790:	4b05      	ldr	r3, [pc, #20]	@ (80067a8 <HAL_RCC_GetSysClockFreq+0x204>)
 8006792:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006794:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006796:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006798:	4618      	mov	r0, r3
 800679a:	3750      	adds	r7, #80	@ 0x50
 800679c:	46bd      	mov	sp, r7
 800679e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80067a2:	bf00      	nop
 80067a4:	40023800 	.word	0x40023800
 80067a8:	00f42400 	.word	0x00f42400
 80067ac:	007a1200 	.word	0x007a1200

080067b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80067b0:	b480      	push	{r7}
 80067b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80067b4:	4b03      	ldr	r3, [pc, #12]	@ (80067c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80067b6:	681b      	ldr	r3, [r3, #0]
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	46bd      	mov	sp, r7
 80067bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c0:	4770      	bx	lr
 80067c2:	bf00      	nop
 80067c4:	20000008 	.word	0x20000008

080067c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80067cc:	f7ff fff0 	bl	80067b0 <HAL_RCC_GetHCLKFreq>
 80067d0:	4602      	mov	r2, r0
 80067d2:	4b05      	ldr	r3, [pc, #20]	@ (80067e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80067d4:	689b      	ldr	r3, [r3, #8]
 80067d6:	0a9b      	lsrs	r3, r3, #10
 80067d8:	f003 0307 	and.w	r3, r3, #7
 80067dc:	4903      	ldr	r1, [pc, #12]	@ (80067ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80067de:	5ccb      	ldrb	r3, [r1, r3]
 80067e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80067e4:	4618      	mov	r0, r3
 80067e6:	bd80      	pop	{r7, pc}
 80067e8:	40023800 	.word	0x40023800
 80067ec:	0800d110 	.word	0x0800d110

080067f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80067f4:	f7ff ffdc 	bl	80067b0 <HAL_RCC_GetHCLKFreq>
 80067f8:	4602      	mov	r2, r0
 80067fa:	4b05      	ldr	r3, [pc, #20]	@ (8006810 <HAL_RCC_GetPCLK2Freq+0x20>)
 80067fc:	689b      	ldr	r3, [r3, #8]
 80067fe:	0b5b      	lsrs	r3, r3, #13
 8006800:	f003 0307 	and.w	r3, r3, #7
 8006804:	4903      	ldr	r1, [pc, #12]	@ (8006814 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006806:	5ccb      	ldrb	r3, [r1, r3]
 8006808:	fa22 f303 	lsr.w	r3, r2, r3
}
 800680c:	4618      	mov	r0, r3
 800680e:	bd80      	pop	{r7, pc}
 8006810:	40023800 	.word	0x40023800
 8006814:	0800d110 	.word	0x0800d110

08006818 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b086      	sub	sp, #24
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006820:	2300      	movs	r3, #0
 8006822:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006824:	2300      	movs	r3, #0
 8006826:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d003      	beq.n	8006838 <HAL_RCCEx_PeriphCLKConfig+0x20>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	2b07      	cmp	r3, #7
 8006836:	d904      	bls.n	8006842 <HAL_RCCEx_PeriphCLKConfig+0x2a>
 8006838:	f640 11fd 	movw	r1, #2557	@ 0x9fd
 800683c:	482c      	ldr	r0, [pc, #176]	@ (80068f0 <HAL_RCCEx_PeriphCLKConfig+0xd8>)
 800683e:	f7fa f951 	bl	8000ae4 <assert_failed>

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f003 0301 	and.w	r3, r3, #1
 800684a:	2b00      	cmp	r3, #0
 800684c:	d105      	bne.n	800685a <HAL_RCCEx_PeriphCLKConfig+0x42>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006856:	2b00      	cmp	r3, #0
 8006858:	d056      	beq.n	8006908 <HAL_RCCEx_PeriphCLKConfig+0xf0>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	689b      	ldr	r3, [r3, #8]
 800685e:	2b01      	cmp	r3, #1
 8006860:	d903      	bls.n	800686a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	689b      	ldr	r3, [r3, #8]
 8006866:	2b07      	cmp	r3, #7
 8006868:	d904      	bls.n	8006874 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800686a:	f640 2104 	movw	r1, #2564	@ 0xa04
 800686e:	4820      	ldr	r0, [pc, #128]	@ (80068f0 <HAL_RCCEx_PeriphCLKConfig+0xd8>)
 8006870:	f7fa f938 	bl	8000ae4 <assert_failed>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	685b      	ldr	r3, [r3, #4]
 8006878:	2b31      	cmp	r3, #49	@ 0x31
 800687a:	d904      	bls.n	8006886 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	685b      	ldr	r3, [r3, #4]
 8006880:	f5b3 7fd8 	cmp.w	r3, #432	@ 0x1b0
 8006884:	d904      	bls.n	8006890 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8006886:	f640 2105 	movw	r1, #2565	@ 0xa05
 800688a:	4819      	ldr	r0, [pc, #100]	@ (80068f0 <HAL_RCCEx_PeriphCLKConfig+0xd8>)
 800688c:	f7fa f92a 	bl	8000ae4 <assert_failed>
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006890:	4b18      	ldr	r3, [pc, #96]	@ (80068f4 <HAL_RCCEx_PeriphCLKConfig+0xdc>)
 8006892:	2200      	movs	r2, #0
 8006894:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006896:	f7fa fe93 	bl	80015c0 <HAL_GetTick>
 800689a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800689c:	e008      	b.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800689e:	f7fa fe8f 	bl	80015c0 <HAL_GetTick>
 80068a2:	4602      	mov	r2, r0
 80068a4:	697b      	ldr	r3, [r7, #20]
 80068a6:	1ad3      	subs	r3, r2, r3
 80068a8:	2b02      	cmp	r3, #2
 80068aa:	d901      	bls.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0x98>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80068ac:	2303      	movs	r3, #3
 80068ae:	e1a6      	b.n	8006bfe <HAL_RCCEx_PeriphCLKConfig+0x3e6>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80068b0:	4b11      	ldr	r3, [pc, #68]	@ (80068f8 <HAL_RCCEx_PeriphCLKConfig+0xe0>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d1f0      	bne.n	800689e <HAL_RCCEx_PeriphCLKConfig+0x86>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	685b      	ldr	r3, [r3, #4]
 80068c0:	019a      	lsls	r2, r3, #6
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	689b      	ldr	r3, [r3, #8]
 80068c6:	071b      	lsls	r3, r3, #28
 80068c8:	490b      	ldr	r1, [pc, #44]	@ (80068f8 <HAL_RCCEx_PeriphCLKConfig+0xe0>)
 80068ca:	4313      	orrs	r3, r2
 80068cc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80068d0:	4b08      	ldr	r3, [pc, #32]	@ (80068f4 <HAL_RCCEx_PeriphCLKConfig+0xdc>)
 80068d2:	2201      	movs	r2, #1
 80068d4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80068d6:	f7fa fe73 	bl	80015c0 <HAL_GetTick>
 80068da:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80068dc:	e00e      	b.n	80068fc <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80068de:	f7fa fe6f 	bl	80015c0 <HAL_GetTick>
 80068e2:	4602      	mov	r2, r0
 80068e4:	697b      	ldr	r3, [r7, #20]
 80068e6:	1ad3      	subs	r3, r2, r3
 80068e8:	2b02      	cmp	r3, #2
 80068ea:	d907      	bls.n	80068fc <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80068ec:	2303      	movs	r3, #3
 80068ee:	e186      	b.n	8006bfe <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 80068f0:	0800cfd8 	.word	0x0800cfd8
 80068f4:	42470068 	.word	0x42470068
 80068f8:	40023800 	.word	0x40023800
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80068fc:	4b88      	ldr	r3, [pc, #544]	@ (8006b20 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006904:	2b00      	cmp	r3, #0
 8006906:	d0ea      	beq.n	80068de <HAL_RCCEx_PeriphCLKConfig+0xc6>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f003 0302 	and.w	r3, r3, #2
 8006910:	2b00      	cmp	r3, #0
 8006912:	f000 8173 	beq.w	8006bfc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	68db      	ldr	r3, [r3, #12]
 800691a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800691e:	f000 80a6 	beq.w	8006a6e <HAL_RCCEx_PeriphCLKConfig+0x256>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	68db      	ldr	r3, [r3, #12]
 8006926:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800692a:	f000 80a0 	beq.w	8006a6e <HAL_RCCEx_PeriphCLKConfig+0x256>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	68db      	ldr	r3, [r3, #12]
 8006932:	4a7c      	ldr	r2, [pc, #496]	@ (8006b24 <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 8006934:	4293      	cmp	r3, r2
 8006936:	f000 809a 	beq.w	8006a6e <HAL_RCCEx_PeriphCLKConfig+0x256>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	68db      	ldr	r3, [r3, #12]
 800693e:	4a7a      	ldr	r2, [pc, #488]	@ (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006940:	4293      	cmp	r3, r2
 8006942:	f000 8094 	beq.w	8006a6e <HAL_RCCEx_PeriphCLKConfig+0x256>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	68db      	ldr	r3, [r3, #12]
 800694a:	4a78      	ldr	r2, [pc, #480]	@ (8006b2c <HAL_RCCEx_PeriphCLKConfig+0x314>)
 800694c:	4293      	cmp	r3, r2
 800694e:	f000 808e 	beq.w	8006a6e <HAL_RCCEx_PeriphCLKConfig+0x256>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	68db      	ldr	r3, [r3, #12]
 8006956:	4a76      	ldr	r2, [pc, #472]	@ (8006b30 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8006958:	4293      	cmp	r3, r2
 800695a:	f000 8088 	beq.w	8006a6e <HAL_RCCEx_PeriphCLKConfig+0x256>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	68db      	ldr	r3, [r3, #12]
 8006962:	4a74      	ldr	r2, [pc, #464]	@ (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8006964:	4293      	cmp	r3, r2
 8006966:	f000 8082 	beq.w	8006a6e <HAL_RCCEx_PeriphCLKConfig+0x256>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	68db      	ldr	r3, [r3, #12]
 800696e:	4a72      	ldr	r2, [pc, #456]	@ (8006b38 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d07c      	beq.n	8006a6e <HAL_RCCEx_PeriphCLKConfig+0x256>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	68db      	ldr	r3, [r3, #12]
 8006978:	4a70      	ldr	r2, [pc, #448]	@ (8006b3c <HAL_RCCEx_PeriphCLKConfig+0x324>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d077      	beq.n	8006a6e <HAL_RCCEx_PeriphCLKConfig+0x256>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	68db      	ldr	r3, [r3, #12]
 8006982:	4a6f      	ldr	r2, [pc, #444]	@ (8006b40 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8006984:	4293      	cmp	r3, r2
 8006986:	d072      	beq.n	8006a6e <HAL_RCCEx_PeriphCLKConfig+0x256>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	68db      	ldr	r3, [r3, #12]
 800698c:	4a6d      	ldr	r2, [pc, #436]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d06d      	beq.n	8006a6e <HAL_RCCEx_PeriphCLKConfig+0x256>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	68db      	ldr	r3, [r3, #12]
 8006996:	4a6c      	ldr	r2, [pc, #432]	@ (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d068      	beq.n	8006a6e <HAL_RCCEx_PeriphCLKConfig+0x256>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	68db      	ldr	r3, [r3, #12]
 80069a0:	4a6a      	ldr	r2, [pc, #424]	@ (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d063      	beq.n	8006a6e <HAL_RCCEx_PeriphCLKConfig+0x256>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	68db      	ldr	r3, [r3, #12]
 80069aa:	4a69      	ldr	r2, [pc, #420]	@ (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d05e      	beq.n	8006a6e <HAL_RCCEx_PeriphCLKConfig+0x256>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	68db      	ldr	r3, [r3, #12]
 80069b4:	4a67      	ldr	r2, [pc, #412]	@ (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d059      	beq.n	8006a6e <HAL_RCCEx_PeriphCLKConfig+0x256>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	68db      	ldr	r3, [r3, #12]
 80069be:	4a66      	ldr	r2, [pc, #408]	@ (8006b58 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d054      	beq.n	8006a6e <HAL_RCCEx_PeriphCLKConfig+0x256>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	68db      	ldr	r3, [r3, #12]
 80069c8:	4a64      	ldr	r2, [pc, #400]	@ (8006b5c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d04f      	beq.n	8006a6e <HAL_RCCEx_PeriphCLKConfig+0x256>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	68db      	ldr	r3, [r3, #12]
 80069d2:	4a63      	ldr	r2, [pc, #396]	@ (8006b60 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d04a      	beq.n	8006a6e <HAL_RCCEx_PeriphCLKConfig+0x256>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	68db      	ldr	r3, [r3, #12]
 80069dc:	4a61      	ldr	r2, [pc, #388]	@ (8006b64 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d045      	beq.n	8006a6e <HAL_RCCEx_PeriphCLKConfig+0x256>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	68db      	ldr	r3, [r3, #12]
 80069e6:	4a60      	ldr	r2, [pc, #384]	@ (8006b68 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d040      	beq.n	8006a6e <HAL_RCCEx_PeriphCLKConfig+0x256>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	68db      	ldr	r3, [r3, #12]
 80069f0:	4a5e      	ldr	r2, [pc, #376]	@ (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x354>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d03b      	beq.n	8006a6e <HAL_RCCEx_PeriphCLKConfig+0x256>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	68db      	ldr	r3, [r3, #12]
 80069fa:	4a5d      	ldr	r2, [pc, #372]	@ (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d036      	beq.n	8006a6e <HAL_RCCEx_PeriphCLKConfig+0x256>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	68db      	ldr	r3, [r3, #12]
 8006a04:	4a5b      	ldr	r2, [pc, #364]	@ (8006b74 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d031      	beq.n	8006a6e <HAL_RCCEx_PeriphCLKConfig+0x256>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	68db      	ldr	r3, [r3, #12]
 8006a0e:	4a5a      	ldr	r2, [pc, #360]	@ (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d02c      	beq.n	8006a6e <HAL_RCCEx_PeriphCLKConfig+0x256>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	68db      	ldr	r3, [r3, #12]
 8006a18:	4a58      	ldr	r2, [pc, #352]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d027      	beq.n	8006a6e <HAL_RCCEx_PeriphCLKConfig+0x256>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	68db      	ldr	r3, [r3, #12]
 8006a22:	4a57      	ldr	r2, [pc, #348]	@ (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d022      	beq.n	8006a6e <HAL_RCCEx_PeriphCLKConfig+0x256>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	68db      	ldr	r3, [r3, #12]
 8006a2c:	4a55      	ldr	r2, [pc, #340]	@ (8006b84 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d01d      	beq.n	8006a6e <HAL_RCCEx_PeriphCLKConfig+0x256>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	68db      	ldr	r3, [r3, #12]
 8006a36:	4a54      	ldr	r2, [pc, #336]	@ (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d018      	beq.n	8006a6e <HAL_RCCEx_PeriphCLKConfig+0x256>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	68db      	ldr	r3, [r3, #12]
 8006a40:	4a52      	ldr	r2, [pc, #328]	@ (8006b8c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d013      	beq.n	8006a6e <HAL_RCCEx_PeriphCLKConfig+0x256>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	68db      	ldr	r3, [r3, #12]
 8006a4a:	4a51      	ldr	r2, [pc, #324]	@ (8006b90 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d00e      	beq.n	8006a6e <HAL_RCCEx_PeriphCLKConfig+0x256>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	68db      	ldr	r3, [r3, #12]
 8006a54:	4a4f      	ldr	r2, [pc, #316]	@ (8006b94 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d009      	beq.n	8006a6e <HAL_RCCEx_PeriphCLKConfig+0x256>
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	68db      	ldr	r3, [r3, #12]
 8006a5e:	4a4e      	ldr	r2, [pc, #312]	@ (8006b98 <HAL_RCCEx_PeriphCLKConfig+0x380>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d004      	beq.n	8006a6e <HAL_RCCEx_PeriphCLKConfig+0x256>
 8006a64:	f640 2137 	movw	r1, #2615	@ 0xa37
 8006a68:	484c      	ldr	r0, [pc, #304]	@ (8006b9c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8006a6a:	f7fa f83b 	bl	8000ae4 <assert_failed>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006a6e:	2300      	movs	r3, #0
 8006a70:	60fb      	str	r3, [r7, #12]
 8006a72:	4b2b      	ldr	r3, [pc, #172]	@ (8006b20 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a76:	4a2a      	ldr	r2, [pc, #168]	@ (8006b20 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006a78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006a7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8006a7e:	4b28      	ldr	r3, [pc, #160]	@ (8006b20 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006a80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006a86:	60fb      	str	r3, [r7, #12]
 8006a88:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006a8a:	4b45      	ldr	r3, [pc, #276]	@ (8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4a44      	ldr	r2, [pc, #272]	@ (8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8006a90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006a94:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006a96:	f7fa fd93 	bl	80015c0 <HAL_GetTick>
 8006a9a:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006a9c:	e008      	b.n	8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x298>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a9e:	f7fa fd8f 	bl	80015c0 <HAL_GetTick>
 8006aa2:	4602      	mov	r2, r0
 8006aa4:	697b      	ldr	r3, [r7, #20]
 8006aa6:	1ad3      	subs	r3, r2, r3
 8006aa8:	2b02      	cmp	r3, #2
 8006aaa:	d901      	bls.n	8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x298>
      {
        return HAL_TIMEOUT;
 8006aac:	2303      	movs	r3, #3
 8006aae:	e0a6      	b.n	8006bfe <HAL_RCCEx_PeriphCLKConfig+0x3e6>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006ab0:	4b3b      	ldr	r3, [pc, #236]	@ (8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d0f0      	beq.n	8006a9e <HAL_RCCEx_PeriphCLKConfig+0x286>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006abc:	4b18      	ldr	r3, [pc, #96]	@ (8006b20 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006abe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ac0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006ac4:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006ac6:	693b      	ldr	r3, [r7, #16]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d073      	beq.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x39c>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	68db      	ldr	r3, [r3, #12]
 8006ad0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006ad4:	693a      	ldr	r2, [r7, #16]
 8006ad6:	429a      	cmp	r2, r3
 8006ad8:	d06c      	beq.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x39c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006ada:	4b11      	ldr	r3, [pc, #68]	@ (8006b20 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006adc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ade:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006ae2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006ae4:	4b2f      	ldr	r3, [pc, #188]	@ (8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8006ae6:	2201      	movs	r2, #1
 8006ae8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006aea:	4b2e      	ldr	r3, [pc, #184]	@ (8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8006aec:	2200      	movs	r2, #0
 8006aee:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006af0:	4a0b      	ldr	r2, [pc, #44]	@ (8006b20 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006af6:	4b0a      	ldr	r3, [pc, #40]	@ (8006b20 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006af8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006afa:	f003 0301 	and.w	r3, r3, #1
 8006afe:	2b01      	cmp	r3, #1
 8006b00:	d158      	bne.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x39c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006b02:	f7fa fd5d 	bl	80015c0 <HAL_GetTick>
 8006b06:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b08:	e04e      	b.n	8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x390>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b0a:	f7fa fd59 	bl	80015c0 <HAL_GetTick>
 8006b0e:	4602      	mov	r2, r0
 8006b10:	697b      	ldr	r3, [r7, #20]
 8006b12:	1ad3      	subs	r3, r2, r3
 8006b14:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d945      	bls.n	8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x390>
          {
            return HAL_TIMEOUT;
 8006b1c:	2303      	movs	r3, #3
 8006b1e:	e06e      	b.n	8006bfe <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8006b20:	40023800 	.word	0x40023800
 8006b24:	00020300 	.word	0x00020300
 8006b28:	00030300 	.word	0x00030300
 8006b2c:	00040300 	.word	0x00040300
 8006b30:	00050300 	.word	0x00050300
 8006b34:	00060300 	.word	0x00060300
 8006b38:	00070300 	.word	0x00070300
 8006b3c:	00080300 	.word	0x00080300
 8006b40:	00090300 	.word	0x00090300
 8006b44:	000a0300 	.word	0x000a0300
 8006b48:	000b0300 	.word	0x000b0300
 8006b4c:	000c0300 	.word	0x000c0300
 8006b50:	000d0300 	.word	0x000d0300
 8006b54:	000e0300 	.word	0x000e0300
 8006b58:	000f0300 	.word	0x000f0300
 8006b5c:	00100300 	.word	0x00100300
 8006b60:	00110300 	.word	0x00110300
 8006b64:	00120300 	.word	0x00120300
 8006b68:	00130300 	.word	0x00130300
 8006b6c:	00140300 	.word	0x00140300
 8006b70:	00150300 	.word	0x00150300
 8006b74:	00160300 	.word	0x00160300
 8006b78:	00170300 	.word	0x00170300
 8006b7c:	00180300 	.word	0x00180300
 8006b80:	00190300 	.word	0x00190300
 8006b84:	001a0300 	.word	0x001a0300
 8006b88:	001b0300 	.word	0x001b0300
 8006b8c:	001c0300 	.word	0x001c0300
 8006b90:	001d0300 	.word	0x001d0300
 8006b94:	001e0300 	.word	0x001e0300
 8006b98:	001f0300 	.word	0x001f0300
 8006b9c:	0800cfd8 	.word	0x0800cfd8
 8006ba0:	40007000 	.word	0x40007000
 8006ba4:	42470e40 	.word	0x42470e40
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ba8:	4b17      	ldr	r3, [pc, #92]	@ (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 8006baa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006bac:	f003 0302 	and.w	r3, r3, #2
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d0aa      	beq.n	8006b0a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	68db      	ldr	r3, [r3, #12]
 8006bb8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006bbc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006bc0:	d10d      	bne.n	8006bde <HAL_RCCEx_PeriphCLKConfig+0x3c6>
 8006bc2:	4b11      	ldr	r3, [pc, #68]	@ (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 8006bc4:	689b      	ldr	r3, [r3, #8]
 8006bc6:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	68db      	ldr	r3, [r3, #12]
 8006bce:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8006bd2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006bd6:	490c      	ldr	r1, [pc, #48]	@ (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 8006bd8:	4313      	orrs	r3, r2
 8006bda:	608b      	str	r3, [r1, #8]
 8006bdc:	e005      	b.n	8006bea <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 8006bde:	4b0a      	ldr	r3, [pc, #40]	@ (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 8006be0:	689b      	ldr	r3, [r3, #8]
 8006be2:	4a09      	ldr	r2, [pc, #36]	@ (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 8006be4:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8006be8:	6093      	str	r3, [r2, #8]
 8006bea:	4b07      	ldr	r3, [pc, #28]	@ (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 8006bec:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	68db      	ldr	r3, [r3, #12]
 8006bf2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006bf6:	4904      	ldr	r1, [pc, #16]	@ (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 8006bf8:	4313      	orrs	r3, r2
 8006bfa:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006bfc:	2300      	movs	r3, #0
}
 8006bfe:	4618      	mov	r0, r3
 8006c00:	3718      	adds	r7, #24
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bd80      	pop	{r7, pc}
 8006c06:	bf00      	nop
 8006c08:	40023800 	.word	0x40023800

08006c0c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	b087      	sub	sp, #28
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8006c14:	2300      	movs	r3, #0
 8006c16:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8006c18:	2300      	movs	r3, #0
 8006c1a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8006c20:	2300      	movs	r3, #0
 8006c22:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2b01      	cmp	r3, #1
 8006c28:	d13f      	bne.n	8006caa <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8006c2a:	4b24      	ldr	r3, [pc, #144]	@ (8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006c2c:	689b      	ldr	r3, [r3, #8]
 8006c2e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006c32:	60fb      	str	r3, [r7, #12]
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d006      	beq.n	8006c48 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006c40:	d12f      	bne.n	8006ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8006c42:	4b1f      	ldr	r3, [pc, #124]	@ (8006cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8006c44:	617b      	str	r3, [r7, #20]
          break;
 8006c46:	e02f      	b.n	8006ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006c48:	4b1c      	ldr	r3, [pc, #112]	@ (8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006c4a:	685b      	ldr	r3, [r3, #4]
 8006c4c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006c50:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006c54:	d108      	bne.n	8006c68 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006c56:	4b19      	ldr	r3, [pc, #100]	@ (8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006c58:	685b      	ldr	r3, [r3, #4]
 8006c5a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006c5e:	4a19      	ldr	r2, [pc, #100]	@ (8006cc4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8006c60:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c64:	613b      	str	r3, [r7, #16]
 8006c66:	e007      	b.n	8006c78 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006c68:	4b14      	ldr	r3, [pc, #80]	@ (8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006c6a:	685b      	ldr	r3, [r3, #4]
 8006c6c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006c70:	4a15      	ldr	r2, [pc, #84]	@ (8006cc8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8006c72:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c76:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8006c78:	4b10      	ldr	r3, [pc, #64]	@ (8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006c7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006c7e:	099b      	lsrs	r3, r3, #6
 8006c80:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006c84:	693b      	ldr	r3, [r7, #16]
 8006c86:	fb02 f303 	mul.w	r3, r2, r3
 8006c8a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8006c8c:	4b0b      	ldr	r3, [pc, #44]	@ (8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006c8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006c92:	0f1b      	lsrs	r3, r3, #28
 8006c94:	f003 0307 	and.w	r3, r3, #7
 8006c98:	68ba      	ldr	r2, [r7, #8]
 8006c9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c9e:	617b      	str	r3, [r7, #20]
          break;
 8006ca0:	e002      	b.n	8006ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	617b      	str	r3, [r7, #20]
          break;
 8006ca6:	bf00      	nop
        }
      }
      break;
 8006ca8:	e000      	b.n	8006cac <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8006caa:	bf00      	nop
    }
  }
  return frequency;
 8006cac:	697b      	ldr	r3, [r7, #20]
}
 8006cae:	4618      	mov	r0, r3
 8006cb0:	371c      	adds	r7, #28
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb8:	4770      	bx	lr
 8006cba:	bf00      	nop
 8006cbc:	40023800 	.word	0x40023800
 8006cc0:	00bb8000 	.word	0x00bb8000
 8006cc4:	007a1200 	.word	0x007a1200
 8006cc8:	00f42400 	.word	0x00f42400

08006ccc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b082      	sub	sp, #8
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d101      	bne.n	8006cde <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006cda:	2301      	movs	r3, #1
 8006cdc:	e17e      	b.n	8006fdc <HAL_SPI_Init+0x310>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	4a70      	ldr	r2, [pc, #448]	@ (8006ea4 <HAL_SPI_Init+0x1d8>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d00e      	beq.n	8006d06 <HAL_SPI_Init+0x3a>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4a6e      	ldr	r2, [pc, #440]	@ (8006ea8 <HAL_SPI_Init+0x1dc>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d009      	beq.n	8006d06 <HAL_SPI_Init+0x3a>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	4a6d      	ldr	r2, [pc, #436]	@ (8006eac <HAL_SPI_Init+0x1e0>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d004      	beq.n	8006d06 <HAL_SPI_Init+0x3a>
 8006cfc:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 8006d00:	486b      	ldr	r0, [pc, #428]	@ (8006eb0 <HAL_SPI_Init+0x1e4>)
 8006d02:	f7f9 feef 	bl	8000ae4 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	685b      	ldr	r3, [r3, #4]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d009      	beq.n	8006d22 <HAL_SPI_Init+0x56>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	685b      	ldr	r3, [r3, #4]
 8006d12:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006d16:	d004      	beq.n	8006d22 <HAL_SPI_Init+0x56>
 8006d18:	f240 1141 	movw	r1, #321	@ 0x141
 8006d1c:	4864      	ldr	r0, [pc, #400]	@ (8006eb0 <HAL_SPI_Init+0x1e4>)
 8006d1e:	f7f9 fee1 	bl	8000ae4 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	689b      	ldr	r3, [r3, #8]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d00e      	beq.n	8006d48 <HAL_SPI_Init+0x7c>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	689b      	ldr	r3, [r3, #8]
 8006d2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d32:	d009      	beq.n	8006d48 <HAL_SPI_Init+0x7c>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	689b      	ldr	r3, [r3, #8]
 8006d38:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006d3c:	d004      	beq.n	8006d48 <HAL_SPI_Init+0x7c>
 8006d3e:	f44f 71a1 	mov.w	r1, #322	@ 0x142
 8006d42:	485b      	ldr	r0, [pc, #364]	@ (8006eb0 <HAL_SPI_Init+0x1e4>)
 8006d44:	f7f9 fece 	bl	8000ae4 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	68db      	ldr	r3, [r3, #12]
 8006d4c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006d50:	d008      	beq.n	8006d64 <HAL_SPI_Init+0x98>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	68db      	ldr	r3, [r3, #12]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d004      	beq.n	8006d64 <HAL_SPI_Init+0x98>
 8006d5a:	f240 1143 	movw	r1, #323	@ 0x143
 8006d5e:	4854      	ldr	r0, [pc, #336]	@ (8006eb0 <HAL_SPI_Init+0x1e4>)
 8006d60:	f7f9 fec0 	bl	8000ae4 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	699b      	ldr	r3, [r3, #24]
 8006d68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d6c:	d00d      	beq.n	8006d8a <HAL_SPI_Init+0xbe>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	699b      	ldr	r3, [r3, #24]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d009      	beq.n	8006d8a <HAL_SPI_Init+0xbe>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	699b      	ldr	r3, [r3, #24]
 8006d7a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006d7e:	d004      	beq.n	8006d8a <HAL_SPI_Init+0xbe>
 8006d80:	f44f 71a2 	mov.w	r1, #324	@ 0x144
 8006d84:	484a      	ldr	r0, [pc, #296]	@ (8006eb0 <HAL_SPI_Init+0x1e4>)
 8006d86:	f7f9 fead 	bl	8000ae4 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	69db      	ldr	r3, [r3, #28]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d020      	beq.n	8006dd4 <HAL_SPI_Init+0x108>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	69db      	ldr	r3, [r3, #28]
 8006d96:	2b08      	cmp	r3, #8
 8006d98:	d01c      	beq.n	8006dd4 <HAL_SPI_Init+0x108>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	69db      	ldr	r3, [r3, #28]
 8006d9e:	2b10      	cmp	r3, #16
 8006da0:	d018      	beq.n	8006dd4 <HAL_SPI_Init+0x108>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	69db      	ldr	r3, [r3, #28]
 8006da6:	2b18      	cmp	r3, #24
 8006da8:	d014      	beq.n	8006dd4 <HAL_SPI_Init+0x108>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	69db      	ldr	r3, [r3, #28]
 8006dae:	2b20      	cmp	r3, #32
 8006db0:	d010      	beq.n	8006dd4 <HAL_SPI_Init+0x108>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	69db      	ldr	r3, [r3, #28]
 8006db6:	2b28      	cmp	r3, #40	@ 0x28
 8006db8:	d00c      	beq.n	8006dd4 <HAL_SPI_Init+0x108>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	69db      	ldr	r3, [r3, #28]
 8006dbe:	2b30      	cmp	r3, #48	@ 0x30
 8006dc0:	d008      	beq.n	8006dd4 <HAL_SPI_Init+0x108>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	69db      	ldr	r3, [r3, #28]
 8006dc6:	2b38      	cmp	r3, #56	@ 0x38
 8006dc8:	d004      	beq.n	8006dd4 <HAL_SPI_Init+0x108>
 8006dca:	f240 1145 	movw	r1, #325	@ 0x145
 8006dce:	4838      	ldr	r0, [pc, #224]	@ (8006eb0 <HAL_SPI_Init+0x1e4>)
 8006dd0:	f7f9 fe88 	bl	8000ae4 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6a1b      	ldr	r3, [r3, #32]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d008      	beq.n	8006dee <HAL_SPI_Init+0x122>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6a1b      	ldr	r3, [r3, #32]
 8006de0:	2b80      	cmp	r3, #128	@ 0x80
 8006de2:	d004      	beq.n	8006dee <HAL_SPI_Init+0x122>
 8006de4:	f44f 71a3 	mov.w	r1, #326	@ 0x146
 8006de8:	4831      	ldr	r0, [pc, #196]	@ (8006eb0 <HAL_SPI_Init+0x1e4>)
 8006dea:	f7f9 fe7b 	bl	8000ae4 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d008      	beq.n	8006e08 <HAL_SPI_Init+0x13c>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dfa:	2b10      	cmp	r3, #16
 8006dfc:	d004      	beq.n	8006e08 <HAL_SPI_Init+0x13c>
 8006dfe:	f240 1147 	movw	r1, #327	@ 0x147
 8006e02:	482b      	ldr	r0, [pc, #172]	@ (8006eb0 <HAL_SPI_Init+0x1e4>)
 8006e04:	f7f9 fe6e 	bl	8000ae4 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d151      	bne.n	8006eb4 <HAL_SPI_Init+0x1e8>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	691b      	ldr	r3, [r3, #16]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d008      	beq.n	8006e2a <HAL_SPI_Init+0x15e>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	691b      	ldr	r3, [r3, #16]
 8006e1c:	2b02      	cmp	r3, #2
 8006e1e:	d004      	beq.n	8006e2a <HAL_SPI_Init+0x15e>
 8006e20:	f44f 71a5 	mov.w	r1, #330	@ 0x14a
 8006e24:	4822      	ldr	r0, [pc, #136]	@ (8006eb0 <HAL_SPI_Init+0x1e4>)
 8006e26:	f7f9 fe5d 	bl	8000ae4 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	695b      	ldr	r3, [r3, #20]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d008      	beq.n	8006e44 <HAL_SPI_Init+0x178>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	695b      	ldr	r3, [r3, #20]
 8006e36:	2b01      	cmp	r3, #1
 8006e38:	d004      	beq.n	8006e44 <HAL_SPI_Init+0x178>
 8006e3a:	f240 114b 	movw	r1, #331	@ 0x14b
 8006e3e:	481c      	ldr	r0, [pc, #112]	@ (8006eb0 <HAL_SPI_Init+0x1e4>)
 8006e40:	f7f9 fe50 	bl	8000ae4 <assert_failed>

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	685b      	ldr	r3, [r3, #4]
 8006e48:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006e4c:	d125      	bne.n	8006e9a <HAL_SPI_Init+0x1ce>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	69db      	ldr	r3, [r3, #28]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d059      	beq.n	8006f0a <HAL_SPI_Init+0x23e>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	69db      	ldr	r3, [r3, #28]
 8006e5a:	2b08      	cmp	r3, #8
 8006e5c:	d055      	beq.n	8006f0a <HAL_SPI_Init+0x23e>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	69db      	ldr	r3, [r3, #28]
 8006e62:	2b10      	cmp	r3, #16
 8006e64:	d051      	beq.n	8006f0a <HAL_SPI_Init+0x23e>
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	69db      	ldr	r3, [r3, #28]
 8006e6a:	2b18      	cmp	r3, #24
 8006e6c:	d04d      	beq.n	8006f0a <HAL_SPI_Init+0x23e>
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	69db      	ldr	r3, [r3, #28]
 8006e72:	2b20      	cmp	r3, #32
 8006e74:	d049      	beq.n	8006f0a <HAL_SPI_Init+0x23e>
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	69db      	ldr	r3, [r3, #28]
 8006e7a:	2b28      	cmp	r3, #40	@ 0x28
 8006e7c:	d045      	beq.n	8006f0a <HAL_SPI_Init+0x23e>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	69db      	ldr	r3, [r3, #28]
 8006e82:	2b30      	cmp	r3, #48	@ 0x30
 8006e84:	d041      	beq.n	8006f0a <HAL_SPI_Init+0x23e>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	69db      	ldr	r3, [r3, #28]
 8006e8a:	2b38      	cmp	r3, #56	@ 0x38
 8006e8c:	d03d      	beq.n	8006f0a <HAL_SPI_Init+0x23e>
 8006e8e:	f240 114f 	movw	r1, #335	@ 0x14f
 8006e92:	4807      	ldr	r0, [pc, #28]	@ (8006eb0 <HAL_SPI_Init+0x1e4>)
 8006e94:	f7f9 fe26 	bl	8000ae4 <assert_failed>
 8006e98:	e037      	b.n	8006f0a <HAL_SPI_Init+0x23e>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	61da      	str	r2, [r3, #28]
 8006ea0:	e033      	b.n	8006f0a <HAL_SPI_Init+0x23e>
 8006ea2:	bf00      	nop
 8006ea4:	40013000 	.word	0x40013000
 8006ea8:	40003800 	.word	0x40003800
 8006eac:	40003c00 	.word	0x40003c00
 8006eb0:	0800d014 	.word	0x0800d014
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	69db      	ldr	r3, [r3, #28]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d020      	beq.n	8006efe <HAL_SPI_Init+0x232>
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	69db      	ldr	r3, [r3, #28]
 8006ec0:	2b08      	cmp	r3, #8
 8006ec2:	d01c      	beq.n	8006efe <HAL_SPI_Init+0x232>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	69db      	ldr	r3, [r3, #28]
 8006ec8:	2b10      	cmp	r3, #16
 8006eca:	d018      	beq.n	8006efe <HAL_SPI_Init+0x232>
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	69db      	ldr	r3, [r3, #28]
 8006ed0:	2b18      	cmp	r3, #24
 8006ed2:	d014      	beq.n	8006efe <HAL_SPI_Init+0x232>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	69db      	ldr	r3, [r3, #28]
 8006ed8:	2b20      	cmp	r3, #32
 8006eda:	d010      	beq.n	8006efe <HAL_SPI_Init+0x232>
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	69db      	ldr	r3, [r3, #28]
 8006ee0:	2b28      	cmp	r3, #40	@ 0x28
 8006ee2:	d00c      	beq.n	8006efe <HAL_SPI_Init+0x232>
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	69db      	ldr	r3, [r3, #28]
 8006ee8:	2b30      	cmp	r3, #48	@ 0x30
 8006eea:	d008      	beq.n	8006efe <HAL_SPI_Init+0x232>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	69db      	ldr	r3, [r3, #28]
 8006ef0:	2b38      	cmp	r3, #56	@ 0x38
 8006ef2:	d004      	beq.n	8006efe <HAL_SPI_Init+0x232>
 8006ef4:	f240 1159 	movw	r1, #345	@ 0x159
 8006ef8:	483a      	ldr	r0, [pc, #232]	@ (8006fe4 <HAL_SPI_Init+0x318>)
 8006efa:	f7f9 fdf3 	bl	8000ae4 <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2200      	movs	r2, #0
 8006f02:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2200      	movs	r2, #0
 8006f08:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006f16:	b2db      	uxtb	r3, r3
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d106      	bne.n	8006f2a <HAL_SPI_Init+0x25e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2200      	movs	r2, #0
 8006f20:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006f24:	6878      	ldr	r0, [r7, #4]
 8006f26:	f7fa f895 	bl	8001054 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2202      	movs	r2, #2
 8006f2e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	681a      	ldr	r2, [r3, #0]
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006f40:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	685b      	ldr	r3, [r3, #4]
 8006f46:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	689b      	ldr	r3, [r3, #8]
 8006f4e:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006f52:	431a      	orrs	r2, r3
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	68db      	ldr	r3, [r3, #12]
 8006f58:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006f5c:	431a      	orrs	r2, r3
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	691b      	ldr	r3, [r3, #16]
 8006f62:	f003 0302 	and.w	r3, r3, #2
 8006f66:	431a      	orrs	r2, r3
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	695b      	ldr	r3, [r3, #20]
 8006f6c:	f003 0301 	and.w	r3, r3, #1
 8006f70:	431a      	orrs	r2, r3
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	699b      	ldr	r3, [r3, #24]
 8006f76:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006f7a:	431a      	orrs	r2, r3
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	69db      	ldr	r3, [r3, #28]
 8006f80:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006f84:	431a      	orrs	r2, r3
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6a1b      	ldr	r3, [r3, #32]
 8006f8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f8e:	ea42 0103 	orr.w	r1, r2, r3
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f96:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	430a      	orrs	r2, r1
 8006fa0:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	699b      	ldr	r3, [r3, #24]
 8006fa6:	0c1b      	lsrs	r3, r3, #16
 8006fa8:	f003 0104 	and.w	r1, r3, #4
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fb0:	f003 0210 	and.w	r2, r3, #16
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	430a      	orrs	r2, r1
 8006fba:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	69da      	ldr	r2, [r3, #28]
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006fca:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2201      	movs	r2, #1
 8006fd6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006fda:	2300      	movs	r3, #0
}
 8006fdc:	4618      	mov	r0, r3
 8006fde:	3708      	adds	r7, #8
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	bd80      	pop	{r7, pc}
 8006fe4:	0800d014 	.word	0x0800d014

08006fe8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b082      	sub	sp, #8
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d101      	bne.n	8006ffa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	e0ed      	b.n	80071d6 <HAL_TIM_PWM_Init+0x1ee>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	4a78      	ldr	r2, [pc, #480]	@ (80071e0 <HAL_TIM_PWM_Init+0x1f8>)
 8007000:	4293      	cmp	r3, r2
 8007002:	d045      	beq.n	8007090 <HAL_TIM_PWM_Init+0xa8>
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800700c:	d040      	beq.n	8007090 <HAL_TIM_PWM_Init+0xa8>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	4a74      	ldr	r2, [pc, #464]	@ (80071e4 <HAL_TIM_PWM_Init+0x1fc>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d03b      	beq.n	8007090 <HAL_TIM_PWM_Init+0xa8>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4a72      	ldr	r2, [pc, #456]	@ (80071e8 <HAL_TIM_PWM_Init+0x200>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d036      	beq.n	8007090 <HAL_TIM_PWM_Init+0xa8>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	4a71      	ldr	r2, [pc, #452]	@ (80071ec <HAL_TIM_PWM_Init+0x204>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d031      	beq.n	8007090 <HAL_TIM_PWM_Init+0xa8>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4a6f      	ldr	r2, [pc, #444]	@ (80071f0 <HAL_TIM_PWM_Init+0x208>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d02c      	beq.n	8007090 <HAL_TIM_PWM_Init+0xa8>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4a6e      	ldr	r2, [pc, #440]	@ (80071f4 <HAL_TIM_PWM_Init+0x20c>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d027      	beq.n	8007090 <HAL_TIM_PWM_Init+0xa8>
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4a6c      	ldr	r2, [pc, #432]	@ (80071f8 <HAL_TIM_PWM_Init+0x210>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d022      	beq.n	8007090 <HAL_TIM_PWM_Init+0xa8>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	4a6b      	ldr	r2, [pc, #428]	@ (80071fc <HAL_TIM_PWM_Init+0x214>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d01d      	beq.n	8007090 <HAL_TIM_PWM_Init+0xa8>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4a69      	ldr	r2, [pc, #420]	@ (8007200 <HAL_TIM_PWM_Init+0x218>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d018      	beq.n	8007090 <HAL_TIM_PWM_Init+0xa8>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4a68      	ldr	r2, [pc, #416]	@ (8007204 <HAL_TIM_PWM_Init+0x21c>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d013      	beq.n	8007090 <HAL_TIM_PWM_Init+0xa8>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	4a66      	ldr	r2, [pc, #408]	@ (8007208 <HAL_TIM_PWM_Init+0x220>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d00e      	beq.n	8007090 <HAL_TIM_PWM_Init+0xa8>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	4a65      	ldr	r2, [pc, #404]	@ (800720c <HAL_TIM_PWM_Init+0x224>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d009      	beq.n	8007090 <HAL_TIM_PWM_Init+0xa8>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	4a63      	ldr	r2, [pc, #396]	@ (8007210 <HAL_TIM_PWM_Init+0x228>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d004      	beq.n	8007090 <HAL_TIM_PWM_Init+0xa8>
 8007086:	f240 512c 	movw	r1, #1324	@ 0x52c
 800708a:	4862      	ldr	r0, [pc, #392]	@ (8007214 <HAL_TIM_PWM_Init+0x22c>)
 800708c:	f7f9 fd2a 	bl	8000ae4 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	689b      	ldr	r3, [r3, #8]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d014      	beq.n	80070c2 <HAL_TIM_PWM_Init+0xda>
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	689b      	ldr	r3, [r3, #8]
 800709c:	2b10      	cmp	r3, #16
 800709e:	d010      	beq.n	80070c2 <HAL_TIM_PWM_Init+0xda>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	689b      	ldr	r3, [r3, #8]
 80070a4:	2b20      	cmp	r3, #32
 80070a6:	d00c      	beq.n	80070c2 <HAL_TIM_PWM_Init+0xda>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	689b      	ldr	r3, [r3, #8]
 80070ac:	2b40      	cmp	r3, #64	@ 0x40
 80070ae:	d008      	beq.n	80070c2 <HAL_TIM_PWM_Init+0xda>
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	689b      	ldr	r3, [r3, #8]
 80070b4:	2b60      	cmp	r3, #96	@ 0x60
 80070b6:	d004      	beq.n	80070c2 <HAL_TIM_PWM_Init+0xda>
 80070b8:	f240 512d 	movw	r1, #1325	@ 0x52d
 80070bc:	4855      	ldr	r0, [pc, #340]	@ (8007214 <HAL_TIM_PWM_Init+0x22c>)
 80070be:	f7f9 fd11 	bl	8000ae4 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	691b      	ldr	r3, [r3, #16]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d00e      	beq.n	80070e8 <HAL_TIM_PWM_Init+0x100>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	691b      	ldr	r3, [r3, #16]
 80070ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80070d2:	d009      	beq.n	80070e8 <HAL_TIM_PWM_Init+0x100>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	691b      	ldr	r3, [r3, #16]
 80070d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80070dc:	d004      	beq.n	80070e8 <HAL_TIM_PWM_Init+0x100>
 80070de:	f240 512e 	movw	r1, #1326	@ 0x52e
 80070e2:	484c      	ldr	r0, [pc, #304]	@ (8007214 <HAL_TIM_PWM_Init+0x22c>)
 80070e4:	f7f9 fcfe 	bl	8000ae4 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80070f0:	d004      	beq.n	80070fc <HAL_TIM_PWM_Init+0x114>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4a3d      	ldr	r2, [pc, #244]	@ (80071ec <HAL_TIM_PWM_Init+0x204>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d107      	bne.n	800710c <HAL_TIM_PWM_Init+0x124>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	68db      	ldr	r3, [r3, #12]
 8007100:	2b00      	cmp	r3, #0
 8007102:	bf14      	ite	ne
 8007104:	2301      	movne	r3, #1
 8007106:	2300      	moveq	r3, #0
 8007108:	b2db      	uxtb	r3, r3
 800710a:	e00e      	b.n	800712a <HAL_TIM_PWM_Init+0x142>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	68db      	ldr	r3, [r3, #12]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d006      	beq.n	8007122 <HAL_TIM_PWM_Init+0x13a>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	68db      	ldr	r3, [r3, #12]
 8007118:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800711c:	d201      	bcs.n	8007122 <HAL_TIM_PWM_Init+0x13a>
 800711e:	2301      	movs	r3, #1
 8007120:	e000      	b.n	8007124 <HAL_TIM_PWM_Init+0x13c>
 8007122:	2300      	movs	r3, #0
 8007124:	f003 0301 	and.w	r3, r3, #1
 8007128:	b2db      	uxtb	r3, r3
 800712a:	2b00      	cmp	r3, #0
 800712c:	d104      	bne.n	8007138 <HAL_TIM_PWM_Init+0x150>
 800712e:	f240 512f 	movw	r1, #1327	@ 0x52f
 8007132:	4838      	ldr	r0, [pc, #224]	@ (8007214 <HAL_TIM_PWM_Init+0x22c>)
 8007134:	f7f9 fcd6 	bl	8000ae4 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	699b      	ldr	r3, [r3, #24]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d008      	beq.n	8007152 <HAL_TIM_PWM_Init+0x16a>
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	699b      	ldr	r3, [r3, #24]
 8007144:	2b80      	cmp	r3, #128	@ 0x80
 8007146:	d004      	beq.n	8007152 <HAL_TIM_PWM_Init+0x16a>
 8007148:	f44f 61a6 	mov.w	r1, #1328	@ 0x530
 800714c:	4831      	ldr	r0, [pc, #196]	@ (8007214 <HAL_TIM_PWM_Init+0x22c>)
 800714e:	f7f9 fcc9 	bl	8000ae4 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007158:	b2db      	uxtb	r3, r3
 800715a:	2b00      	cmp	r3, #0
 800715c:	d106      	bne.n	800716c <HAL_TIM_PWM_Init+0x184>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2200      	movs	r2, #0
 8007162:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f7fa f8c8 	bl	80012fc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2202      	movs	r2, #2
 8007170:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681a      	ldr	r2, [r3, #0]
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	3304      	adds	r3, #4
 800717c:	4619      	mov	r1, r3
 800717e:	4610      	mov	r0, r2
 8007180:	f000 fa22 	bl	80075c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2201      	movs	r2, #1
 8007188:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2201      	movs	r2, #1
 8007190:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2201      	movs	r2, #1
 8007198:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2201      	movs	r2, #1
 80071a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2201      	movs	r2, #1
 80071a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2201      	movs	r2, #1
 80071b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2201      	movs	r2, #1
 80071b8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2201      	movs	r2, #1
 80071c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2201      	movs	r2, #1
 80071c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2201      	movs	r2, #1
 80071d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80071d4:	2300      	movs	r3, #0
}
 80071d6:	4618      	mov	r0, r3
 80071d8:	3708      	adds	r7, #8
 80071da:	46bd      	mov	sp, r7
 80071dc:	bd80      	pop	{r7, pc}
 80071de:	bf00      	nop
 80071e0:	40010000 	.word	0x40010000
 80071e4:	40000400 	.word	0x40000400
 80071e8:	40000800 	.word	0x40000800
 80071ec:	40000c00 	.word	0x40000c00
 80071f0:	40001000 	.word	0x40001000
 80071f4:	40001400 	.word	0x40001400
 80071f8:	40010400 	.word	0x40010400
 80071fc:	40014000 	.word	0x40014000
 8007200:	40014400 	.word	0x40014400
 8007204:	40014800 	.word	0x40014800
 8007208:	40001800 	.word	0x40001800
 800720c:	40001c00 	.word	0x40001c00
 8007210:	40002000 	.word	0x40002000
 8007214:	0800d04c 	.word	0x0800d04c

08007218 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b086      	sub	sp, #24
 800721c:	af00      	add	r7, sp, #0
 800721e:	60f8      	str	r0, [r7, #12]
 8007220:	60b9      	str	r1, [r7, #8]
 8007222:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007224:	2300      	movs	r3, #0
 8007226:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d010      	beq.n	8007250 <HAL_TIM_PWM_ConfigChannel+0x38>
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2b04      	cmp	r3, #4
 8007232:	d00d      	beq.n	8007250 <HAL_TIM_PWM_ConfigChannel+0x38>
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2b08      	cmp	r3, #8
 8007238:	d00a      	beq.n	8007250 <HAL_TIM_PWM_ConfigChannel+0x38>
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2b0c      	cmp	r3, #12
 800723e:	d007      	beq.n	8007250 <HAL_TIM_PWM_ConfigChannel+0x38>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2b3c      	cmp	r3, #60	@ 0x3c
 8007244:	d004      	beq.n	8007250 <HAL_TIM_PWM_ConfigChannel+0x38>
 8007246:	f241 0182 	movw	r1, #4226	@ 0x1082
 800724a:	4883      	ldr	r0, [pc, #524]	@ (8007458 <HAL_TIM_PWM_ConfigChannel+0x240>)
 800724c:	f7f9 fc4a 	bl	8000ae4 <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 8007250:	68bb      	ldr	r3, [r7, #8]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	2b60      	cmp	r3, #96	@ 0x60
 8007256:	d008      	beq.n	800726a <HAL_TIM_PWM_ConfigChannel+0x52>
 8007258:	68bb      	ldr	r3, [r7, #8]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	2b70      	cmp	r3, #112	@ 0x70
 800725e:	d004      	beq.n	800726a <HAL_TIM_PWM_ConfigChannel+0x52>
 8007260:	f241 0183 	movw	r1, #4227	@ 0x1083
 8007264:	487c      	ldr	r0, [pc, #496]	@ (8007458 <HAL_TIM_PWM_ConfigChannel+0x240>)
 8007266:	f7f9 fc3d 	bl	8000ae4 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 800726a:	68bb      	ldr	r3, [r7, #8]
 800726c:	689b      	ldr	r3, [r3, #8]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d008      	beq.n	8007284 <HAL_TIM_PWM_ConfigChannel+0x6c>
 8007272:	68bb      	ldr	r3, [r7, #8]
 8007274:	689b      	ldr	r3, [r3, #8]
 8007276:	2b02      	cmp	r3, #2
 8007278:	d004      	beq.n	8007284 <HAL_TIM_PWM_ConfigChannel+0x6c>
 800727a:	f241 0184 	movw	r1, #4228	@ 0x1084
 800727e:	4876      	ldr	r0, [pc, #472]	@ (8007458 <HAL_TIM_PWM_ConfigChannel+0x240>)
 8007280:	f7f9 fc30 	bl	8000ae4 <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	691b      	ldr	r3, [r3, #16]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d008      	beq.n	800729e <HAL_TIM_PWM_ConfigChannel+0x86>
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	691b      	ldr	r3, [r3, #16]
 8007290:	2b04      	cmp	r3, #4
 8007292:	d004      	beq.n	800729e <HAL_TIM_PWM_ConfigChannel+0x86>
 8007294:	f241 0185 	movw	r1, #4229	@ 0x1085
 8007298:	486f      	ldr	r0, [pc, #444]	@ (8007458 <HAL_TIM_PWM_ConfigChannel+0x240>)
 800729a:	f7f9 fc23 	bl	8000ae4 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80072a4:	2b01      	cmp	r3, #1
 80072a6:	d101      	bne.n	80072ac <HAL_TIM_PWM_ConfigChannel+0x94>
 80072a8:	2302      	movs	r3, #2
 80072aa:	e17c      	b.n	80075a6 <HAL_TIM_PWM_ConfigChannel+0x38e>
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	2201      	movs	r2, #1
 80072b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2b0c      	cmp	r3, #12
 80072b8:	f200 816d 	bhi.w	8007596 <HAL_TIM_PWM_ConfigChannel+0x37e>
 80072bc:	a201      	add	r2, pc, #4	@ (adr r2, 80072c4 <HAL_TIM_PWM_ConfigChannel+0xac>)
 80072be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072c2:	bf00      	nop
 80072c4:	080072f9 	.word	0x080072f9
 80072c8:	08007597 	.word	0x08007597
 80072cc:	08007597 	.word	0x08007597
 80072d0:	08007597 	.word	0x08007597
 80072d4:	080073bb 	.word	0x080073bb
 80072d8:	08007597 	.word	0x08007597
 80072dc:	08007597 	.word	0x08007597
 80072e0:	08007597 	.word	0x08007597
 80072e4:	08007489 	.word	0x08007489
 80072e8:	08007597 	.word	0x08007597
 80072ec:	08007597 	.word	0x08007597
 80072f0:	08007597 	.word	0x08007597
 80072f4:	0800750f 	.word	0x0800750f
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	4a57      	ldr	r2, [pc, #348]	@ (800745c <HAL_TIM_PWM_ConfigChannel+0x244>)
 80072fe:	4293      	cmp	r3, r2
 8007300:	d03b      	beq.n	800737a <HAL_TIM_PWM_ConfigChannel+0x162>
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800730a:	d036      	beq.n	800737a <HAL_TIM_PWM_ConfigChannel+0x162>
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	4a53      	ldr	r2, [pc, #332]	@ (8007460 <HAL_TIM_PWM_ConfigChannel+0x248>)
 8007312:	4293      	cmp	r3, r2
 8007314:	d031      	beq.n	800737a <HAL_TIM_PWM_ConfigChannel+0x162>
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	4a52      	ldr	r2, [pc, #328]	@ (8007464 <HAL_TIM_PWM_ConfigChannel+0x24c>)
 800731c:	4293      	cmp	r3, r2
 800731e:	d02c      	beq.n	800737a <HAL_TIM_PWM_ConfigChannel+0x162>
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	4a50      	ldr	r2, [pc, #320]	@ (8007468 <HAL_TIM_PWM_ConfigChannel+0x250>)
 8007326:	4293      	cmp	r3, r2
 8007328:	d027      	beq.n	800737a <HAL_TIM_PWM_ConfigChannel+0x162>
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	4a4f      	ldr	r2, [pc, #316]	@ (800746c <HAL_TIM_PWM_ConfigChannel+0x254>)
 8007330:	4293      	cmp	r3, r2
 8007332:	d022      	beq.n	800737a <HAL_TIM_PWM_ConfigChannel+0x162>
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	4a4d      	ldr	r2, [pc, #308]	@ (8007470 <HAL_TIM_PWM_ConfigChannel+0x258>)
 800733a:	4293      	cmp	r3, r2
 800733c:	d01d      	beq.n	800737a <HAL_TIM_PWM_ConfigChannel+0x162>
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	4a4c      	ldr	r2, [pc, #304]	@ (8007474 <HAL_TIM_PWM_ConfigChannel+0x25c>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d018      	beq.n	800737a <HAL_TIM_PWM_ConfigChannel+0x162>
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	4a4a      	ldr	r2, [pc, #296]	@ (8007478 <HAL_TIM_PWM_ConfigChannel+0x260>)
 800734e:	4293      	cmp	r3, r2
 8007350:	d013      	beq.n	800737a <HAL_TIM_PWM_ConfigChannel+0x162>
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	4a49      	ldr	r2, [pc, #292]	@ (800747c <HAL_TIM_PWM_ConfigChannel+0x264>)
 8007358:	4293      	cmp	r3, r2
 800735a:	d00e      	beq.n	800737a <HAL_TIM_PWM_ConfigChannel+0x162>
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	4a47      	ldr	r2, [pc, #284]	@ (8007480 <HAL_TIM_PWM_ConfigChannel+0x268>)
 8007362:	4293      	cmp	r3, r2
 8007364:	d009      	beq.n	800737a <HAL_TIM_PWM_ConfigChannel+0x162>
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	4a46      	ldr	r2, [pc, #280]	@ (8007484 <HAL_TIM_PWM_ConfigChannel+0x26c>)
 800736c:	4293      	cmp	r3, r2
 800736e:	d004      	beq.n	800737a <HAL_TIM_PWM_ConfigChannel+0x162>
 8007370:	f241 018f 	movw	r1, #4239	@ 0x108f
 8007374:	4838      	ldr	r0, [pc, #224]	@ (8007458 <HAL_TIM_PWM_ConfigChannel+0x240>)
 8007376:	f7f9 fbb5 	bl	8000ae4 <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	68b9      	ldr	r1, [r7, #8]
 8007380:	4618      	mov	r0, r3
 8007382:	f000 f9cd 	bl	8007720 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	699a      	ldr	r2, [r3, #24]
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f042 0208 	orr.w	r2, r2, #8
 8007394:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	699a      	ldr	r2, [r3, #24]
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f022 0204 	bic.w	r2, r2, #4
 80073a4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	6999      	ldr	r1, [r3, #24]
 80073ac:	68bb      	ldr	r3, [r7, #8]
 80073ae:	691a      	ldr	r2, [r3, #16]
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	430a      	orrs	r2, r1
 80073b6:	619a      	str	r2, [r3, #24]
      break;
 80073b8:	e0f0      	b.n	800759c <HAL_TIM_PWM_ConfigChannel+0x384>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	4a27      	ldr	r2, [pc, #156]	@ (800745c <HAL_TIM_PWM_ConfigChannel+0x244>)
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d027      	beq.n	8007414 <HAL_TIM_PWM_ConfigChannel+0x1fc>
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80073cc:	d022      	beq.n	8007414 <HAL_TIM_PWM_ConfigChannel+0x1fc>
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	4a23      	ldr	r2, [pc, #140]	@ (8007460 <HAL_TIM_PWM_ConfigChannel+0x248>)
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d01d      	beq.n	8007414 <HAL_TIM_PWM_ConfigChannel+0x1fc>
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	4a21      	ldr	r2, [pc, #132]	@ (8007464 <HAL_TIM_PWM_ConfigChannel+0x24c>)
 80073de:	4293      	cmp	r3, r2
 80073e0:	d018      	beq.n	8007414 <HAL_TIM_PWM_ConfigChannel+0x1fc>
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	4a20      	ldr	r2, [pc, #128]	@ (8007468 <HAL_TIM_PWM_ConfigChannel+0x250>)
 80073e8:	4293      	cmp	r3, r2
 80073ea:	d013      	beq.n	8007414 <HAL_TIM_PWM_ConfigChannel+0x1fc>
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	4a1e      	ldr	r2, [pc, #120]	@ (800746c <HAL_TIM_PWM_ConfigChannel+0x254>)
 80073f2:	4293      	cmp	r3, r2
 80073f4:	d00e      	beq.n	8007414 <HAL_TIM_PWM_ConfigChannel+0x1fc>
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	4a1d      	ldr	r2, [pc, #116]	@ (8007470 <HAL_TIM_PWM_ConfigChannel+0x258>)
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d009      	beq.n	8007414 <HAL_TIM_PWM_ConfigChannel+0x1fc>
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	4a1d      	ldr	r2, [pc, #116]	@ (800747c <HAL_TIM_PWM_ConfigChannel+0x264>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d004      	beq.n	8007414 <HAL_TIM_PWM_ConfigChannel+0x1fc>
 800740a:	f44f 5185 	mov.w	r1, #4256	@ 0x10a0
 800740e:	4812      	ldr	r0, [pc, #72]	@ (8007458 <HAL_TIM_PWM_ConfigChannel+0x240>)
 8007410:	f7f9 fb68 	bl	8000ae4 <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	68b9      	ldr	r1, [r7, #8]
 800741a:	4618      	mov	r0, r3
 800741c:	f000 fa1a 	bl	8007854 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	699a      	ldr	r2, [r3, #24]
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800742e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	699a      	ldr	r2, [r3, #24]
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800743e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	6999      	ldr	r1, [r3, #24]
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	691b      	ldr	r3, [r3, #16]
 800744a:	021a      	lsls	r2, r3, #8
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	430a      	orrs	r2, r1
 8007452:	619a      	str	r2, [r3, #24]
      break;
 8007454:	e0a2      	b.n	800759c <HAL_TIM_PWM_ConfigChannel+0x384>
 8007456:	bf00      	nop
 8007458:	0800d04c 	.word	0x0800d04c
 800745c:	40010000 	.word	0x40010000
 8007460:	40000400 	.word	0x40000400
 8007464:	40000800 	.word	0x40000800
 8007468:	40000c00 	.word	0x40000c00
 800746c:	40010400 	.word	0x40010400
 8007470:	40014000 	.word	0x40014000
 8007474:	40014400 	.word	0x40014400
 8007478:	40014800 	.word	0x40014800
 800747c:	40001800 	.word	0x40001800
 8007480:	40001c00 	.word	0x40001c00
 8007484:	40002000 	.word	0x40002000
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	4a48      	ldr	r2, [pc, #288]	@ (80075b0 <HAL_TIM_PWM_ConfigChannel+0x398>)
 800748e:	4293      	cmp	r3, r2
 8007490:	d01d      	beq.n	80074ce <HAL_TIM_PWM_ConfigChannel+0x2b6>
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800749a:	d018      	beq.n	80074ce <HAL_TIM_PWM_ConfigChannel+0x2b6>
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	4a44      	ldr	r2, [pc, #272]	@ (80075b4 <HAL_TIM_PWM_ConfigChannel+0x39c>)
 80074a2:	4293      	cmp	r3, r2
 80074a4:	d013      	beq.n	80074ce <HAL_TIM_PWM_ConfigChannel+0x2b6>
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	4a43      	ldr	r2, [pc, #268]	@ (80075b8 <HAL_TIM_PWM_ConfigChannel+0x3a0>)
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d00e      	beq.n	80074ce <HAL_TIM_PWM_ConfigChannel+0x2b6>
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	4a41      	ldr	r2, [pc, #260]	@ (80075bc <HAL_TIM_PWM_ConfigChannel+0x3a4>)
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d009      	beq.n	80074ce <HAL_TIM_PWM_ConfigChannel+0x2b6>
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	4a40      	ldr	r2, [pc, #256]	@ (80075c0 <HAL_TIM_PWM_ConfigChannel+0x3a8>)
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d004      	beq.n	80074ce <HAL_TIM_PWM_ConfigChannel+0x2b6>
 80074c4:	f241 01b1 	movw	r1, #4273	@ 0x10b1
 80074c8:	483e      	ldr	r0, [pc, #248]	@ (80075c4 <HAL_TIM_PWM_ConfigChannel+0x3ac>)
 80074ca:	f7f9 fb0b 	bl	8000ae4 <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	68b9      	ldr	r1, [r7, #8]
 80074d4:	4618      	mov	r0, r3
 80074d6:	f000 fa5b 	bl	8007990 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	69da      	ldr	r2, [r3, #28]
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f042 0208 	orr.w	r2, r2, #8
 80074e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	69da      	ldr	r2, [r3, #28]
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f022 0204 	bic.w	r2, r2, #4
 80074f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	69d9      	ldr	r1, [r3, #28]
 8007500:	68bb      	ldr	r3, [r7, #8]
 8007502:	691a      	ldr	r2, [r3, #16]
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	430a      	orrs	r2, r1
 800750a:	61da      	str	r2, [r3, #28]
      break;
 800750c:	e046      	b.n	800759c <HAL_TIM_PWM_ConfigChannel+0x384>
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	4a27      	ldr	r2, [pc, #156]	@ (80075b0 <HAL_TIM_PWM_ConfigChannel+0x398>)
 8007514:	4293      	cmp	r3, r2
 8007516:	d01d      	beq.n	8007554 <HAL_TIM_PWM_ConfigChannel+0x33c>
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007520:	d018      	beq.n	8007554 <HAL_TIM_PWM_ConfigChannel+0x33c>
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	4a23      	ldr	r2, [pc, #140]	@ (80075b4 <HAL_TIM_PWM_ConfigChannel+0x39c>)
 8007528:	4293      	cmp	r3, r2
 800752a:	d013      	beq.n	8007554 <HAL_TIM_PWM_ConfigChannel+0x33c>
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	4a21      	ldr	r2, [pc, #132]	@ (80075b8 <HAL_TIM_PWM_ConfigChannel+0x3a0>)
 8007532:	4293      	cmp	r3, r2
 8007534:	d00e      	beq.n	8007554 <HAL_TIM_PWM_ConfigChannel+0x33c>
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	4a20      	ldr	r2, [pc, #128]	@ (80075bc <HAL_TIM_PWM_ConfigChannel+0x3a4>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d009      	beq.n	8007554 <HAL_TIM_PWM_ConfigChannel+0x33c>
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	4a1e      	ldr	r2, [pc, #120]	@ (80075c0 <HAL_TIM_PWM_ConfigChannel+0x3a8>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d004      	beq.n	8007554 <HAL_TIM_PWM_ConfigChannel+0x33c>
 800754a:	f241 01c2 	movw	r1, #4290	@ 0x10c2
 800754e:	481d      	ldr	r0, [pc, #116]	@ (80075c4 <HAL_TIM_PWM_ConfigChannel+0x3ac>)
 8007550:	f7f9 fac8 	bl	8000ae4 <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	68b9      	ldr	r1, [r7, #8]
 800755a:	4618      	mov	r0, r3
 800755c:	f000 fab6 	bl	8007acc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	69da      	ldr	r2, [r3, #28]
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800756e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	69da      	ldr	r2, [r3, #28]
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800757e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	69d9      	ldr	r1, [r3, #28]
 8007586:	68bb      	ldr	r3, [r7, #8]
 8007588:	691b      	ldr	r3, [r3, #16]
 800758a:	021a      	lsls	r2, r3, #8
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	430a      	orrs	r2, r1
 8007592:	61da      	str	r2, [r3, #28]
      break;
 8007594:	e002      	b.n	800759c <HAL_TIM_PWM_ConfigChannel+0x384>
    }

    default:
      status = HAL_ERROR;
 8007596:	2301      	movs	r3, #1
 8007598:	75fb      	strb	r3, [r7, #23]
      break;
 800759a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	2200      	movs	r2, #0
 80075a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80075a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80075a6:	4618      	mov	r0, r3
 80075a8:	3718      	adds	r7, #24
 80075aa:	46bd      	mov	sp, r7
 80075ac:	bd80      	pop	{r7, pc}
 80075ae:	bf00      	nop
 80075b0:	40010000 	.word	0x40010000
 80075b4:	40000400 	.word	0x40000400
 80075b8:	40000800 	.word	0x40000800
 80075bc:	40000c00 	.word	0x40000c00
 80075c0:	40010400 	.word	0x40010400
 80075c4:	0800d04c 	.word	0x0800d04c

080075c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80075c8:	b480      	push	{r7}
 80075ca:	b085      	sub	sp, #20
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
 80075d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	4a46      	ldr	r2, [pc, #280]	@ (80076f4 <TIM_Base_SetConfig+0x12c>)
 80075dc:	4293      	cmp	r3, r2
 80075de:	d013      	beq.n	8007608 <TIM_Base_SetConfig+0x40>
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80075e6:	d00f      	beq.n	8007608 <TIM_Base_SetConfig+0x40>
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	4a43      	ldr	r2, [pc, #268]	@ (80076f8 <TIM_Base_SetConfig+0x130>)
 80075ec:	4293      	cmp	r3, r2
 80075ee:	d00b      	beq.n	8007608 <TIM_Base_SetConfig+0x40>
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	4a42      	ldr	r2, [pc, #264]	@ (80076fc <TIM_Base_SetConfig+0x134>)
 80075f4:	4293      	cmp	r3, r2
 80075f6:	d007      	beq.n	8007608 <TIM_Base_SetConfig+0x40>
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	4a41      	ldr	r2, [pc, #260]	@ (8007700 <TIM_Base_SetConfig+0x138>)
 80075fc:	4293      	cmp	r3, r2
 80075fe:	d003      	beq.n	8007608 <TIM_Base_SetConfig+0x40>
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	4a40      	ldr	r2, [pc, #256]	@ (8007704 <TIM_Base_SetConfig+0x13c>)
 8007604:	4293      	cmp	r3, r2
 8007606:	d108      	bne.n	800761a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800760e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	685b      	ldr	r3, [r3, #4]
 8007614:	68fa      	ldr	r2, [r7, #12]
 8007616:	4313      	orrs	r3, r2
 8007618:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	4a35      	ldr	r2, [pc, #212]	@ (80076f4 <TIM_Base_SetConfig+0x12c>)
 800761e:	4293      	cmp	r3, r2
 8007620:	d02b      	beq.n	800767a <TIM_Base_SetConfig+0xb2>
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007628:	d027      	beq.n	800767a <TIM_Base_SetConfig+0xb2>
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	4a32      	ldr	r2, [pc, #200]	@ (80076f8 <TIM_Base_SetConfig+0x130>)
 800762e:	4293      	cmp	r3, r2
 8007630:	d023      	beq.n	800767a <TIM_Base_SetConfig+0xb2>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	4a31      	ldr	r2, [pc, #196]	@ (80076fc <TIM_Base_SetConfig+0x134>)
 8007636:	4293      	cmp	r3, r2
 8007638:	d01f      	beq.n	800767a <TIM_Base_SetConfig+0xb2>
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	4a30      	ldr	r2, [pc, #192]	@ (8007700 <TIM_Base_SetConfig+0x138>)
 800763e:	4293      	cmp	r3, r2
 8007640:	d01b      	beq.n	800767a <TIM_Base_SetConfig+0xb2>
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	4a2f      	ldr	r2, [pc, #188]	@ (8007704 <TIM_Base_SetConfig+0x13c>)
 8007646:	4293      	cmp	r3, r2
 8007648:	d017      	beq.n	800767a <TIM_Base_SetConfig+0xb2>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	4a2e      	ldr	r2, [pc, #184]	@ (8007708 <TIM_Base_SetConfig+0x140>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d013      	beq.n	800767a <TIM_Base_SetConfig+0xb2>
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	4a2d      	ldr	r2, [pc, #180]	@ (800770c <TIM_Base_SetConfig+0x144>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d00f      	beq.n	800767a <TIM_Base_SetConfig+0xb2>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	4a2c      	ldr	r2, [pc, #176]	@ (8007710 <TIM_Base_SetConfig+0x148>)
 800765e:	4293      	cmp	r3, r2
 8007660:	d00b      	beq.n	800767a <TIM_Base_SetConfig+0xb2>
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	4a2b      	ldr	r2, [pc, #172]	@ (8007714 <TIM_Base_SetConfig+0x14c>)
 8007666:	4293      	cmp	r3, r2
 8007668:	d007      	beq.n	800767a <TIM_Base_SetConfig+0xb2>
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	4a2a      	ldr	r2, [pc, #168]	@ (8007718 <TIM_Base_SetConfig+0x150>)
 800766e:	4293      	cmp	r3, r2
 8007670:	d003      	beq.n	800767a <TIM_Base_SetConfig+0xb2>
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	4a29      	ldr	r2, [pc, #164]	@ (800771c <TIM_Base_SetConfig+0x154>)
 8007676:	4293      	cmp	r3, r2
 8007678:	d108      	bne.n	800768c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007680:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	68db      	ldr	r3, [r3, #12]
 8007686:	68fa      	ldr	r2, [r7, #12]
 8007688:	4313      	orrs	r3, r2
 800768a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	695b      	ldr	r3, [r3, #20]
 8007696:	4313      	orrs	r3, r2
 8007698:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	68fa      	ldr	r2, [r7, #12]
 800769e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	689a      	ldr	r2, [r3, #8]
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	681a      	ldr	r2, [r3, #0]
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	4a10      	ldr	r2, [pc, #64]	@ (80076f4 <TIM_Base_SetConfig+0x12c>)
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d003      	beq.n	80076c0 <TIM_Base_SetConfig+0xf8>
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	4a12      	ldr	r2, [pc, #72]	@ (8007704 <TIM_Base_SetConfig+0x13c>)
 80076bc:	4293      	cmp	r3, r2
 80076be:	d103      	bne.n	80076c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	691a      	ldr	r2, [r3, #16]
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2201      	movs	r2, #1
 80076cc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	691b      	ldr	r3, [r3, #16]
 80076d2:	f003 0301 	and.w	r3, r3, #1
 80076d6:	2b01      	cmp	r3, #1
 80076d8:	d105      	bne.n	80076e6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	691b      	ldr	r3, [r3, #16]
 80076de:	f023 0201 	bic.w	r2, r3, #1
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	611a      	str	r2, [r3, #16]
  }
}
 80076e6:	bf00      	nop
 80076e8:	3714      	adds	r7, #20
 80076ea:	46bd      	mov	sp, r7
 80076ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f0:	4770      	bx	lr
 80076f2:	bf00      	nop
 80076f4:	40010000 	.word	0x40010000
 80076f8:	40000400 	.word	0x40000400
 80076fc:	40000800 	.word	0x40000800
 8007700:	40000c00 	.word	0x40000c00
 8007704:	40010400 	.word	0x40010400
 8007708:	40014000 	.word	0x40014000
 800770c:	40014400 	.word	0x40014400
 8007710:	40014800 	.word	0x40014800
 8007714:	40001800 	.word	0x40001800
 8007718:	40001c00 	.word	0x40001c00
 800771c:	40002000 	.word	0x40002000

08007720 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b086      	sub	sp, #24
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
 8007728:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	6a1b      	ldr	r3, [r3, #32]
 800772e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	6a1b      	ldr	r3, [r3, #32]
 8007734:	f023 0201 	bic.w	r2, r3, #1
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	685b      	ldr	r3, [r3, #4]
 8007740:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	699b      	ldr	r3, [r3, #24]
 8007746:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800774e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	f023 0303 	bic.w	r3, r3, #3
 8007756:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	68fa      	ldr	r2, [r7, #12]
 800775e:	4313      	orrs	r3, r2
 8007760:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007762:	697b      	ldr	r3, [r7, #20]
 8007764:	f023 0302 	bic.w	r3, r3, #2
 8007768:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	689b      	ldr	r3, [r3, #8]
 800776e:	697a      	ldr	r2, [r7, #20]
 8007770:	4313      	orrs	r3, r2
 8007772:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	4a34      	ldr	r2, [pc, #208]	@ (8007848 <TIM_OC1_SetConfig+0x128>)
 8007778:	4293      	cmp	r3, r2
 800777a:	d003      	beq.n	8007784 <TIM_OC1_SetConfig+0x64>
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	4a33      	ldr	r2, [pc, #204]	@ (800784c <TIM_OC1_SetConfig+0x12c>)
 8007780:	4293      	cmp	r3, r2
 8007782:	d119      	bne.n	80077b8 <TIM_OC1_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	68db      	ldr	r3, [r3, #12]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d008      	beq.n	800779e <TIM_OC1_SetConfig+0x7e>
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	68db      	ldr	r3, [r3, #12]
 8007790:	2b08      	cmp	r3, #8
 8007792:	d004      	beq.n	800779e <TIM_OC1_SetConfig+0x7e>
 8007794:	f641 21d0 	movw	r1, #6864	@ 0x1ad0
 8007798:	482d      	ldr	r0, [pc, #180]	@ (8007850 <TIM_OC1_SetConfig+0x130>)
 800779a:	f7f9 f9a3 	bl	8000ae4 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800779e:	697b      	ldr	r3, [r7, #20]
 80077a0:	f023 0308 	bic.w	r3, r3, #8
 80077a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	68db      	ldr	r3, [r3, #12]
 80077aa:	697a      	ldr	r2, [r7, #20]
 80077ac:	4313      	orrs	r3, r2
 80077ae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80077b0:	697b      	ldr	r3, [r7, #20]
 80077b2:	f023 0304 	bic.w	r3, r3, #4
 80077b6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	4a23      	ldr	r2, [pc, #140]	@ (8007848 <TIM_OC1_SetConfig+0x128>)
 80077bc:	4293      	cmp	r3, r2
 80077be:	d003      	beq.n	80077c8 <TIM_OC1_SetConfig+0xa8>
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	4a22      	ldr	r2, [pc, #136]	@ (800784c <TIM_OC1_SetConfig+0x12c>)
 80077c4:	4293      	cmp	r3, r2
 80077c6:	d12d      	bne.n	8007824 <TIM_OC1_SetConfig+0x104>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	699b      	ldr	r3, [r3, #24]
 80077cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80077d0:	d008      	beq.n	80077e4 <TIM_OC1_SetConfig+0xc4>
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	699b      	ldr	r3, [r3, #24]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d004      	beq.n	80077e4 <TIM_OC1_SetConfig+0xc4>
 80077da:	f641 21dd 	movw	r1, #6877	@ 0x1add
 80077de:	481c      	ldr	r0, [pc, #112]	@ (8007850 <TIM_OC1_SetConfig+0x130>)
 80077e0:	f7f9 f980 	bl	8000ae4 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	695b      	ldr	r3, [r3, #20]
 80077e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80077ec:	d008      	beq.n	8007800 <TIM_OC1_SetConfig+0xe0>
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	695b      	ldr	r3, [r3, #20]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d004      	beq.n	8007800 <TIM_OC1_SetConfig+0xe0>
 80077f6:	f641 21de 	movw	r1, #6878	@ 0x1ade
 80077fa:	4815      	ldr	r0, [pc, #84]	@ (8007850 <TIM_OC1_SetConfig+0x130>)
 80077fc:	f7f9 f972 	bl	8000ae4 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007800:	693b      	ldr	r3, [r7, #16]
 8007802:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007806:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007808:	693b      	ldr	r3, [r7, #16]
 800780a:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800780e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	695b      	ldr	r3, [r3, #20]
 8007814:	693a      	ldr	r2, [r7, #16]
 8007816:	4313      	orrs	r3, r2
 8007818:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	699b      	ldr	r3, [r3, #24]
 800781e:	693a      	ldr	r2, [r7, #16]
 8007820:	4313      	orrs	r3, r2
 8007822:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	693a      	ldr	r2, [r7, #16]
 8007828:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	68fa      	ldr	r2, [r7, #12]
 800782e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	685a      	ldr	r2, [r3, #4]
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	697a      	ldr	r2, [r7, #20]
 800783c:	621a      	str	r2, [r3, #32]
}
 800783e:	bf00      	nop
 8007840:	3718      	adds	r7, #24
 8007842:	46bd      	mov	sp, r7
 8007844:	bd80      	pop	{r7, pc}
 8007846:	bf00      	nop
 8007848:	40010000 	.word	0x40010000
 800784c:	40010400 	.word	0x40010400
 8007850:	0800d04c 	.word	0x0800d04c

08007854 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b086      	sub	sp, #24
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
 800785c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6a1b      	ldr	r3, [r3, #32]
 8007862:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6a1b      	ldr	r3, [r3, #32]
 8007868:	f023 0210 	bic.w	r2, r3, #16
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	685b      	ldr	r3, [r3, #4]
 8007874:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	699b      	ldr	r3, [r3, #24]
 800787a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007882:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800788a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	021b      	lsls	r3, r3, #8
 8007892:	68fa      	ldr	r2, [r7, #12]
 8007894:	4313      	orrs	r3, r2
 8007896:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007898:	697b      	ldr	r3, [r7, #20]
 800789a:	f023 0320 	bic.w	r3, r3, #32
 800789e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	689b      	ldr	r3, [r3, #8]
 80078a4:	011b      	lsls	r3, r3, #4
 80078a6:	697a      	ldr	r2, [r7, #20]
 80078a8:	4313      	orrs	r3, r2
 80078aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	4a35      	ldr	r2, [pc, #212]	@ (8007984 <TIM_OC2_SetConfig+0x130>)
 80078b0:	4293      	cmp	r3, r2
 80078b2:	d003      	beq.n	80078bc <TIM_OC2_SetConfig+0x68>
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	4a34      	ldr	r2, [pc, #208]	@ (8007988 <TIM_OC2_SetConfig+0x134>)
 80078b8:	4293      	cmp	r3, r2
 80078ba:	d11a      	bne.n	80078f2 <TIM_OC2_SetConfig+0x9e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	68db      	ldr	r3, [r3, #12]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d008      	beq.n	80078d6 <TIM_OC2_SetConfig+0x82>
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	68db      	ldr	r3, [r3, #12]
 80078c8:	2b08      	cmp	r3, #8
 80078ca:	d004      	beq.n	80078d6 <TIM_OC2_SetConfig+0x82>
 80078cc:	f641 311c 	movw	r1, #6940	@ 0x1b1c
 80078d0:	482e      	ldr	r0, [pc, #184]	@ (800798c <TIM_OC2_SetConfig+0x138>)
 80078d2:	f7f9 f907 	bl	8000ae4 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80078d6:	697b      	ldr	r3, [r7, #20]
 80078d8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80078dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	68db      	ldr	r3, [r3, #12]
 80078e2:	011b      	lsls	r3, r3, #4
 80078e4:	697a      	ldr	r2, [r7, #20]
 80078e6:	4313      	orrs	r3, r2
 80078e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80078ea:	697b      	ldr	r3, [r7, #20]
 80078ec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80078f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	4a23      	ldr	r2, [pc, #140]	@ (8007984 <TIM_OC2_SetConfig+0x130>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d003      	beq.n	8007902 <TIM_OC2_SetConfig+0xae>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	4a22      	ldr	r2, [pc, #136]	@ (8007988 <TIM_OC2_SetConfig+0x134>)
 80078fe:	4293      	cmp	r3, r2
 8007900:	d12f      	bne.n	8007962 <TIM_OC2_SetConfig+0x10e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	699b      	ldr	r3, [r3, #24]
 8007906:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800790a:	d008      	beq.n	800791e <TIM_OC2_SetConfig+0xca>
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	699b      	ldr	r3, [r3, #24]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d004      	beq.n	800791e <TIM_OC2_SetConfig+0xca>
 8007914:	f641 3129 	movw	r1, #6953	@ 0x1b29
 8007918:	481c      	ldr	r0, [pc, #112]	@ (800798c <TIM_OC2_SetConfig+0x138>)
 800791a:	f7f9 f8e3 	bl	8000ae4 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	695b      	ldr	r3, [r3, #20]
 8007922:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007926:	d008      	beq.n	800793a <TIM_OC2_SetConfig+0xe6>
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	695b      	ldr	r3, [r3, #20]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d004      	beq.n	800793a <TIM_OC2_SetConfig+0xe6>
 8007930:	f641 312a 	movw	r1, #6954	@ 0x1b2a
 8007934:	4815      	ldr	r0, [pc, #84]	@ (800798c <TIM_OC2_SetConfig+0x138>)
 8007936:	f7f9 f8d5 	bl	8000ae4 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800793a:	693b      	ldr	r3, [r7, #16]
 800793c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007940:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007942:	693b      	ldr	r3, [r7, #16]
 8007944:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007948:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	695b      	ldr	r3, [r3, #20]
 800794e:	009b      	lsls	r3, r3, #2
 8007950:	693a      	ldr	r2, [r7, #16]
 8007952:	4313      	orrs	r3, r2
 8007954:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	699b      	ldr	r3, [r3, #24]
 800795a:	009b      	lsls	r3, r3, #2
 800795c:	693a      	ldr	r2, [r7, #16]
 800795e:	4313      	orrs	r3, r2
 8007960:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	693a      	ldr	r2, [r7, #16]
 8007966:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	68fa      	ldr	r2, [r7, #12]
 800796c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	685a      	ldr	r2, [r3, #4]
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	697a      	ldr	r2, [r7, #20]
 800797a:	621a      	str	r2, [r3, #32]
}
 800797c:	bf00      	nop
 800797e:	3718      	adds	r7, #24
 8007980:	46bd      	mov	sp, r7
 8007982:	bd80      	pop	{r7, pc}
 8007984:	40010000 	.word	0x40010000
 8007988:	40010400 	.word	0x40010400
 800798c:	0800d04c 	.word	0x0800d04c

08007990 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b086      	sub	sp, #24
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
 8007998:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6a1b      	ldr	r3, [r3, #32]
 800799e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	6a1b      	ldr	r3, [r3, #32]
 80079a4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	685b      	ldr	r3, [r3, #4]
 80079b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	69db      	ldr	r3, [r3, #28]
 80079b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80079be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	f023 0303 	bic.w	r3, r3, #3
 80079c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	68fa      	ldr	r2, [r7, #12]
 80079ce:	4313      	orrs	r3, r2
 80079d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80079d2:	697b      	ldr	r3, [r7, #20]
 80079d4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80079d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	689b      	ldr	r3, [r3, #8]
 80079de:	021b      	lsls	r3, r3, #8
 80079e0:	697a      	ldr	r2, [r7, #20]
 80079e2:	4313      	orrs	r3, r2
 80079e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	4a35      	ldr	r2, [pc, #212]	@ (8007ac0 <TIM_OC3_SetConfig+0x130>)
 80079ea:	4293      	cmp	r3, r2
 80079ec:	d003      	beq.n	80079f6 <TIM_OC3_SetConfig+0x66>
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	4a34      	ldr	r2, [pc, #208]	@ (8007ac4 <TIM_OC3_SetConfig+0x134>)
 80079f2:	4293      	cmp	r3, r2
 80079f4:	d11a      	bne.n	8007a2c <TIM_OC3_SetConfig+0x9c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	68db      	ldr	r3, [r3, #12]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d008      	beq.n	8007a10 <TIM_OC3_SetConfig+0x80>
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	68db      	ldr	r3, [r3, #12]
 8007a02:	2b08      	cmp	r3, #8
 8007a04:	d004      	beq.n	8007a10 <TIM_OC3_SetConfig+0x80>
 8007a06:	f641 3167 	movw	r1, #7015	@ 0x1b67
 8007a0a:	482f      	ldr	r0, [pc, #188]	@ (8007ac8 <TIM_OC3_SetConfig+0x138>)
 8007a0c:	f7f9 f86a 	bl	8000ae4 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007a10:	697b      	ldr	r3, [r7, #20]
 8007a12:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007a16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	68db      	ldr	r3, [r3, #12]
 8007a1c:	021b      	lsls	r3, r3, #8
 8007a1e:	697a      	ldr	r2, [r7, #20]
 8007a20:	4313      	orrs	r3, r2
 8007a22:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007a24:	697b      	ldr	r3, [r7, #20]
 8007a26:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007a2a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	4a24      	ldr	r2, [pc, #144]	@ (8007ac0 <TIM_OC3_SetConfig+0x130>)
 8007a30:	4293      	cmp	r3, r2
 8007a32:	d003      	beq.n	8007a3c <TIM_OC3_SetConfig+0xac>
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	4a23      	ldr	r2, [pc, #140]	@ (8007ac4 <TIM_OC3_SetConfig+0x134>)
 8007a38:	4293      	cmp	r3, r2
 8007a3a:	d12f      	bne.n	8007a9c <TIM_OC3_SetConfig+0x10c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	699b      	ldr	r3, [r3, #24]
 8007a40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007a44:	d008      	beq.n	8007a58 <TIM_OC3_SetConfig+0xc8>
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	699b      	ldr	r3, [r3, #24]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d004      	beq.n	8007a58 <TIM_OC3_SetConfig+0xc8>
 8007a4e:	f641 3174 	movw	r1, #7028	@ 0x1b74
 8007a52:	481d      	ldr	r0, [pc, #116]	@ (8007ac8 <TIM_OC3_SetConfig+0x138>)
 8007a54:	f7f9 f846 	bl	8000ae4 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	695b      	ldr	r3, [r3, #20]
 8007a5c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007a60:	d008      	beq.n	8007a74 <TIM_OC3_SetConfig+0xe4>
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	695b      	ldr	r3, [r3, #20]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d004      	beq.n	8007a74 <TIM_OC3_SetConfig+0xe4>
 8007a6a:	f641 3175 	movw	r1, #7029	@ 0x1b75
 8007a6e:	4816      	ldr	r0, [pc, #88]	@ (8007ac8 <TIM_OC3_SetConfig+0x138>)
 8007a70:	f7f9 f838 	bl	8000ae4 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007a74:	693b      	ldr	r3, [r7, #16]
 8007a76:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007a7a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007a7c:	693b      	ldr	r3, [r7, #16]
 8007a7e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007a82:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	695b      	ldr	r3, [r3, #20]
 8007a88:	011b      	lsls	r3, r3, #4
 8007a8a:	693a      	ldr	r2, [r7, #16]
 8007a8c:	4313      	orrs	r3, r2
 8007a8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	699b      	ldr	r3, [r3, #24]
 8007a94:	011b      	lsls	r3, r3, #4
 8007a96:	693a      	ldr	r2, [r7, #16]
 8007a98:	4313      	orrs	r3, r2
 8007a9a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	693a      	ldr	r2, [r7, #16]
 8007aa0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	68fa      	ldr	r2, [r7, #12]
 8007aa6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	685a      	ldr	r2, [r3, #4]
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	697a      	ldr	r2, [r7, #20]
 8007ab4:	621a      	str	r2, [r3, #32]
}
 8007ab6:	bf00      	nop
 8007ab8:	3718      	adds	r7, #24
 8007aba:	46bd      	mov	sp, r7
 8007abc:	bd80      	pop	{r7, pc}
 8007abe:	bf00      	nop
 8007ac0:	40010000 	.word	0x40010000
 8007ac4:	40010400 	.word	0x40010400
 8007ac8:	0800d04c 	.word	0x0800d04c

08007acc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b086      	sub	sp, #24
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
 8007ad4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6a1b      	ldr	r3, [r3, #32]
 8007ada:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	6a1b      	ldr	r3, [r3, #32]
 8007ae0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	685b      	ldr	r3, [r3, #4]
 8007aec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	69db      	ldr	r3, [r3, #28]
 8007af2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007afa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007b02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	021b      	lsls	r3, r3, #8
 8007b0a:	68fa      	ldr	r2, [r7, #12]
 8007b0c:	4313      	orrs	r3, r2
 8007b0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007b10:	693b      	ldr	r3, [r7, #16]
 8007b12:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007b16:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	689b      	ldr	r3, [r3, #8]
 8007b1c:	031b      	lsls	r3, r3, #12
 8007b1e:	693a      	ldr	r2, [r7, #16]
 8007b20:	4313      	orrs	r3, r2
 8007b22:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	4a18      	ldr	r2, [pc, #96]	@ (8007b88 <TIM_OC4_SetConfig+0xbc>)
 8007b28:	4293      	cmp	r3, r2
 8007b2a:	d003      	beq.n	8007b34 <TIM_OC4_SetConfig+0x68>
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	4a17      	ldr	r2, [pc, #92]	@ (8007b8c <TIM_OC4_SetConfig+0xc0>)
 8007b30:	4293      	cmp	r3, r2
 8007b32:	d117      	bne.n	8007b64 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	695b      	ldr	r3, [r3, #20]
 8007b38:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007b3c:	d008      	beq.n	8007b50 <TIM_OC4_SetConfig+0x84>
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	695b      	ldr	r3, [r3, #20]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d004      	beq.n	8007b50 <TIM_OC4_SetConfig+0x84>
 8007b46:	f641 31b4 	movw	r1, #7092	@ 0x1bb4
 8007b4a:	4811      	ldr	r0, [pc, #68]	@ (8007b90 <TIM_OC4_SetConfig+0xc4>)
 8007b4c:	f7f8 ffca 	bl	8000ae4 <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007b50:	697b      	ldr	r3, [r7, #20]
 8007b52:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007b56:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	695b      	ldr	r3, [r3, #20]
 8007b5c:	019b      	lsls	r3, r3, #6
 8007b5e:	697a      	ldr	r2, [r7, #20]
 8007b60:	4313      	orrs	r3, r2
 8007b62:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	697a      	ldr	r2, [r7, #20]
 8007b68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	68fa      	ldr	r2, [r7, #12]
 8007b6e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	685a      	ldr	r2, [r3, #4]
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	693a      	ldr	r2, [r7, #16]
 8007b7c:	621a      	str	r2, [r3, #32]
}
 8007b7e:	bf00      	nop
 8007b80:	3718      	adds	r7, #24
 8007b82:	46bd      	mov	sp, r7
 8007b84:	bd80      	pop	{r7, pc}
 8007b86:	bf00      	nop
 8007b88:	40010000 	.word	0x40010000
 8007b8c:	40010400 	.word	0x40010400
 8007b90:	0800d04c 	.word	0x0800d04c

08007b94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b084      	sub	sp, #16
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
 8007b9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	4a61      	ldr	r2, [pc, #388]	@ (8007d28 <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 8007ba4:	4293      	cmp	r3, r2
 8007ba6:	d027      	beq.n	8007bf8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007bb0:	d022      	beq.n	8007bf8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	4a5d      	ldr	r2, [pc, #372]	@ (8007d2c <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	d01d      	beq.n	8007bf8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	4a5b      	ldr	r2, [pc, #364]	@ (8007d30 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 8007bc2:	4293      	cmp	r3, r2
 8007bc4:	d018      	beq.n	8007bf8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	4a5a      	ldr	r2, [pc, #360]	@ (8007d34 <HAL_TIMEx_MasterConfigSynchronization+0x1a0>)
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	d013      	beq.n	8007bf8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	4a58      	ldr	r2, [pc, #352]	@ (8007d38 <HAL_TIMEx_MasterConfigSynchronization+0x1a4>)
 8007bd6:	4293      	cmp	r3, r2
 8007bd8:	d00e      	beq.n	8007bf8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	4a57      	ldr	r2, [pc, #348]	@ (8007d3c <HAL_TIMEx_MasterConfigSynchronization+0x1a8>)
 8007be0:	4293      	cmp	r3, r2
 8007be2:	d009      	beq.n	8007bf8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	4a55      	ldr	r2, [pc, #340]	@ (8007d40 <HAL_TIMEx_MasterConfigSynchronization+0x1ac>)
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d004      	beq.n	8007bf8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8007bee:	f240 71a9 	movw	r1, #1961	@ 0x7a9
 8007bf2:	4854      	ldr	r0, [pc, #336]	@ (8007d44 <HAL_TIMEx_MasterConfigSynchronization+0x1b0>)
 8007bf4:	f7f8 ff76 	bl	8000ae4 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d020      	beq.n	8007c42 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	2b10      	cmp	r3, #16
 8007c06:	d01c      	beq.n	8007c42 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	2b20      	cmp	r3, #32
 8007c0e:	d018      	beq.n	8007c42 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	2b30      	cmp	r3, #48	@ 0x30
 8007c16:	d014      	beq.n	8007c42 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	2b40      	cmp	r3, #64	@ 0x40
 8007c1e:	d010      	beq.n	8007c42 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	2b50      	cmp	r3, #80	@ 0x50
 8007c26:	d00c      	beq.n	8007c42 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	2b60      	cmp	r3, #96	@ 0x60
 8007c2e:	d008      	beq.n	8007c42 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	2b70      	cmp	r3, #112	@ 0x70
 8007c36:	d004      	beq.n	8007c42 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8007c38:	f240 71aa 	movw	r1, #1962	@ 0x7aa
 8007c3c:	4841      	ldr	r0, [pc, #260]	@ (8007d44 <HAL_TIMEx_MasterConfigSynchronization+0x1b0>)
 8007c3e:	f7f8 ff51 	bl	8000ae4 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	685b      	ldr	r3, [r3, #4]
 8007c46:	2b80      	cmp	r3, #128	@ 0x80
 8007c48:	d008      	beq.n	8007c5c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	685b      	ldr	r3, [r3, #4]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d004      	beq.n	8007c5c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007c52:	f240 71ab 	movw	r1, #1963	@ 0x7ab
 8007c56:	483b      	ldr	r0, [pc, #236]	@ (8007d44 <HAL_TIMEx_MasterConfigSynchronization+0x1b0>)
 8007c58:	f7f8 ff44 	bl	8000ae4 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007c62:	2b01      	cmp	r3, #1
 8007c64:	d101      	bne.n	8007c6a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007c66:	2302      	movs	r3, #2
 8007c68:	e05a      	b.n	8007d20 <HAL_TIMEx_MasterConfigSynchronization+0x18c>
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2201      	movs	r2, #1
 8007c6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2202      	movs	r2, #2
 8007c76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	685b      	ldr	r3, [r3, #4]
 8007c80:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	689b      	ldr	r3, [r3, #8]
 8007c88:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c90:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	68fa      	ldr	r2, [r7, #12]
 8007c98:	4313      	orrs	r3, r2
 8007c9a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	68fa      	ldr	r2, [r7, #12]
 8007ca2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	4a1f      	ldr	r2, [pc, #124]	@ (8007d28 <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 8007caa:	4293      	cmp	r3, r2
 8007cac:	d022      	beq.n	8007cf4 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007cb6:	d01d      	beq.n	8007cf4 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	4a1b      	ldr	r2, [pc, #108]	@ (8007d2c <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 8007cbe:	4293      	cmp	r3, r2
 8007cc0:	d018      	beq.n	8007cf4 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	4a1a      	ldr	r2, [pc, #104]	@ (8007d30 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 8007cc8:	4293      	cmp	r3, r2
 8007cca:	d013      	beq.n	8007cf4 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	4a18      	ldr	r2, [pc, #96]	@ (8007d34 <HAL_TIMEx_MasterConfigSynchronization+0x1a0>)
 8007cd2:	4293      	cmp	r3, r2
 8007cd4:	d00e      	beq.n	8007cf4 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	4a19      	ldr	r2, [pc, #100]	@ (8007d40 <HAL_TIMEx_MasterConfigSynchronization+0x1ac>)
 8007cdc:	4293      	cmp	r3, r2
 8007cde:	d009      	beq.n	8007cf4 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	4a18      	ldr	r2, [pc, #96]	@ (8007d48 <HAL_TIMEx_MasterConfigSynchronization+0x1b4>)
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	d004      	beq.n	8007cf4 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	4a17      	ldr	r2, [pc, #92]	@ (8007d4c <HAL_TIMEx_MasterConfigSynchronization+0x1b8>)
 8007cf0:	4293      	cmp	r3, r2
 8007cf2:	d10c      	bne.n	8007d0e <HAL_TIMEx_MasterConfigSynchronization+0x17a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007cf4:	68bb      	ldr	r3, [r7, #8]
 8007cf6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007cfa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	685b      	ldr	r3, [r3, #4]
 8007d00:	68ba      	ldr	r2, [r7, #8]
 8007d02:	4313      	orrs	r3, r2
 8007d04:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	68ba      	ldr	r2, [r7, #8]
 8007d0c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2201      	movs	r2, #1
 8007d12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	2200      	movs	r2, #0
 8007d1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007d1e:	2300      	movs	r3, #0
}
 8007d20:	4618      	mov	r0, r3
 8007d22:	3710      	adds	r7, #16
 8007d24:	46bd      	mov	sp, r7
 8007d26:	bd80      	pop	{r7, pc}
 8007d28:	40010000 	.word	0x40010000
 8007d2c:	40000400 	.word	0x40000400
 8007d30:	40000800 	.word	0x40000800
 8007d34:	40000c00 	.word	0x40000c00
 8007d38:	40001000 	.word	0x40001000
 8007d3c:	40001400 	.word	0x40001400
 8007d40:	40010400 	.word	0x40010400
 8007d44:	0800d084 	.word	0x0800d084
 8007d48:	40014000 	.word	0x40014000
 8007d4c:	40001800 	.word	0x40001800

08007d50 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b082      	sub	sp, #8
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d101      	bne.n	8007d62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007d5e:	2301      	movs	r3, #1
 8007d60:	e0b7      	b.n	8007ed2 <HAL_UART_Init+0x182>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	699b      	ldr	r3, [r3, #24]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d031      	beq.n	8007dce <HAL_UART_Init+0x7e>
  {
    /* The hardware flow control is available only for USART1, USART2, USART3 and USART6.
       Except for STM32F446xx devices, that is available for USART1, USART2, USART3, USART6, UART4 and UART5.
    */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	4a5b      	ldr	r2, [pc, #364]	@ (8007edc <HAL_UART_Init+0x18c>)
 8007d70:	4293      	cmp	r3, r2
 8007d72:	d013      	beq.n	8007d9c <HAL_UART_Init+0x4c>
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	4a59      	ldr	r2, [pc, #356]	@ (8007ee0 <HAL_UART_Init+0x190>)
 8007d7a:	4293      	cmp	r3, r2
 8007d7c:	d00e      	beq.n	8007d9c <HAL_UART_Init+0x4c>
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	4a58      	ldr	r2, [pc, #352]	@ (8007ee4 <HAL_UART_Init+0x194>)
 8007d84:	4293      	cmp	r3, r2
 8007d86:	d009      	beq.n	8007d9c <HAL_UART_Init+0x4c>
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	4a56      	ldr	r2, [pc, #344]	@ (8007ee8 <HAL_UART_Init+0x198>)
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	d004      	beq.n	8007d9c <HAL_UART_Init+0x4c>
 8007d92:	f240 1173 	movw	r1, #371	@ 0x173
 8007d96:	4855      	ldr	r0, [pc, #340]	@ (8007eec <HAL_UART_Init+0x19c>)
 8007d98:	f7f8 fea4 	bl	8000ae4 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	699b      	ldr	r3, [r3, #24]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d037      	beq.n	8007e14 <HAL_UART_Init+0xc4>
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	699b      	ldr	r3, [r3, #24]
 8007da8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007dac:	d032      	beq.n	8007e14 <HAL_UART_Init+0xc4>
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	699b      	ldr	r3, [r3, #24]
 8007db2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007db6:	d02d      	beq.n	8007e14 <HAL_UART_Init+0xc4>
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	699b      	ldr	r3, [r3, #24]
 8007dbc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007dc0:	d028      	beq.n	8007e14 <HAL_UART_Init+0xc4>
 8007dc2:	f44f 71ba 	mov.w	r1, #372	@ 0x174
 8007dc6:	4849      	ldr	r0, [pc, #292]	@ (8007eec <HAL_UART_Init+0x19c>)
 8007dc8:	f7f8 fe8c 	bl	8000ae4 <assert_failed>
 8007dcc:	e022      	b.n	8007e14 <HAL_UART_Init+0xc4>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	4a42      	ldr	r2, [pc, #264]	@ (8007edc <HAL_UART_Init+0x18c>)
 8007dd4:	4293      	cmp	r3, r2
 8007dd6:	d01d      	beq.n	8007e14 <HAL_UART_Init+0xc4>
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	4a40      	ldr	r2, [pc, #256]	@ (8007ee0 <HAL_UART_Init+0x190>)
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d018      	beq.n	8007e14 <HAL_UART_Init+0xc4>
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	4a3f      	ldr	r2, [pc, #252]	@ (8007ee4 <HAL_UART_Init+0x194>)
 8007de8:	4293      	cmp	r3, r2
 8007dea:	d013      	beq.n	8007e14 <HAL_UART_Init+0xc4>
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	4a3f      	ldr	r2, [pc, #252]	@ (8007ef0 <HAL_UART_Init+0x1a0>)
 8007df2:	4293      	cmp	r3, r2
 8007df4:	d00e      	beq.n	8007e14 <HAL_UART_Init+0xc4>
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	4a3e      	ldr	r2, [pc, #248]	@ (8007ef4 <HAL_UART_Init+0x1a4>)
 8007dfc:	4293      	cmp	r3, r2
 8007dfe:	d009      	beq.n	8007e14 <HAL_UART_Init+0xc4>
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	4a38      	ldr	r2, [pc, #224]	@ (8007ee8 <HAL_UART_Init+0x198>)
 8007e06:	4293      	cmp	r3, r2
 8007e08:	d004      	beq.n	8007e14 <HAL_UART_Init+0xc4>
 8007e0a:	f44f 71bc 	mov.w	r1, #376	@ 0x178
 8007e0e:	4837      	ldr	r0, [pc, #220]	@ (8007eec <HAL_UART_Init+0x19c>)
 8007e10:	f7f8 fe68 	bl	8000ae4 <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	689b      	ldr	r3, [r3, #8]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d009      	beq.n	8007e30 <HAL_UART_Init+0xe0>
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	689b      	ldr	r3, [r3, #8]
 8007e20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007e24:	d004      	beq.n	8007e30 <HAL_UART_Init+0xe0>
 8007e26:	f44f 71bd 	mov.w	r1, #378	@ 0x17a
 8007e2a:	4830      	ldr	r0, [pc, #192]	@ (8007eec <HAL_UART_Init+0x19c>)
 8007e2c:	f7f8 fe5a 	bl	8000ae4 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	69db      	ldr	r3, [r3, #28]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d009      	beq.n	8007e4c <HAL_UART_Init+0xfc>
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	69db      	ldr	r3, [r3, #28]
 8007e3c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007e40:	d004      	beq.n	8007e4c <HAL_UART_Init+0xfc>
 8007e42:	f240 117b 	movw	r1, #379	@ 0x17b
 8007e46:	4829      	ldr	r0, [pc, #164]	@ (8007eec <HAL_UART_Init+0x19c>)
 8007e48:	f7f8 fe4c 	bl	8000ae4 <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007e52:	b2db      	uxtb	r3, r3
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d106      	bne.n	8007e66 <HAL_UART_Init+0x116>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007e60:	6878      	ldr	r0, [r7, #4]
 8007e62:	f7f9 facd 	bl	8001400 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	2224      	movs	r2, #36	@ 0x24
 8007e6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	68da      	ldr	r2, [r3, #12]
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007e7c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	f000 fdcc 	bl	8008a1c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	691a      	ldr	r2, [r3, #16]
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007e92:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	695a      	ldr	r2, [r3, #20]
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007ea2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	68da      	ldr	r2, [r3, #12]
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007eb2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2220      	movs	r2, #32
 8007ebe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2220      	movs	r2, #32
 8007ec6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2200      	movs	r2, #0
 8007ece:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007ed0:	2300      	movs	r3, #0
}
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	3708      	adds	r7, #8
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	bd80      	pop	{r7, pc}
 8007eda:	bf00      	nop
 8007edc:	40011000 	.word	0x40011000
 8007ee0:	40004400 	.word	0x40004400
 8007ee4:	40004800 	.word	0x40004800
 8007ee8:	40011400 	.word	0x40011400
 8007eec:	0800d0c0 	.word	0x0800d0c0
 8007ef0:	40004c00 	.word	0x40004c00
 8007ef4:	40005000 	.word	0x40005000

08007ef8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b08a      	sub	sp, #40	@ 0x28
 8007efc:	af02      	add	r7, sp, #8
 8007efe:	60f8      	str	r0, [r7, #12]
 8007f00:	60b9      	str	r1, [r7, #8]
 8007f02:	603b      	str	r3, [r7, #0]
 8007f04:	4613      	mov	r3, r2
 8007f06:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007f08:	2300      	movs	r3, #0
 8007f0a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007f12:	b2db      	uxtb	r3, r3
 8007f14:	2b20      	cmp	r3, #32
 8007f16:	d175      	bne.n	8008004 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f18:	68bb      	ldr	r3, [r7, #8]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d002      	beq.n	8007f24 <HAL_UART_Transmit+0x2c>
 8007f1e:	88fb      	ldrh	r3, [r7, #6]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d101      	bne.n	8007f28 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007f24:	2301      	movs	r3, #1
 8007f26:	e06e      	b.n	8008006 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	2221      	movs	r2, #33	@ 0x21
 8007f32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007f36:	f7f9 fb43 	bl	80015c0 <HAL_GetTick>
 8007f3a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	88fa      	ldrh	r2, [r7, #6]
 8007f40:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	88fa      	ldrh	r2, [r7, #6]
 8007f46:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	689b      	ldr	r3, [r3, #8]
 8007f4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f50:	d108      	bne.n	8007f64 <HAL_UART_Transmit+0x6c>
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	691b      	ldr	r3, [r3, #16]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d104      	bne.n	8007f64 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007f5e:	68bb      	ldr	r3, [r7, #8]
 8007f60:	61bb      	str	r3, [r7, #24]
 8007f62:	e003      	b.n	8007f6c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007f64:	68bb      	ldr	r3, [r7, #8]
 8007f66:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007f68:	2300      	movs	r3, #0
 8007f6a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007f6c:	e02e      	b.n	8007fcc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	9300      	str	r3, [sp, #0]
 8007f72:	697b      	ldr	r3, [r7, #20]
 8007f74:	2200      	movs	r2, #0
 8007f76:	2180      	movs	r1, #128	@ 0x80
 8007f78:	68f8      	ldr	r0, [r7, #12]
 8007f7a:	f000 fb1f 	bl	80085bc <UART_WaitOnFlagUntilTimeout>
 8007f7e:	4603      	mov	r3, r0
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d005      	beq.n	8007f90 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	2220      	movs	r2, #32
 8007f88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8007f8c:	2303      	movs	r3, #3
 8007f8e:	e03a      	b.n	8008006 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8007f90:	69fb      	ldr	r3, [r7, #28]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d10b      	bne.n	8007fae <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007f96:	69bb      	ldr	r3, [r7, #24]
 8007f98:	881b      	ldrh	r3, [r3, #0]
 8007f9a:	461a      	mov	r2, r3
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007fa4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007fa6:	69bb      	ldr	r3, [r7, #24]
 8007fa8:	3302      	adds	r3, #2
 8007faa:	61bb      	str	r3, [r7, #24]
 8007fac:	e007      	b.n	8007fbe <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007fae:	69fb      	ldr	r3, [r7, #28]
 8007fb0:	781a      	ldrb	r2, [r3, #0]
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007fb8:	69fb      	ldr	r3, [r7, #28]
 8007fba:	3301      	adds	r3, #1
 8007fbc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007fc2:	b29b      	uxth	r3, r3
 8007fc4:	3b01      	subs	r3, #1
 8007fc6:	b29a      	uxth	r2, r3
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007fd0:	b29b      	uxth	r3, r3
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d1cb      	bne.n	8007f6e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	9300      	str	r3, [sp, #0]
 8007fda:	697b      	ldr	r3, [r7, #20]
 8007fdc:	2200      	movs	r2, #0
 8007fde:	2140      	movs	r1, #64	@ 0x40
 8007fe0:	68f8      	ldr	r0, [r7, #12]
 8007fe2:	f000 faeb 	bl	80085bc <UART_WaitOnFlagUntilTimeout>
 8007fe6:	4603      	mov	r3, r0
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d005      	beq.n	8007ff8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	2220      	movs	r2, #32
 8007ff0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8007ff4:	2303      	movs	r3, #3
 8007ff6:	e006      	b.n	8008006 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	2220      	movs	r2, #32
 8007ffc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8008000:	2300      	movs	r3, #0
 8008002:	e000      	b.n	8008006 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8008004:	2302      	movs	r3, #2
  }
}
 8008006:	4618      	mov	r0, r3
 8008008:	3720      	adds	r7, #32
 800800a:	46bd      	mov	sp, r7
 800800c:	bd80      	pop	{r7, pc}

0800800e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800800e:	b580      	push	{r7, lr}
 8008010:	b084      	sub	sp, #16
 8008012:	af00      	add	r7, sp, #0
 8008014:	60f8      	str	r0, [r7, #12]
 8008016:	60b9      	str	r1, [r7, #8]
 8008018:	4613      	mov	r3, r2
 800801a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008022:	b2db      	uxtb	r3, r3
 8008024:	2b20      	cmp	r3, #32
 8008026:	d112      	bne.n	800804e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d002      	beq.n	8008034 <HAL_UART_Receive_IT+0x26>
 800802e:	88fb      	ldrh	r3, [r7, #6]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d101      	bne.n	8008038 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008034:	2301      	movs	r3, #1
 8008036:	e00b      	b.n	8008050 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	2200      	movs	r2, #0
 800803c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800803e:	88fb      	ldrh	r3, [r7, #6]
 8008040:	461a      	mov	r2, r3
 8008042:	68b9      	ldr	r1, [r7, #8]
 8008044:	68f8      	ldr	r0, [r7, #12]
 8008046:	f000 fb12 	bl	800866e <UART_Start_Receive_IT>
 800804a:	4603      	mov	r3, r0
 800804c:	e000      	b.n	8008050 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800804e:	2302      	movs	r3, #2
  }
}
 8008050:	4618      	mov	r0, r3
 8008052:	3710      	adds	r7, #16
 8008054:	46bd      	mov	sp, r7
 8008056:	bd80      	pop	{r7, pc}

08008058 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b0ba      	sub	sp, #232	@ 0xe8
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	68db      	ldr	r3, [r3, #12]
 8008070:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	695b      	ldr	r3, [r3, #20]
 800807a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800807e:	2300      	movs	r3, #0
 8008080:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8008084:	2300      	movs	r3, #0
 8008086:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800808a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800808e:	f003 030f 	and.w	r3, r3, #15
 8008092:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8008096:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800809a:	2b00      	cmp	r3, #0
 800809c:	d10f      	bne.n	80080be <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800809e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80080a2:	f003 0320 	and.w	r3, r3, #32
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d009      	beq.n	80080be <HAL_UART_IRQHandler+0x66>
 80080aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80080ae:	f003 0320 	and.w	r3, r3, #32
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d003      	beq.n	80080be <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80080b6:	6878      	ldr	r0, [r7, #4]
 80080b8:	f000 fbf2 	bl	80088a0 <UART_Receive_IT>
      return;
 80080bc:	e25b      	b.n	8008576 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80080be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	f000 80de 	beq.w	8008284 <HAL_UART_IRQHandler+0x22c>
 80080c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80080cc:	f003 0301 	and.w	r3, r3, #1
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d106      	bne.n	80080e2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80080d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80080d8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80080dc:	2b00      	cmp	r3, #0
 80080de:	f000 80d1 	beq.w	8008284 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80080e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80080e6:	f003 0301 	and.w	r3, r3, #1
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d00b      	beq.n	8008106 <HAL_UART_IRQHandler+0xae>
 80080ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80080f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d005      	beq.n	8008106 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80080fe:	f043 0201 	orr.w	r2, r3, #1
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008106:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800810a:	f003 0304 	and.w	r3, r3, #4
 800810e:	2b00      	cmp	r3, #0
 8008110:	d00b      	beq.n	800812a <HAL_UART_IRQHandler+0xd2>
 8008112:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008116:	f003 0301 	and.w	r3, r3, #1
 800811a:	2b00      	cmp	r3, #0
 800811c:	d005      	beq.n	800812a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008122:	f043 0202 	orr.w	r2, r3, #2
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800812a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800812e:	f003 0302 	and.w	r3, r3, #2
 8008132:	2b00      	cmp	r3, #0
 8008134:	d00b      	beq.n	800814e <HAL_UART_IRQHandler+0xf6>
 8008136:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800813a:	f003 0301 	and.w	r3, r3, #1
 800813e:	2b00      	cmp	r3, #0
 8008140:	d005      	beq.n	800814e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008146:	f043 0204 	orr.w	r2, r3, #4
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800814e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008152:	f003 0308 	and.w	r3, r3, #8
 8008156:	2b00      	cmp	r3, #0
 8008158:	d011      	beq.n	800817e <HAL_UART_IRQHandler+0x126>
 800815a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800815e:	f003 0320 	and.w	r3, r3, #32
 8008162:	2b00      	cmp	r3, #0
 8008164:	d105      	bne.n	8008172 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008166:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800816a:	f003 0301 	and.w	r3, r3, #1
 800816e:	2b00      	cmp	r3, #0
 8008170:	d005      	beq.n	800817e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008176:	f043 0208 	orr.w	r2, r3, #8
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008182:	2b00      	cmp	r3, #0
 8008184:	f000 81f2 	beq.w	800856c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008188:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800818c:	f003 0320 	and.w	r3, r3, #32
 8008190:	2b00      	cmp	r3, #0
 8008192:	d008      	beq.n	80081a6 <HAL_UART_IRQHandler+0x14e>
 8008194:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008198:	f003 0320 	and.w	r3, r3, #32
 800819c:	2b00      	cmp	r3, #0
 800819e:	d002      	beq.n	80081a6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80081a0:	6878      	ldr	r0, [r7, #4]
 80081a2:	f000 fb7d 	bl	80088a0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	695b      	ldr	r3, [r3, #20]
 80081ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081b0:	2b40      	cmp	r3, #64	@ 0x40
 80081b2:	bf0c      	ite	eq
 80081b4:	2301      	moveq	r3, #1
 80081b6:	2300      	movne	r3, #0
 80081b8:	b2db      	uxtb	r3, r3
 80081ba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80081c2:	f003 0308 	and.w	r3, r3, #8
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d103      	bne.n	80081d2 <HAL_UART_IRQHandler+0x17a>
 80081ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d04f      	beq.n	8008272 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80081d2:	6878      	ldr	r0, [r7, #4]
 80081d4:	f000 fa85 	bl	80086e2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	695b      	ldr	r3, [r3, #20]
 80081de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081e2:	2b40      	cmp	r3, #64	@ 0x40
 80081e4:	d141      	bne.n	800826a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	3314      	adds	r3, #20
 80081ec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80081f4:	e853 3f00 	ldrex	r3, [r3]
 80081f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80081fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008200:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008204:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	3314      	adds	r3, #20
 800820e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008212:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008216:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800821a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800821e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008222:	e841 2300 	strex	r3, r2, [r1]
 8008226:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800822a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800822e:	2b00      	cmp	r3, #0
 8008230:	d1d9      	bne.n	80081e6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008236:	2b00      	cmp	r3, #0
 8008238:	d013      	beq.n	8008262 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800823e:	4a7e      	ldr	r2, [pc, #504]	@ (8008438 <HAL_UART_IRQHandler+0x3e0>)
 8008240:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008246:	4618      	mov	r0, r3
 8008248:	f7fa f94c 	bl	80024e4 <HAL_DMA_Abort_IT>
 800824c:	4603      	mov	r3, r0
 800824e:	2b00      	cmp	r3, #0
 8008250:	d016      	beq.n	8008280 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008256:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008258:	687a      	ldr	r2, [r7, #4]
 800825a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800825c:	4610      	mov	r0, r2
 800825e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008260:	e00e      	b.n	8008280 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008262:	6878      	ldr	r0, [r7, #4]
 8008264:	f000 f994 	bl	8008590 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008268:	e00a      	b.n	8008280 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800826a:	6878      	ldr	r0, [r7, #4]
 800826c:	f000 f990 	bl	8008590 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008270:	e006      	b.n	8008280 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	f000 f98c 	bl	8008590 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2200      	movs	r2, #0
 800827c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800827e:	e175      	b.n	800856c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008280:	bf00      	nop
    return;
 8008282:	e173      	b.n	800856c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008288:	2b01      	cmp	r3, #1
 800828a:	f040 814f 	bne.w	800852c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800828e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008292:	f003 0310 	and.w	r3, r3, #16
 8008296:	2b00      	cmp	r3, #0
 8008298:	f000 8148 	beq.w	800852c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800829c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80082a0:	f003 0310 	and.w	r3, r3, #16
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	f000 8141 	beq.w	800852c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80082aa:	2300      	movs	r3, #0
 80082ac:	60bb      	str	r3, [r7, #8]
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	60bb      	str	r3, [r7, #8]
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	685b      	ldr	r3, [r3, #4]
 80082bc:	60bb      	str	r3, [r7, #8]
 80082be:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	695b      	ldr	r3, [r3, #20]
 80082c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082ca:	2b40      	cmp	r3, #64	@ 0x40
 80082cc:	f040 80b6 	bne.w	800843c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	685b      	ldr	r3, [r3, #4]
 80082d8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80082dc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	f000 8145 	beq.w	8008570 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80082ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80082ee:	429a      	cmp	r2, r3
 80082f0:	f080 813e 	bcs.w	8008570 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80082fa:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008300:	69db      	ldr	r3, [r3, #28]
 8008302:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008306:	f000 8088 	beq.w	800841a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	330c      	adds	r3, #12
 8008310:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008314:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008318:	e853 3f00 	ldrex	r3, [r3]
 800831c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008320:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008324:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008328:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	330c      	adds	r3, #12
 8008332:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8008336:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800833a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800833e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008342:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008346:	e841 2300 	strex	r3, r2, [r1]
 800834a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800834e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008352:	2b00      	cmp	r3, #0
 8008354:	d1d9      	bne.n	800830a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	3314      	adds	r3, #20
 800835c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800835e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008360:	e853 3f00 	ldrex	r3, [r3]
 8008364:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008366:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008368:	f023 0301 	bic.w	r3, r3, #1
 800836c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	3314      	adds	r3, #20
 8008376:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800837a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800837e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008380:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008382:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008386:	e841 2300 	strex	r3, r2, [r1]
 800838a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800838c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800838e:	2b00      	cmp	r3, #0
 8008390:	d1e1      	bne.n	8008356 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	3314      	adds	r3, #20
 8008398:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800839a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800839c:	e853 3f00 	ldrex	r3, [r3]
 80083a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80083a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80083a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80083a8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	3314      	adds	r3, #20
 80083b2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80083b6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80083b8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083ba:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80083bc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80083be:	e841 2300 	strex	r3, r2, [r1]
 80083c2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80083c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d1e3      	bne.n	8008392 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	2220      	movs	r2, #32
 80083ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	2200      	movs	r2, #0
 80083d6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	330c      	adds	r3, #12
 80083de:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80083e2:	e853 3f00 	ldrex	r3, [r3]
 80083e6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80083e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80083ea:	f023 0310 	bic.w	r3, r3, #16
 80083ee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	330c      	adds	r3, #12
 80083f8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80083fc:	65ba      	str	r2, [r7, #88]	@ 0x58
 80083fe:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008400:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008402:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008404:	e841 2300 	strex	r3, r2, [r1]
 8008408:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800840a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800840c:	2b00      	cmp	r3, #0
 800840e:	d1e3      	bne.n	80083d8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008414:	4618      	mov	r0, r3
 8008416:	f7f9 fff5 	bl	8002404 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	2202      	movs	r2, #2
 800841e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008428:	b29b      	uxth	r3, r3
 800842a:	1ad3      	subs	r3, r2, r3
 800842c:	b29b      	uxth	r3, r3
 800842e:	4619      	mov	r1, r3
 8008430:	6878      	ldr	r0, [r7, #4]
 8008432:	f000 f8b7 	bl	80085a4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008436:	e09b      	b.n	8008570 <HAL_UART_IRQHandler+0x518>
 8008438:	080087a9 	.word	0x080087a9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008444:	b29b      	uxth	r3, r3
 8008446:	1ad3      	subs	r3, r2, r3
 8008448:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008450:	b29b      	uxth	r3, r3
 8008452:	2b00      	cmp	r3, #0
 8008454:	f000 808e 	beq.w	8008574 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8008458:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800845c:	2b00      	cmp	r3, #0
 800845e:	f000 8089 	beq.w	8008574 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	330c      	adds	r3, #12
 8008468:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800846a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800846c:	e853 3f00 	ldrex	r3, [r3]
 8008470:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008472:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008474:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008478:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	330c      	adds	r3, #12
 8008482:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8008486:	647a      	str	r2, [r7, #68]	@ 0x44
 8008488:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800848a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800848c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800848e:	e841 2300 	strex	r3, r2, [r1]
 8008492:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008494:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008496:	2b00      	cmp	r3, #0
 8008498:	d1e3      	bne.n	8008462 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	3314      	adds	r3, #20
 80084a0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084a4:	e853 3f00 	ldrex	r3, [r3]
 80084a8:	623b      	str	r3, [r7, #32]
   return(result);
 80084aa:	6a3b      	ldr	r3, [r7, #32]
 80084ac:	f023 0301 	bic.w	r3, r3, #1
 80084b0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	3314      	adds	r3, #20
 80084ba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80084be:	633a      	str	r2, [r7, #48]	@ 0x30
 80084c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80084c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80084c6:	e841 2300 	strex	r3, r2, [r1]
 80084ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80084cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d1e3      	bne.n	800849a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	2220      	movs	r2, #32
 80084d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	2200      	movs	r2, #0
 80084de:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	330c      	adds	r3, #12
 80084e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084e8:	693b      	ldr	r3, [r7, #16]
 80084ea:	e853 3f00 	ldrex	r3, [r3]
 80084ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	f023 0310 	bic.w	r3, r3, #16
 80084f6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	330c      	adds	r3, #12
 8008500:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8008504:	61fa      	str	r2, [r7, #28]
 8008506:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008508:	69b9      	ldr	r1, [r7, #24]
 800850a:	69fa      	ldr	r2, [r7, #28]
 800850c:	e841 2300 	strex	r3, r2, [r1]
 8008510:	617b      	str	r3, [r7, #20]
   return(result);
 8008512:	697b      	ldr	r3, [r7, #20]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d1e3      	bne.n	80084e0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2202      	movs	r2, #2
 800851c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800851e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008522:	4619      	mov	r1, r3
 8008524:	6878      	ldr	r0, [r7, #4]
 8008526:	f000 f83d 	bl	80085a4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800852a:	e023      	b.n	8008574 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800852c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008530:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008534:	2b00      	cmp	r3, #0
 8008536:	d009      	beq.n	800854c <HAL_UART_IRQHandler+0x4f4>
 8008538:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800853c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008540:	2b00      	cmp	r3, #0
 8008542:	d003      	beq.n	800854c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8008544:	6878      	ldr	r0, [r7, #4]
 8008546:	f000 f943 	bl	80087d0 <UART_Transmit_IT>
    return;
 800854a:	e014      	b.n	8008576 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800854c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008550:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008554:	2b00      	cmp	r3, #0
 8008556:	d00e      	beq.n	8008576 <HAL_UART_IRQHandler+0x51e>
 8008558:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800855c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008560:	2b00      	cmp	r3, #0
 8008562:	d008      	beq.n	8008576 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8008564:	6878      	ldr	r0, [r7, #4]
 8008566:	f000 f983 	bl	8008870 <UART_EndTransmit_IT>
    return;
 800856a:	e004      	b.n	8008576 <HAL_UART_IRQHandler+0x51e>
    return;
 800856c:	bf00      	nop
 800856e:	e002      	b.n	8008576 <HAL_UART_IRQHandler+0x51e>
      return;
 8008570:	bf00      	nop
 8008572:	e000      	b.n	8008576 <HAL_UART_IRQHandler+0x51e>
      return;
 8008574:	bf00      	nop
  }
}
 8008576:	37e8      	adds	r7, #232	@ 0xe8
 8008578:	46bd      	mov	sp, r7
 800857a:	bd80      	pop	{r7, pc}

0800857c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800857c:	b480      	push	{r7}
 800857e:	b083      	sub	sp, #12
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008584:	bf00      	nop
 8008586:	370c      	adds	r7, #12
 8008588:	46bd      	mov	sp, r7
 800858a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858e:	4770      	bx	lr

08008590 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008590:	b480      	push	{r7}
 8008592:	b083      	sub	sp, #12
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008598:	bf00      	nop
 800859a:	370c      	adds	r7, #12
 800859c:	46bd      	mov	sp, r7
 800859e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a2:	4770      	bx	lr

080085a4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80085a4:	b480      	push	{r7}
 80085a6:	b083      	sub	sp, #12
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
 80085ac:	460b      	mov	r3, r1
 80085ae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80085b0:	bf00      	nop
 80085b2:	370c      	adds	r7, #12
 80085b4:	46bd      	mov	sp, r7
 80085b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ba:	4770      	bx	lr

080085bc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b086      	sub	sp, #24
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	60f8      	str	r0, [r7, #12]
 80085c4:	60b9      	str	r1, [r7, #8]
 80085c6:	603b      	str	r3, [r7, #0]
 80085c8:	4613      	mov	r3, r2
 80085ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80085cc:	e03b      	b.n	8008646 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80085ce:	6a3b      	ldr	r3, [r7, #32]
 80085d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085d4:	d037      	beq.n	8008646 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80085d6:	f7f8 fff3 	bl	80015c0 <HAL_GetTick>
 80085da:	4602      	mov	r2, r0
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	1ad3      	subs	r3, r2, r3
 80085e0:	6a3a      	ldr	r2, [r7, #32]
 80085e2:	429a      	cmp	r2, r3
 80085e4:	d302      	bcc.n	80085ec <UART_WaitOnFlagUntilTimeout+0x30>
 80085e6:	6a3b      	ldr	r3, [r7, #32]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d101      	bne.n	80085f0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80085ec:	2303      	movs	r3, #3
 80085ee:	e03a      	b.n	8008666 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	68db      	ldr	r3, [r3, #12]
 80085f6:	f003 0304 	and.w	r3, r3, #4
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d023      	beq.n	8008646 <UART_WaitOnFlagUntilTimeout+0x8a>
 80085fe:	68bb      	ldr	r3, [r7, #8]
 8008600:	2b80      	cmp	r3, #128	@ 0x80
 8008602:	d020      	beq.n	8008646 <UART_WaitOnFlagUntilTimeout+0x8a>
 8008604:	68bb      	ldr	r3, [r7, #8]
 8008606:	2b40      	cmp	r3, #64	@ 0x40
 8008608:	d01d      	beq.n	8008646 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	f003 0308 	and.w	r3, r3, #8
 8008614:	2b08      	cmp	r3, #8
 8008616:	d116      	bne.n	8008646 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8008618:	2300      	movs	r3, #0
 800861a:	617b      	str	r3, [r7, #20]
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	617b      	str	r3, [r7, #20]
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	685b      	ldr	r3, [r3, #4]
 800862a:	617b      	str	r3, [r7, #20]
 800862c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800862e:	68f8      	ldr	r0, [r7, #12]
 8008630:	f000 f857 	bl	80086e2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	2208      	movs	r2, #8
 8008638:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	2200      	movs	r2, #0
 800863e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8008642:	2301      	movs	r3, #1
 8008644:	e00f      	b.n	8008666 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	681a      	ldr	r2, [r3, #0]
 800864c:	68bb      	ldr	r3, [r7, #8]
 800864e:	4013      	ands	r3, r2
 8008650:	68ba      	ldr	r2, [r7, #8]
 8008652:	429a      	cmp	r2, r3
 8008654:	bf0c      	ite	eq
 8008656:	2301      	moveq	r3, #1
 8008658:	2300      	movne	r3, #0
 800865a:	b2db      	uxtb	r3, r3
 800865c:	461a      	mov	r2, r3
 800865e:	79fb      	ldrb	r3, [r7, #7]
 8008660:	429a      	cmp	r2, r3
 8008662:	d0b4      	beq.n	80085ce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008664:	2300      	movs	r3, #0
}
 8008666:	4618      	mov	r0, r3
 8008668:	3718      	adds	r7, #24
 800866a:	46bd      	mov	sp, r7
 800866c:	bd80      	pop	{r7, pc}

0800866e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800866e:	b480      	push	{r7}
 8008670:	b085      	sub	sp, #20
 8008672:	af00      	add	r7, sp, #0
 8008674:	60f8      	str	r0, [r7, #12]
 8008676:	60b9      	str	r1, [r7, #8]
 8008678:	4613      	mov	r3, r2
 800867a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	68ba      	ldr	r2, [r7, #8]
 8008680:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	88fa      	ldrh	r2, [r7, #6]
 8008686:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	88fa      	ldrh	r2, [r7, #6]
 800868c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	2200      	movs	r2, #0
 8008692:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	2222      	movs	r2, #34	@ 0x22
 8008698:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	691b      	ldr	r3, [r3, #16]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d007      	beq.n	80086b4 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	68da      	ldr	r2, [r3, #12]
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80086b2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	695a      	ldr	r2, [r3, #20]
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	f042 0201 	orr.w	r2, r2, #1
 80086c2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	68da      	ldr	r2, [r3, #12]
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	f042 0220 	orr.w	r2, r2, #32
 80086d2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80086d4:	2300      	movs	r3, #0
}
 80086d6:	4618      	mov	r0, r3
 80086d8:	3714      	adds	r7, #20
 80086da:	46bd      	mov	sp, r7
 80086dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e0:	4770      	bx	lr

080086e2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80086e2:	b480      	push	{r7}
 80086e4:	b095      	sub	sp, #84	@ 0x54
 80086e6:	af00      	add	r7, sp, #0
 80086e8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	330c      	adds	r3, #12
 80086f0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086f4:	e853 3f00 	ldrex	r3, [r3]
 80086f8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80086fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086fc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008700:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	330c      	adds	r3, #12
 8008708:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800870a:	643a      	str	r2, [r7, #64]	@ 0x40
 800870c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800870e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008710:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008712:	e841 2300 	strex	r3, r2, [r1]
 8008716:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008718:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800871a:	2b00      	cmp	r3, #0
 800871c:	d1e5      	bne.n	80086ea <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	3314      	adds	r3, #20
 8008724:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008726:	6a3b      	ldr	r3, [r7, #32]
 8008728:	e853 3f00 	ldrex	r3, [r3]
 800872c:	61fb      	str	r3, [r7, #28]
   return(result);
 800872e:	69fb      	ldr	r3, [r7, #28]
 8008730:	f023 0301 	bic.w	r3, r3, #1
 8008734:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	3314      	adds	r3, #20
 800873c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800873e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008740:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008742:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008744:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008746:	e841 2300 	strex	r3, r2, [r1]
 800874a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800874c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800874e:	2b00      	cmp	r3, #0
 8008750:	d1e5      	bne.n	800871e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008756:	2b01      	cmp	r3, #1
 8008758:	d119      	bne.n	800878e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	330c      	adds	r3, #12
 8008760:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	e853 3f00 	ldrex	r3, [r3]
 8008768:	60bb      	str	r3, [r7, #8]
   return(result);
 800876a:	68bb      	ldr	r3, [r7, #8]
 800876c:	f023 0310 	bic.w	r3, r3, #16
 8008770:	647b      	str	r3, [r7, #68]	@ 0x44
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	330c      	adds	r3, #12
 8008778:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800877a:	61ba      	str	r2, [r7, #24]
 800877c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800877e:	6979      	ldr	r1, [r7, #20]
 8008780:	69ba      	ldr	r2, [r7, #24]
 8008782:	e841 2300 	strex	r3, r2, [r1]
 8008786:	613b      	str	r3, [r7, #16]
   return(result);
 8008788:	693b      	ldr	r3, [r7, #16]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d1e5      	bne.n	800875a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	2220      	movs	r2, #32
 8008792:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	2200      	movs	r2, #0
 800879a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800879c:	bf00      	nop
 800879e:	3754      	adds	r7, #84	@ 0x54
 80087a0:	46bd      	mov	sp, r7
 80087a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a6:	4770      	bx	lr

080087a8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b084      	sub	sp, #16
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087b4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	2200      	movs	r2, #0
 80087ba:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	2200      	movs	r2, #0
 80087c0:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80087c2:	68f8      	ldr	r0, [r7, #12]
 80087c4:	f7ff fee4 	bl	8008590 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80087c8:	bf00      	nop
 80087ca:	3710      	adds	r7, #16
 80087cc:	46bd      	mov	sp, r7
 80087ce:	bd80      	pop	{r7, pc}

080087d0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80087d0:	b480      	push	{r7}
 80087d2:	b085      	sub	sp, #20
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80087de:	b2db      	uxtb	r3, r3
 80087e0:	2b21      	cmp	r3, #33	@ 0x21
 80087e2:	d13e      	bne.n	8008862 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	689b      	ldr	r3, [r3, #8]
 80087e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80087ec:	d114      	bne.n	8008818 <UART_Transmit_IT+0x48>
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	691b      	ldr	r3, [r3, #16]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d110      	bne.n	8008818 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	6a1b      	ldr	r3, [r3, #32]
 80087fa:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	881b      	ldrh	r3, [r3, #0]
 8008800:	461a      	mov	r2, r3
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800880a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	6a1b      	ldr	r3, [r3, #32]
 8008810:	1c9a      	adds	r2, r3, #2
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	621a      	str	r2, [r3, #32]
 8008816:	e008      	b.n	800882a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	6a1b      	ldr	r3, [r3, #32]
 800881c:	1c59      	adds	r1, r3, #1
 800881e:	687a      	ldr	r2, [r7, #4]
 8008820:	6211      	str	r1, [r2, #32]
 8008822:	781a      	ldrb	r2, [r3, #0]
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800882e:	b29b      	uxth	r3, r3
 8008830:	3b01      	subs	r3, #1
 8008832:	b29b      	uxth	r3, r3
 8008834:	687a      	ldr	r2, [r7, #4]
 8008836:	4619      	mov	r1, r3
 8008838:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800883a:	2b00      	cmp	r3, #0
 800883c:	d10f      	bne.n	800885e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	68da      	ldr	r2, [r3, #12]
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800884c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	68da      	ldr	r2, [r3, #12]
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800885c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800885e:	2300      	movs	r3, #0
 8008860:	e000      	b.n	8008864 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008862:	2302      	movs	r3, #2
  }
}
 8008864:	4618      	mov	r0, r3
 8008866:	3714      	adds	r7, #20
 8008868:	46bd      	mov	sp, r7
 800886a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886e:	4770      	bx	lr

08008870 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b082      	sub	sp, #8
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	68da      	ldr	r2, [r3, #12]
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008886:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2220      	movs	r2, #32
 800888c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008890:	6878      	ldr	r0, [r7, #4]
 8008892:	f7ff fe73 	bl	800857c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008896:	2300      	movs	r3, #0
}
 8008898:	4618      	mov	r0, r3
 800889a:	3708      	adds	r7, #8
 800889c:	46bd      	mov	sp, r7
 800889e:	bd80      	pop	{r7, pc}

080088a0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b08c      	sub	sp, #48	@ 0x30
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80088ae:	b2db      	uxtb	r3, r3
 80088b0:	2b22      	cmp	r3, #34	@ 0x22
 80088b2:	f040 80ae 	bne.w	8008a12 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	689b      	ldr	r3, [r3, #8]
 80088ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80088be:	d117      	bne.n	80088f0 <UART_Receive_IT+0x50>
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	691b      	ldr	r3, [r3, #16]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d113      	bne.n	80088f0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80088c8:	2300      	movs	r3, #0
 80088ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088d0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	685b      	ldr	r3, [r3, #4]
 80088d8:	b29b      	uxth	r3, r3
 80088da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088de:	b29a      	uxth	r2, r3
 80088e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088e2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088e8:	1c9a      	adds	r2, r3, #2
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	629a      	str	r2, [r3, #40]	@ 0x28
 80088ee:	e026      	b.n	800893e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80088f6:	2300      	movs	r3, #0
 80088f8:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	689b      	ldr	r3, [r3, #8]
 80088fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008902:	d007      	beq.n	8008914 <UART_Receive_IT+0x74>
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	689b      	ldr	r3, [r3, #8]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d10a      	bne.n	8008922 <UART_Receive_IT+0x82>
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	691b      	ldr	r3, [r3, #16]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d106      	bne.n	8008922 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	685b      	ldr	r3, [r3, #4]
 800891a:	b2da      	uxtb	r2, r3
 800891c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800891e:	701a      	strb	r2, [r3, #0]
 8008920:	e008      	b.n	8008934 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	685b      	ldr	r3, [r3, #4]
 8008928:	b2db      	uxtb	r3, r3
 800892a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800892e:	b2da      	uxtb	r2, r3
 8008930:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008932:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008938:	1c5a      	adds	r2, r3, #1
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008942:	b29b      	uxth	r3, r3
 8008944:	3b01      	subs	r3, #1
 8008946:	b29b      	uxth	r3, r3
 8008948:	687a      	ldr	r2, [r7, #4]
 800894a:	4619      	mov	r1, r3
 800894c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800894e:	2b00      	cmp	r3, #0
 8008950:	d15d      	bne.n	8008a0e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	68da      	ldr	r2, [r3, #12]
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	f022 0220 	bic.w	r2, r2, #32
 8008960:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	68da      	ldr	r2, [r3, #12]
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008970:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	695a      	ldr	r2, [r3, #20]
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	f022 0201 	bic.w	r2, r2, #1
 8008980:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2220      	movs	r2, #32
 8008986:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	2200      	movs	r2, #0
 800898e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008994:	2b01      	cmp	r3, #1
 8008996:	d135      	bne.n	8008a04 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2200      	movs	r2, #0
 800899c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	330c      	adds	r3, #12
 80089a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089a6:	697b      	ldr	r3, [r7, #20]
 80089a8:	e853 3f00 	ldrex	r3, [r3]
 80089ac:	613b      	str	r3, [r7, #16]
   return(result);
 80089ae:	693b      	ldr	r3, [r7, #16]
 80089b0:	f023 0310 	bic.w	r3, r3, #16
 80089b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	330c      	adds	r3, #12
 80089bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80089be:	623a      	str	r2, [r7, #32]
 80089c0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089c2:	69f9      	ldr	r1, [r7, #28]
 80089c4:	6a3a      	ldr	r2, [r7, #32]
 80089c6:	e841 2300 	strex	r3, r2, [r1]
 80089ca:	61bb      	str	r3, [r7, #24]
   return(result);
 80089cc:	69bb      	ldr	r3, [r7, #24]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d1e5      	bne.n	800899e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	f003 0310 	and.w	r3, r3, #16
 80089dc:	2b10      	cmp	r3, #16
 80089de:	d10a      	bne.n	80089f6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80089e0:	2300      	movs	r3, #0
 80089e2:	60fb      	str	r3, [r7, #12]
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	60fb      	str	r3, [r7, #12]
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	685b      	ldr	r3, [r3, #4]
 80089f2:	60fb      	str	r3, [r7, #12]
 80089f4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80089fa:	4619      	mov	r1, r3
 80089fc:	6878      	ldr	r0, [r7, #4]
 80089fe:	f7ff fdd1 	bl	80085a4 <HAL_UARTEx_RxEventCallback>
 8008a02:	e002      	b.n	8008a0a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008a04:	6878      	ldr	r0, [r7, #4]
 8008a06:	f7f8 fa95 	bl	8000f34 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	e002      	b.n	8008a14 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8008a0e:	2300      	movs	r3, #0
 8008a10:	e000      	b.n	8008a14 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8008a12:	2302      	movs	r3, #2
  }
}
 8008a14:	4618      	mov	r0, r3
 8008a16:	3730      	adds	r7, #48	@ 0x30
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	bd80      	pop	{r7, pc}

08008a1c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008a1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008a20:	b0c0      	sub	sp, #256	@ 0x100
 8008a22:	af00      	add	r7, sp, #0
 8008a24:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8008a28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a2c:	685a      	ldr	r2, [r3, #4]
 8008a2e:	4bcf      	ldr	r3, [pc, #828]	@ (8008d6c <UART_SetConfig+0x350>)
 8008a30:	429a      	cmp	r2, r3
 8008a32:	d904      	bls.n	8008a3e <UART_SetConfig+0x22>
 8008a34:	f640 6175 	movw	r1, #3701	@ 0xe75
 8008a38:	48cd      	ldr	r0, [pc, #820]	@ (8008d70 <UART_SetConfig+0x354>)
 8008a3a:	f7f8 f853 	bl	8000ae4 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8008a3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a42:	68db      	ldr	r3, [r3, #12]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d00a      	beq.n	8008a5e <UART_SetConfig+0x42>
 8008a48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a4c:	68db      	ldr	r3, [r3, #12]
 8008a4e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008a52:	d004      	beq.n	8008a5e <UART_SetConfig+0x42>
 8008a54:	f640 6176 	movw	r1, #3702	@ 0xe76
 8008a58:	48c5      	ldr	r0, [pc, #788]	@ (8008d70 <UART_SetConfig+0x354>)
 8008a5a:	f7f8 f843 	bl	8000ae4 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8008a5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a62:	691b      	ldr	r3, [r3, #16]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d010      	beq.n	8008a8a <UART_SetConfig+0x6e>
 8008a68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a6c:	691b      	ldr	r3, [r3, #16]
 8008a6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008a72:	d00a      	beq.n	8008a8a <UART_SetConfig+0x6e>
 8008a74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a78:	691b      	ldr	r3, [r3, #16]
 8008a7a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8008a7e:	d004      	beq.n	8008a8a <UART_SetConfig+0x6e>
 8008a80:	f640 6177 	movw	r1, #3703	@ 0xe77
 8008a84:	48ba      	ldr	r0, [pc, #744]	@ (8008d70 <UART_SetConfig+0x354>)
 8008a86:	f7f8 f82d 	bl	8000ae4 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8008a8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a8e:	695a      	ldr	r2, [r3, #20]
 8008a90:	f64f 73f3 	movw	r3, #65523	@ 0xfff3
 8008a94:	4013      	ands	r3, r2
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d104      	bne.n	8008aa4 <UART_SetConfig+0x88>
 8008a9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a9e:	695b      	ldr	r3, [r3, #20]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d104      	bne.n	8008aae <UART_SetConfig+0x92>
 8008aa4:	f640 6178 	movw	r1, #3704	@ 0xe78
 8008aa8:	48b1      	ldr	r0, [pc, #708]	@ (8008d70 <UART_SetConfig+0x354>)
 8008aaa:	f7f8 f81b 	bl	8000ae4 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008aae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	691b      	ldr	r3, [r3, #16]
 8008ab6:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008aba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008abe:	68d9      	ldr	r1, [r3, #12]
 8008ac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ac4:	681a      	ldr	r2, [r3, #0]
 8008ac6:	ea40 0301 	orr.w	r3, r0, r1
 8008aca:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008acc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ad0:	689a      	ldr	r2, [r3, #8]
 8008ad2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ad6:	691b      	ldr	r3, [r3, #16]
 8008ad8:	431a      	orrs	r2, r3
 8008ada:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ade:	695b      	ldr	r3, [r3, #20]
 8008ae0:	431a      	orrs	r2, r3
 8008ae2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ae6:	69db      	ldr	r3, [r3, #28]
 8008ae8:	4313      	orrs	r3, r2
 8008aea:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008aee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	68db      	ldr	r3, [r3, #12]
 8008af6:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8008afa:	f021 010c 	bic.w	r1, r1, #12
 8008afe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b02:	681a      	ldr	r2, [r3, #0]
 8008b04:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008b08:	430b      	orrs	r3, r1
 8008b0a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008b0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	695b      	ldr	r3, [r3, #20]
 8008b14:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8008b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b1c:	6999      	ldr	r1, [r3, #24]
 8008b1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b22:	681a      	ldr	r2, [r3, #0]
 8008b24:	ea40 0301 	orr.w	r3, r0, r1
 8008b28:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008b2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b2e:	681a      	ldr	r2, [r3, #0]
 8008b30:	4b90      	ldr	r3, [pc, #576]	@ (8008d74 <UART_SetConfig+0x358>)
 8008b32:	429a      	cmp	r2, r3
 8008b34:	d005      	beq.n	8008b42 <UART_SetConfig+0x126>
 8008b36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b3a:	681a      	ldr	r2, [r3, #0]
 8008b3c:	4b8e      	ldr	r3, [pc, #568]	@ (8008d78 <UART_SetConfig+0x35c>)
 8008b3e:	429a      	cmp	r2, r3
 8008b40:	d104      	bne.n	8008b4c <UART_SetConfig+0x130>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008b42:	f7fd fe55 	bl	80067f0 <HAL_RCC_GetPCLK2Freq>
 8008b46:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8008b4a:	e003      	b.n	8008b54 <UART_SetConfig+0x138>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008b4c:	f7fd fe3c 	bl	80067c8 <HAL_RCC_GetPCLK1Freq>
 8008b50:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b58:	69db      	ldr	r3, [r3, #28]
 8008b5a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008b5e:	f040 810f 	bne.w	8008d80 <UART_SetConfig+0x364>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008b62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008b66:	2200      	movs	r2, #0
 8008b68:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008b6c:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8008b70:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8008b74:	4622      	mov	r2, r4
 8008b76:	462b      	mov	r3, r5
 8008b78:	1891      	adds	r1, r2, r2
 8008b7a:	65b9      	str	r1, [r7, #88]	@ 0x58
 8008b7c:	415b      	adcs	r3, r3
 8008b7e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008b80:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8008b84:	4621      	mov	r1, r4
 8008b86:	eb12 0801 	adds.w	r8, r2, r1
 8008b8a:	4629      	mov	r1, r5
 8008b8c:	eb43 0901 	adc.w	r9, r3, r1
 8008b90:	f04f 0200 	mov.w	r2, #0
 8008b94:	f04f 0300 	mov.w	r3, #0
 8008b98:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008b9c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008ba0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008ba4:	4690      	mov	r8, r2
 8008ba6:	4699      	mov	r9, r3
 8008ba8:	4623      	mov	r3, r4
 8008baa:	eb18 0303 	adds.w	r3, r8, r3
 8008bae:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008bb2:	462b      	mov	r3, r5
 8008bb4:	eb49 0303 	adc.w	r3, r9, r3
 8008bb8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008bbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008bc0:	685b      	ldr	r3, [r3, #4]
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008bc8:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8008bcc:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008bd0:	460b      	mov	r3, r1
 8008bd2:	18db      	adds	r3, r3, r3
 8008bd4:	653b      	str	r3, [r7, #80]	@ 0x50
 8008bd6:	4613      	mov	r3, r2
 8008bd8:	eb42 0303 	adc.w	r3, r2, r3
 8008bdc:	657b      	str	r3, [r7, #84]	@ 0x54
 8008bde:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008be2:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8008be6:	f7f7 faf7 	bl	80001d8 <__aeabi_uldivmod>
 8008bea:	4602      	mov	r2, r0
 8008bec:	460b      	mov	r3, r1
 8008bee:	4b63      	ldr	r3, [pc, #396]	@ (8008d7c <UART_SetConfig+0x360>)
 8008bf0:	fba3 2302 	umull	r2, r3, r3, r2
 8008bf4:	095b      	lsrs	r3, r3, #5
 8008bf6:	011c      	lsls	r4, r3, #4
 8008bf8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008c02:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8008c06:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8008c0a:	4642      	mov	r2, r8
 8008c0c:	464b      	mov	r3, r9
 8008c0e:	1891      	adds	r1, r2, r2
 8008c10:	64b9      	str	r1, [r7, #72]	@ 0x48
 8008c12:	415b      	adcs	r3, r3
 8008c14:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008c16:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008c1a:	4641      	mov	r1, r8
 8008c1c:	eb12 0a01 	adds.w	sl, r2, r1
 8008c20:	4649      	mov	r1, r9
 8008c22:	eb43 0b01 	adc.w	fp, r3, r1
 8008c26:	f04f 0200 	mov.w	r2, #0
 8008c2a:	f04f 0300 	mov.w	r3, #0
 8008c2e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008c32:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008c36:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008c3a:	4692      	mov	sl, r2
 8008c3c:	469b      	mov	fp, r3
 8008c3e:	4643      	mov	r3, r8
 8008c40:	eb1a 0303 	adds.w	r3, sl, r3
 8008c44:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008c48:	464b      	mov	r3, r9
 8008c4a:	eb4b 0303 	adc.w	r3, fp, r3
 8008c4e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008c52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c56:	685b      	ldr	r3, [r3, #4]
 8008c58:	2200      	movs	r2, #0
 8008c5a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008c5e:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8008c62:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008c66:	460b      	mov	r3, r1
 8008c68:	18db      	adds	r3, r3, r3
 8008c6a:	643b      	str	r3, [r7, #64]	@ 0x40
 8008c6c:	4613      	mov	r3, r2
 8008c6e:	eb42 0303 	adc.w	r3, r2, r3
 8008c72:	647b      	str	r3, [r7, #68]	@ 0x44
 8008c74:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008c78:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8008c7c:	f7f7 faac 	bl	80001d8 <__aeabi_uldivmod>
 8008c80:	4602      	mov	r2, r0
 8008c82:	460b      	mov	r3, r1
 8008c84:	4611      	mov	r1, r2
 8008c86:	4b3d      	ldr	r3, [pc, #244]	@ (8008d7c <UART_SetConfig+0x360>)
 8008c88:	fba3 2301 	umull	r2, r3, r3, r1
 8008c8c:	095b      	lsrs	r3, r3, #5
 8008c8e:	2264      	movs	r2, #100	@ 0x64
 8008c90:	fb02 f303 	mul.w	r3, r2, r3
 8008c94:	1acb      	subs	r3, r1, r3
 8008c96:	00db      	lsls	r3, r3, #3
 8008c98:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8008c9c:	4b37      	ldr	r3, [pc, #220]	@ (8008d7c <UART_SetConfig+0x360>)
 8008c9e:	fba3 2302 	umull	r2, r3, r3, r2
 8008ca2:	095b      	lsrs	r3, r3, #5
 8008ca4:	005b      	lsls	r3, r3, #1
 8008ca6:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008caa:	441c      	add	r4, r3
 8008cac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008cb6:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008cba:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008cbe:	4642      	mov	r2, r8
 8008cc0:	464b      	mov	r3, r9
 8008cc2:	1891      	adds	r1, r2, r2
 8008cc4:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008cc6:	415b      	adcs	r3, r3
 8008cc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008cca:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008cce:	4641      	mov	r1, r8
 8008cd0:	1851      	adds	r1, r2, r1
 8008cd2:	6339      	str	r1, [r7, #48]	@ 0x30
 8008cd4:	4649      	mov	r1, r9
 8008cd6:	414b      	adcs	r3, r1
 8008cd8:	637b      	str	r3, [r7, #52]	@ 0x34
 8008cda:	f04f 0200 	mov.w	r2, #0
 8008cde:	f04f 0300 	mov.w	r3, #0
 8008ce2:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8008ce6:	4659      	mov	r1, fp
 8008ce8:	00cb      	lsls	r3, r1, #3
 8008cea:	4651      	mov	r1, sl
 8008cec:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008cf0:	4651      	mov	r1, sl
 8008cf2:	00ca      	lsls	r2, r1, #3
 8008cf4:	4610      	mov	r0, r2
 8008cf6:	4619      	mov	r1, r3
 8008cf8:	4603      	mov	r3, r0
 8008cfa:	4642      	mov	r2, r8
 8008cfc:	189b      	adds	r3, r3, r2
 8008cfe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008d02:	464b      	mov	r3, r9
 8008d04:	460a      	mov	r2, r1
 8008d06:	eb42 0303 	adc.w	r3, r2, r3
 8008d0a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008d0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d12:	685b      	ldr	r3, [r3, #4]
 8008d14:	2200      	movs	r2, #0
 8008d16:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008d1a:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008d1e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008d22:	460b      	mov	r3, r1
 8008d24:	18db      	adds	r3, r3, r3
 8008d26:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008d28:	4613      	mov	r3, r2
 8008d2a:	eb42 0303 	adc.w	r3, r2, r3
 8008d2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008d30:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008d34:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8008d38:	f7f7 fa4e 	bl	80001d8 <__aeabi_uldivmod>
 8008d3c:	4602      	mov	r2, r0
 8008d3e:	460b      	mov	r3, r1
 8008d40:	4b0e      	ldr	r3, [pc, #56]	@ (8008d7c <UART_SetConfig+0x360>)
 8008d42:	fba3 1302 	umull	r1, r3, r3, r2
 8008d46:	095b      	lsrs	r3, r3, #5
 8008d48:	2164      	movs	r1, #100	@ 0x64
 8008d4a:	fb01 f303 	mul.w	r3, r1, r3
 8008d4e:	1ad3      	subs	r3, r2, r3
 8008d50:	00db      	lsls	r3, r3, #3
 8008d52:	3332      	adds	r3, #50	@ 0x32
 8008d54:	4a09      	ldr	r2, [pc, #36]	@ (8008d7c <UART_SetConfig+0x360>)
 8008d56:	fba2 2303 	umull	r2, r3, r2, r3
 8008d5a:	095b      	lsrs	r3, r3, #5
 8008d5c:	f003 0207 	and.w	r2, r3, #7
 8008d60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	4422      	add	r2, r4
 8008d68:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008d6a:	e109      	b.n	8008f80 <UART_SetConfig+0x564>
 8008d6c:	00a037a0 	.word	0x00a037a0
 8008d70:	0800d0c0 	.word	0x0800d0c0
 8008d74:	40011000 	.word	0x40011000
 8008d78:	40011400 	.word	0x40011400
 8008d7c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008d80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008d84:	2200      	movs	r2, #0
 8008d86:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008d8a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8008d8e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8008d92:	4642      	mov	r2, r8
 8008d94:	464b      	mov	r3, r9
 8008d96:	1891      	adds	r1, r2, r2
 8008d98:	6239      	str	r1, [r7, #32]
 8008d9a:	415b      	adcs	r3, r3
 8008d9c:	627b      	str	r3, [r7, #36]	@ 0x24
 8008d9e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008da2:	4641      	mov	r1, r8
 8008da4:	1854      	adds	r4, r2, r1
 8008da6:	4649      	mov	r1, r9
 8008da8:	eb43 0501 	adc.w	r5, r3, r1
 8008dac:	f04f 0200 	mov.w	r2, #0
 8008db0:	f04f 0300 	mov.w	r3, #0
 8008db4:	00eb      	lsls	r3, r5, #3
 8008db6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008dba:	00e2      	lsls	r2, r4, #3
 8008dbc:	4614      	mov	r4, r2
 8008dbe:	461d      	mov	r5, r3
 8008dc0:	4643      	mov	r3, r8
 8008dc2:	18e3      	adds	r3, r4, r3
 8008dc4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008dc8:	464b      	mov	r3, r9
 8008dca:	eb45 0303 	adc.w	r3, r5, r3
 8008dce:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008dd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008dd6:	685b      	ldr	r3, [r3, #4]
 8008dd8:	2200      	movs	r2, #0
 8008dda:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008dde:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008de2:	f04f 0200 	mov.w	r2, #0
 8008de6:	f04f 0300 	mov.w	r3, #0
 8008dea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8008dee:	4629      	mov	r1, r5
 8008df0:	008b      	lsls	r3, r1, #2
 8008df2:	4621      	mov	r1, r4
 8008df4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008df8:	4621      	mov	r1, r4
 8008dfa:	008a      	lsls	r2, r1, #2
 8008dfc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008e00:	f7f7 f9ea 	bl	80001d8 <__aeabi_uldivmod>
 8008e04:	4602      	mov	r2, r0
 8008e06:	460b      	mov	r3, r1
 8008e08:	4b60      	ldr	r3, [pc, #384]	@ (8008f8c <UART_SetConfig+0x570>)
 8008e0a:	fba3 2302 	umull	r2, r3, r3, r2
 8008e0e:	095b      	lsrs	r3, r3, #5
 8008e10:	011c      	lsls	r4, r3, #4
 8008e12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008e16:	2200      	movs	r2, #0
 8008e18:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008e1c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008e20:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008e24:	4642      	mov	r2, r8
 8008e26:	464b      	mov	r3, r9
 8008e28:	1891      	adds	r1, r2, r2
 8008e2a:	61b9      	str	r1, [r7, #24]
 8008e2c:	415b      	adcs	r3, r3
 8008e2e:	61fb      	str	r3, [r7, #28]
 8008e30:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008e34:	4641      	mov	r1, r8
 8008e36:	1851      	adds	r1, r2, r1
 8008e38:	6139      	str	r1, [r7, #16]
 8008e3a:	4649      	mov	r1, r9
 8008e3c:	414b      	adcs	r3, r1
 8008e3e:	617b      	str	r3, [r7, #20]
 8008e40:	f04f 0200 	mov.w	r2, #0
 8008e44:	f04f 0300 	mov.w	r3, #0
 8008e48:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008e4c:	4659      	mov	r1, fp
 8008e4e:	00cb      	lsls	r3, r1, #3
 8008e50:	4651      	mov	r1, sl
 8008e52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008e56:	4651      	mov	r1, sl
 8008e58:	00ca      	lsls	r2, r1, #3
 8008e5a:	4610      	mov	r0, r2
 8008e5c:	4619      	mov	r1, r3
 8008e5e:	4603      	mov	r3, r0
 8008e60:	4642      	mov	r2, r8
 8008e62:	189b      	adds	r3, r3, r2
 8008e64:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008e68:	464b      	mov	r3, r9
 8008e6a:	460a      	mov	r2, r1
 8008e6c:	eb42 0303 	adc.w	r3, r2, r3
 8008e70:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008e74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e78:	685b      	ldr	r3, [r3, #4]
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008e7e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8008e80:	f04f 0200 	mov.w	r2, #0
 8008e84:	f04f 0300 	mov.w	r3, #0
 8008e88:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8008e8c:	4649      	mov	r1, r9
 8008e8e:	008b      	lsls	r3, r1, #2
 8008e90:	4641      	mov	r1, r8
 8008e92:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008e96:	4641      	mov	r1, r8
 8008e98:	008a      	lsls	r2, r1, #2
 8008e9a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8008e9e:	f7f7 f99b 	bl	80001d8 <__aeabi_uldivmod>
 8008ea2:	4602      	mov	r2, r0
 8008ea4:	460b      	mov	r3, r1
 8008ea6:	4611      	mov	r1, r2
 8008ea8:	4b38      	ldr	r3, [pc, #224]	@ (8008f8c <UART_SetConfig+0x570>)
 8008eaa:	fba3 2301 	umull	r2, r3, r3, r1
 8008eae:	095b      	lsrs	r3, r3, #5
 8008eb0:	2264      	movs	r2, #100	@ 0x64
 8008eb2:	fb02 f303 	mul.w	r3, r2, r3
 8008eb6:	1acb      	subs	r3, r1, r3
 8008eb8:	011b      	lsls	r3, r3, #4
 8008eba:	3332      	adds	r3, #50	@ 0x32
 8008ebc:	4a33      	ldr	r2, [pc, #204]	@ (8008f8c <UART_SetConfig+0x570>)
 8008ebe:	fba2 2303 	umull	r2, r3, r2, r3
 8008ec2:	095b      	lsrs	r3, r3, #5
 8008ec4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008ec8:	441c      	add	r4, r3
 8008eca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008ece:	2200      	movs	r2, #0
 8008ed0:	673b      	str	r3, [r7, #112]	@ 0x70
 8008ed2:	677a      	str	r2, [r7, #116]	@ 0x74
 8008ed4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008ed8:	4642      	mov	r2, r8
 8008eda:	464b      	mov	r3, r9
 8008edc:	1891      	adds	r1, r2, r2
 8008ede:	60b9      	str	r1, [r7, #8]
 8008ee0:	415b      	adcs	r3, r3
 8008ee2:	60fb      	str	r3, [r7, #12]
 8008ee4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008ee8:	4641      	mov	r1, r8
 8008eea:	1851      	adds	r1, r2, r1
 8008eec:	6039      	str	r1, [r7, #0]
 8008eee:	4649      	mov	r1, r9
 8008ef0:	414b      	adcs	r3, r1
 8008ef2:	607b      	str	r3, [r7, #4]
 8008ef4:	f04f 0200 	mov.w	r2, #0
 8008ef8:	f04f 0300 	mov.w	r3, #0
 8008efc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008f00:	4659      	mov	r1, fp
 8008f02:	00cb      	lsls	r3, r1, #3
 8008f04:	4651      	mov	r1, sl
 8008f06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008f0a:	4651      	mov	r1, sl
 8008f0c:	00ca      	lsls	r2, r1, #3
 8008f0e:	4610      	mov	r0, r2
 8008f10:	4619      	mov	r1, r3
 8008f12:	4603      	mov	r3, r0
 8008f14:	4642      	mov	r2, r8
 8008f16:	189b      	adds	r3, r3, r2
 8008f18:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008f1a:	464b      	mov	r3, r9
 8008f1c:	460a      	mov	r2, r1
 8008f1e:	eb42 0303 	adc.w	r3, r2, r3
 8008f22:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008f24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f28:	685b      	ldr	r3, [r3, #4]
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	663b      	str	r3, [r7, #96]	@ 0x60
 8008f2e:	667a      	str	r2, [r7, #100]	@ 0x64
 8008f30:	f04f 0200 	mov.w	r2, #0
 8008f34:	f04f 0300 	mov.w	r3, #0
 8008f38:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8008f3c:	4649      	mov	r1, r9
 8008f3e:	008b      	lsls	r3, r1, #2
 8008f40:	4641      	mov	r1, r8
 8008f42:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008f46:	4641      	mov	r1, r8
 8008f48:	008a      	lsls	r2, r1, #2
 8008f4a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8008f4e:	f7f7 f943 	bl	80001d8 <__aeabi_uldivmod>
 8008f52:	4602      	mov	r2, r0
 8008f54:	460b      	mov	r3, r1
 8008f56:	4b0d      	ldr	r3, [pc, #52]	@ (8008f8c <UART_SetConfig+0x570>)
 8008f58:	fba3 1302 	umull	r1, r3, r3, r2
 8008f5c:	095b      	lsrs	r3, r3, #5
 8008f5e:	2164      	movs	r1, #100	@ 0x64
 8008f60:	fb01 f303 	mul.w	r3, r1, r3
 8008f64:	1ad3      	subs	r3, r2, r3
 8008f66:	011b      	lsls	r3, r3, #4
 8008f68:	3332      	adds	r3, #50	@ 0x32
 8008f6a:	4a08      	ldr	r2, [pc, #32]	@ (8008f8c <UART_SetConfig+0x570>)
 8008f6c:	fba2 2303 	umull	r2, r3, r2, r3
 8008f70:	095b      	lsrs	r3, r3, #5
 8008f72:	f003 020f 	and.w	r2, r3, #15
 8008f76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	4422      	add	r2, r4
 8008f7e:	609a      	str	r2, [r3, #8]
}
 8008f80:	bf00      	nop
 8008f82:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8008f86:	46bd      	mov	sp, r7
 8008f88:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008f8c:	51eb851f 	.word	0x51eb851f

08008f90 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008f90:	b084      	sub	sp, #16
 8008f92:	b580      	push	{r7, lr}
 8008f94:	b084      	sub	sp, #16
 8008f96:	af00      	add	r7, sp, #0
 8008f98:	6078      	str	r0, [r7, #4]
 8008f9a:	f107 001c 	add.w	r0, r7, #28
 8008f9e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008fa2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8008fa6:	2b01      	cmp	r3, #1
 8008fa8:	d123      	bne.n	8008ff2 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fae:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	68db      	ldr	r3, [r3, #12]
 8008fba:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8008fbe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008fc2:	687a      	ldr	r2, [r7, #4]
 8008fc4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	68db      	ldr	r3, [r3, #12]
 8008fca:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008fd2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008fd6:	2b01      	cmp	r3, #1
 8008fd8:	d105      	bne.n	8008fe6 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	68db      	ldr	r3, [r3, #12]
 8008fde:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008fe6:	6878      	ldr	r0, [r7, #4]
 8008fe8:	f000 f9dc 	bl	80093a4 <USB_CoreReset>
 8008fec:	4603      	mov	r3, r0
 8008fee:	73fb      	strb	r3, [r7, #15]
 8008ff0:	e01b      	b.n	800902a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	68db      	ldr	r3, [r3, #12]
 8008ff6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008ffe:	6878      	ldr	r0, [r7, #4]
 8009000:	f000 f9d0 	bl	80093a4 <USB_CoreReset>
 8009004:	4603      	mov	r3, r0
 8009006:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009008:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800900c:	2b00      	cmp	r3, #0
 800900e:	d106      	bne.n	800901e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009014:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	639a      	str	r2, [r3, #56]	@ 0x38
 800901c:	e005      	b.n	800902a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009022:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800902a:	7fbb      	ldrb	r3, [r7, #30]
 800902c:	2b01      	cmp	r3, #1
 800902e:	d10b      	bne.n	8009048 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	689b      	ldr	r3, [r3, #8]
 8009034:	f043 0206 	orr.w	r2, r3, #6
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	689b      	ldr	r3, [r3, #8]
 8009040:	f043 0220 	orr.w	r2, r3, #32
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009048:	7bfb      	ldrb	r3, [r7, #15]
}
 800904a:	4618      	mov	r0, r3
 800904c:	3710      	adds	r7, #16
 800904e:	46bd      	mov	sp, r7
 8009050:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009054:	b004      	add	sp, #16
 8009056:	4770      	bx	lr

08009058 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009058:	b480      	push	{r7}
 800905a:	b083      	sub	sp, #12
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	689b      	ldr	r3, [r3, #8]
 8009064:	f043 0201 	orr.w	r2, r3, #1
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800906c:	2300      	movs	r3, #0
}
 800906e:	4618      	mov	r0, r3
 8009070:	370c      	adds	r7, #12
 8009072:	46bd      	mov	sp, r7
 8009074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009078:	4770      	bx	lr

0800907a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800907a:	b480      	push	{r7}
 800907c:	b083      	sub	sp, #12
 800907e:	af00      	add	r7, sp, #0
 8009080:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	689b      	ldr	r3, [r3, #8]
 8009086:	f023 0201 	bic.w	r2, r3, #1
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800908e:	2300      	movs	r3, #0
}
 8009090:	4618      	mov	r0, r3
 8009092:	370c      	adds	r7, #12
 8009094:	46bd      	mov	sp, r7
 8009096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909a:	4770      	bx	lr

0800909c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800909c:	b580      	push	{r7, lr}
 800909e:	b084      	sub	sp, #16
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
 80090a4:	460b      	mov	r3, r1
 80090a6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80090a8:	2300      	movs	r3, #0
 80090aa:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	68db      	ldr	r3, [r3, #12]
 80090b0:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80090b8:	78fb      	ldrb	r3, [r7, #3]
 80090ba:	2b01      	cmp	r3, #1
 80090bc:	d115      	bne.n	80090ea <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	68db      	ldr	r3, [r3, #12]
 80090c2:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80090ca:	200a      	movs	r0, #10
 80090cc:	f7f8 fa84 	bl	80015d8 <HAL_Delay>
      ms += 10U;
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	330a      	adds	r3, #10
 80090d4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80090d6:	6878      	ldr	r0, [r7, #4]
 80090d8:	f000 f956 	bl	8009388 <USB_GetMode>
 80090dc:	4603      	mov	r3, r0
 80090de:	2b01      	cmp	r3, #1
 80090e0:	d01e      	beq.n	8009120 <USB_SetCurrentMode+0x84>
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	2bc7      	cmp	r3, #199	@ 0xc7
 80090e6:	d9f0      	bls.n	80090ca <USB_SetCurrentMode+0x2e>
 80090e8:	e01a      	b.n	8009120 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80090ea:	78fb      	ldrb	r3, [r7, #3]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d115      	bne.n	800911c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	68db      	ldr	r3, [r3, #12]
 80090f4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80090fc:	200a      	movs	r0, #10
 80090fe:	f7f8 fa6b 	bl	80015d8 <HAL_Delay>
      ms += 10U;
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	330a      	adds	r3, #10
 8009106:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009108:	6878      	ldr	r0, [r7, #4]
 800910a:	f000 f93d 	bl	8009388 <USB_GetMode>
 800910e:	4603      	mov	r3, r0
 8009110:	2b00      	cmp	r3, #0
 8009112:	d005      	beq.n	8009120 <USB_SetCurrentMode+0x84>
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	2bc7      	cmp	r3, #199	@ 0xc7
 8009118:	d9f0      	bls.n	80090fc <USB_SetCurrentMode+0x60>
 800911a:	e001      	b.n	8009120 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800911c:	2301      	movs	r3, #1
 800911e:	e005      	b.n	800912c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	2bc8      	cmp	r3, #200	@ 0xc8
 8009124:	d101      	bne.n	800912a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009126:	2301      	movs	r3, #1
 8009128:	e000      	b.n	800912c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800912a:	2300      	movs	r3, #0
}
 800912c:	4618      	mov	r0, r3
 800912e:	3710      	adds	r7, #16
 8009130:	46bd      	mov	sp, r7
 8009132:	bd80      	pop	{r7, pc}

08009134 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009134:	b480      	push	{r7}
 8009136:	b085      	sub	sp, #20
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
 800913c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800913e:	2300      	movs	r3, #0
 8009140:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	3301      	adds	r3, #1
 8009146:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800914e:	d901      	bls.n	8009154 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009150:	2303      	movs	r3, #3
 8009152:	e01b      	b.n	800918c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	691b      	ldr	r3, [r3, #16]
 8009158:	2b00      	cmp	r3, #0
 800915a:	daf2      	bge.n	8009142 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800915c:	2300      	movs	r3, #0
 800915e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009160:	683b      	ldr	r3, [r7, #0]
 8009162:	019b      	lsls	r3, r3, #6
 8009164:	f043 0220 	orr.w	r2, r3, #32
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	3301      	adds	r3, #1
 8009170:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009178:	d901      	bls.n	800917e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800917a:	2303      	movs	r3, #3
 800917c:	e006      	b.n	800918c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	691b      	ldr	r3, [r3, #16]
 8009182:	f003 0320 	and.w	r3, r3, #32
 8009186:	2b20      	cmp	r3, #32
 8009188:	d0f0      	beq.n	800916c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800918a:	2300      	movs	r3, #0
}
 800918c:	4618      	mov	r0, r3
 800918e:	3714      	adds	r7, #20
 8009190:	46bd      	mov	sp, r7
 8009192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009196:	4770      	bx	lr

08009198 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009198:	b480      	push	{r7}
 800919a:	b085      	sub	sp, #20
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80091a0:	2300      	movs	r3, #0
 80091a2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	3301      	adds	r3, #1
 80091a8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80091b0:	d901      	bls.n	80091b6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80091b2:	2303      	movs	r3, #3
 80091b4:	e018      	b.n	80091e8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	691b      	ldr	r3, [r3, #16]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	daf2      	bge.n	80091a4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80091be:	2300      	movs	r3, #0
 80091c0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	2210      	movs	r2, #16
 80091c6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	3301      	adds	r3, #1
 80091cc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80091d4:	d901      	bls.n	80091da <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80091d6:	2303      	movs	r3, #3
 80091d8:	e006      	b.n	80091e8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	691b      	ldr	r3, [r3, #16]
 80091de:	f003 0310 	and.w	r3, r3, #16
 80091e2:	2b10      	cmp	r3, #16
 80091e4:	d0f0      	beq.n	80091c8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80091e6:	2300      	movs	r3, #0
}
 80091e8:	4618      	mov	r0, r3
 80091ea:	3714      	adds	r7, #20
 80091ec:	46bd      	mov	sp, r7
 80091ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f2:	4770      	bx	lr

080091f4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80091f4:	b480      	push	{r7}
 80091f6:	b089      	sub	sp, #36	@ 0x24
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	60f8      	str	r0, [r7, #12]
 80091fc:	60b9      	str	r1, [r7, #8]
 80091fe:	4611      	mov	r1, r2
 8009200:	461a      	mov	r2, r3
 8009202:	460b      	mov	r3, r1
 8009204:	71fb      	strb	r3, [r7, #7]
 8009206:	4613      	mov	r3, r2
 8009208:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800920e:	68bb      	ldr	r3, [r7, #8]
 8009210:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009212:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009216:	2b00      	cmp	r3, #0
 8009218:	d123      	bne.n	8009262 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800921a:	88bb      	ldrh	r3, [r7, #4]
 800921c:	3303      	adds	r3, #3
 800921e:	089b      	lsrs	r3, r3, #2
 8009220:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009222:	2300      	movs	r3, #0
 8009224:	61bb      	str	r3, [r7, #24]
 8009226:	e018      	b.n	800925a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009228:	79fb      	ldrb	r3, [r7, #7]
 800922a:	031a      	lsls	r2, r3, #12
 800922c:	697b      	ldr	r3, [r7, #20]
 800922e:	4413      	add	r3, r2
 8009230:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009234:	461a      	mov	r2, r3
 8009236:	69fb      	ldr	r3, [r7, #28]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800923c:	69fb      	ldr	r3, [r7, #28]
 800923e:	3301      	adds	r3, #1
 8009240:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009242:	69fb      	ldr	r3, [r7, #28]
 8009244:	3301      	adds	r3, #1
 8009246:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009248:	69fb      	ldr	r3, [r7, #28]
 800924a:	3301      	adds	r3, #1
 800924c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800924e:	69fb      	ldr	r3, [r7, #28]
 8009250:	3301      	adds	r3, #1
 8009252:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009254:	69bb      	ldr	r3, [r7, #24]
 8009256:	3301      	adds	r3, #1
 8009258:	61bb      	str	r3, [r7, #24]
 800925a:	69ba      	ldr	r2, [r7, #24]
 800925c:	693b      	ldr	r3, [r7, #16]
 800925e:	429a      	cmp	r2, r3
 8009260:	d3e2      	bcc.n	8009228 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009262:	2300      	movs	r3, #0
}
 8009264:	4618      	mov	r0, r3
 8009266:	3724      	adds	r7, #36	@ 0x24
 8009268:	46bd      	mov	sp, r7
 800926a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926e:	4770      	bx	lr

08009270 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009270:	b480      	push	{r7}
 8009272:	b08b      	sub	sp, #44	@ 0x2c
 8009274:	af00      	add	r7, sp, #0
 8009276:	60f8      	str	r0, [r7, #12]
 8009278:	60b9      	str	r1, [r7, #8]
 800927a:	4613      	mov	r3, r2
 800927c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009282:	68bb      	ldr	r3, [r7, #8]
 8009284:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009286:	88fb      	ldrh	r3, [r7, #6]
 8009288:	089b      	lsrs	r3, r3, #2
 800928a:	b29b      	uxth	r3, r3
 800928c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800928e:	88fb      	ldrh	r3, [r7, #6]
 8009290:	f003 0303 	and.w	r3, r3, #3
 8009294:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009296:	2300      	movs	r3, #0
 8009298:	623b      	str	r3, [r7, #32]
 800929a:	e014      	b.n	80092c6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800929c:	69bb      	ldr	r3, [r7, #24]
 800929e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80092a2:	681a      	ldr	r2, [r3, #0]
 80092a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092a6:	601a      	str	r2, [r3, #0]
    pDest++;
 80092a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092aa:	3301      	adds	r3, #1
 80092ac:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80092ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092b0:	3301      	adds	r3, #1
 80092b2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80092b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092b6:	3301      	adds	r3, #1
 80092b8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80092ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092bc:	3301      	adds	r3, #1
 80092be:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80092c0:	6a3b      	ldr	r3, [r7, #32]
 80092c2:	3301      	adds	r3, #1
 80092c4:	623b      	str	r3, [r7, #32]
 80092c6:	6a3a      	ldr	r2, [r7, #32]
 80092c8:	697b      	ldr	r3, [r7, #20]
 80092ca:	429a      	cmp	r2, r3
 80092cc:	d3e6      	bcc.n	800929c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80092ce:	8bfb      	ldrh	r3, [r7, #30]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d01e      	beq.n	8009312 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80092d4:	2300      	movs	r3, #0
 80092d6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80092d8:	69bb      	ldr	r3, [r7, #24]
 80092da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80092de:	461a      	mov	r2, r3
 80092e0:	f107 0310 	add.w	r3, r7, #16
 80092e4:	6812      	ldr	r2, [r2, #0]
 80092e6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80092e8:	693a      	ldr	r2, [r7, #16]
 80092ea:	6a3b      	ldr	r3, [r7, #32]
 80092ec:	b2db      	uxtb	r3, r3
 80092ee:	00db      	lsls	r3, r3, #3
 80092f0:	fa22 f303 	lsr.w	r3, r2, r3
 80092f4:	b2da      	uxtb	r2, r3
 80092f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092f8:	701a      	strb	r2, [r3, #0]
      i++;
 80092fa:	6a3b      	ldr	r3, [r7, #32]
 80092fc:	3301      	adds	r3, #1
 80092fe:	623b      	str	r3, [r7, #32]
      pDest++;
 8009300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009302:	3301      	adds	r3, #1
 8009304:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8009306:	8bfb      	ldrh	r3, [r7, #30]
 8009308:	3b01      	subs	r3, #1
 800930a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800930c:	8bfb      	ldrh	r3, [r7, #30]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d1ea      	bne.n	80092e8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009314:	4618      	mov	r0, r3
 8009316:	372c      	adds	r7, #44	@ 0x2c
 8009318:	46bd      	mov	sp, r7
 800931a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931e:	4770      	bx	lr

08009320 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8009320:	b480      	push	{r7}
 8009322:	b085      	sub	sp, #20
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	695b      	ldr	r3, [r3, #20]
 800932c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	699b      	ldr	r3, [r3, #24]
 8009332:	68fa      	ldr	r2, [r7, #12]
 8009334:	4013      	ands	r3, r2
 8009336:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009338:	68fb      	ldr	r3, [r7, #12]
}
 800933a:	4618      	mov	r0, r3
 800933c:	3714      	adds	r7, #20
 800933e:	46bd      	mov	sp, r7
 8009340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009344:	4770      	bx	lr

08009346 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8009346:	b480      	push	{r7}
 8009348:	b085      	sub	sp, #20
 800934a:	af00      	add	r7, sp, #0
 800934c:	6078      	str	r0, [r7, #4]
 800934e:	460b      	mov	r3, r1
 8009350:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8009356:	78fb      	ldrb	r3, [r7, #3]
 8009358:	015a      	lsls	r2, r3, #5
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	4413      	add	r3, r2
 800935e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009362:	689b      	ldr	r3, [r3, #8]
 8009364:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8009366:	78fb      	ldrb	r3, [r7, #3]
 8009368:	015a      	lsls	r2, r3, #5
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	4413      	add	r3, r2
 800936e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009372:	68db      	ldr	r3, [r3, #12]
 8009374:	68ba      	ldr	r2, [r7, #8]
 8009376:	4013      	ands	r3, r2
 8009378:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800937a:	68bb      	ldr	r3, [r7, #8]
}
 800937c:	4618      	mov	r0, r3
 800937e:	3714      	adds	r7, #20
 8009380:	46bd      	mov	sp, r7
 8009382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009386:	4770      	bx	lr

08009388 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8009388:	b480      	push	{r7}
 800938a:	b083      	sub	sp, #12
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	695b      	ldr	r3, [r3, #20]
 8009394:	f003 0301 	and.w	r3, r3, #1
}
 8009398:	4618      	mov	r0, r3
 800939a:	370c      	adds	r7, #12
 800939c:	46bd      	mov	sp, r7
 800939e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a2:	4770      	bx	lr

080093a4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80093a4:	b480      	push	{r7}
 80093a6:	b085      	sub	sp, #20
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80093ac:	2300      	movs	r3, #0
 80093ae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	3301      	adds	r3, #1
 80093b4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80093bc:	d901      	bls.n	80093c2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80093be:	2303      	movs	r3, #3
 80093c0:	e01b      	b.n	80093fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	691b      	ldr	r3, [r3, #16]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	daf2      	bge.n	80093b0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80093ca:	2300      	movs	r3, #0
 80093cc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	691b      	ldr	r3, [r3, #16]
 80093d2:	f043 0201 	orr.w	r2, r3, #1
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	3301      	adds	r3, #1
 80093de:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80093e6:	d901      	bls.n	80093ec <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80093e8:	2303      	movs	r3, #3
 80093ea:	e006      	b.n	80093fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	691b      	ldr	r3, [r3, #16]
 80093f0:	f003 0301 	and.w	r3, r3, #1
 80093f4:	2b01      	cmp	r3, #1
 80093f6:	d0f0      	beq.n	80093da <USB_CoreReset+0x36>

  return HAL_OK;
 80093f8:	2300      	movs	r3, #0
}
 80093fa:	4618      	mov	r0, r3
 80093fc:	3714      	adds	r7, #20
 80093fe:	46bd      	mov	sp, r7
 8009400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009404:	4770      	bx	lr
	...

08009408 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009408:	b084      	sub	sp, #16
 800940a:	b580      	push	{r7, lr}
 800940c:	b086      	sub	sp, #24
 800940e:	af00      	add	r7, sp, #0
 8009410:	6078      	str	r0, [r7, #4]
 8009412:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8009416:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800941a:	2300      	movs	r3, #0
 800941c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009428:	461a      	mov	r2, r3
 800942a:	2300      	movs	r3, #0
 800942c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009432:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800943e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800944a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	68db      	ldr	r3, [r3, #12]
 8009456:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800945a:	2b00      	cmp	r3, #0
 800945c:	d119      	bne.n	8009492 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800945e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009462:	2b01      	cmp	r3, #1
 8009464:	d10a      	bne.n	800947c <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	68fa      	ldr	r2, [r7, #12]
 8009470:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8009474:	f043 0304 	orr.w	r3, r3, #4
 8009478:	6013      	str	r3, [r2, #0]
 800947a:	e014      	b.n	80094a6 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	68fa      	ldr	r2, [r7, #12]
 8009486:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800948a:	f023 0304 	bic.w	r3, r3, #4
 800948e:	6013      	str	r3, [r2, #0]
 8009490:	e009      	b.n	80094a6 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	68fa      	ldr	r2, [r7, #12]
 800949c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80094a0:	f023 0304 	bic.w	r3, r3, #4
 80094a4:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80094a6:	2110      	movs	r1, #16
 80094a8:	6878      	ldr	r0, [r7, #4]
 80094aa:	f7ff fe43 	bl	8009134 <USB_FlushTxFifo>
 80094ae:	4603      	mov	r3, r0
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d001      	beq.n	80094b8 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 80094b4:	2301      	movs	r3, #1
 80094b6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80094b8:	6878      	ldr	r0, [r7, #4]
 80094ba:	f7ff fe6d 	bl	8009198 <USB_FlushRxFifo>
 80094be:	4603      	mov	r3, r0
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d001      	beq.n	80094c8 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 80094c4:	2301      	movs	r3, #1
 80094c6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80094c8:	2300      	movs	r3, #0
 80094ca:	613b      	str	r3, [r7, #16]
 80094cc:	e015      	b.n	80094fa <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 80094ce:	693b      	ldr	r3, [r7, #16]
 80094d0:	015a      	lsls	r2, r3, #5
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	4413      	add	r3, r2
 80094d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80094da:	461a      	mov	r2, r3
 80094dc:	f04f 33ff 	mov.w	r3, #4294967295
 80094e0:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80094e2:	693b      	ldr	r3, [r7, #16]
 80094e4:	015a      	lsls	r2, r3, #5
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	4413      	add	r3, r2
 80094ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80094ee:	461a      	mov	r2, r3
 80094f0:	2300      	movs	r3, #0
 80094f2:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80094f4:	693b      	ldr	r3, [r7, #16]
 80094f6:	3301      	adds	r3, #1
 80094f8:	613b      	str	r3, [r7, #16]
 80094fa:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80094fe:	461a      	mov	r2, r3
 8009500:	693b      	ldr	r3, [r7, #16]
 8009502:	4293      	cmp	r3, r2
 8009504:	d3e3      	bcc.n	80094ce <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	2200      	movs	r2, #0
 800950a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	f04f 32ff 	mov.w	r2, #4294967295
 8009512:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	4a18      	ldr	r2, [pc, #96]	@ (8009578 <USB_HostInit+0x170>)
 8009518:	4293      	cmp	r3, r2
 800951a:	d10b      	bne.n	8009534 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009522:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	4a15      	ldr	r2, [pc, #84]	@ (800957c <USB_HostInit+0x174>)
 8009528:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	4a14      	ldr	r2, [pc, #80]	@ (8009580 <USB_HostInit+0x178>)
 800952e:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8009532:	e009      	b.n	8009548 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2280      	movs	r2, #128	@ 0x80
 8009538:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	4a11      	ldr	r2, [pc, #68]	@ (8009584 <USB_HostInit+0x17c>)
 800953e:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	4a11      	ldr	r2, [pc, #68]	@ (8009588 <USB_HostInit+0x180>)
 8009544:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009548:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800954c:	2b00      	cmp	r3, #0
 800954e:	d105      	bne.n	800955c <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	699b      	ldr	r3, [r3, #24]
 8009554:	f043 0210 	orr.w	r2, r3, #16
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	699a      	ldr	r2, [r3, #24]
 8009560:	4b0a      	ldr	r3, [pc, #40]	@ (800958c <USB_HostInit+0x184>)
 8009562:	4313      	orrs	r3, r2
 8009564:	687a      	ldr	r2, [r7, #4]
 8009566:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8009568:	7dfb      	ldrb	r3, [r7, #23]
}
 800956a:	4618      	mov	r0, r3
 800956c:	3718      	adds	r7, #24
 800956e:	46bd      	mov	sp, r7
 8009570:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009574:	b004      	add	sp, #16
 8009576:	4770      	bx	lr
 8009578:	40040000 	.word	0x40040000
 800957c:	01000200 	.word	0x01000200
 8009580:	00e00300 	.word	0x00e00300
 8009584:	00600080 	.word	0x00600080
 8009588:	004000e0 	.word	0x004000e0
 800958c:	a3200008 	.word	0xa3200008

08009590 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8009590:	b480      	push	{r7}
 8009592:	b085      	sub	sp, #20
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
 8009598:	460b      	mov	r3, r1
 800959a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	68fa      	ldr	r2, [r7, #12]
 80095aa:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80095ae:	f023 0303 	bic.w	r3, r3, #3
 80095b2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80095ba:	681a      	ldr	r2, [r3, #0]
 80095bc:	78fb      	ldrb	r3, [r7, #3]
 80095be:	f003 0303 	and.w	r3, r3, #3
 80095c2:	68f9      	ldr	r1, [r7, #12]
 80095c4:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80095c8:	4313      	orrs	r3, r2
 80095ca:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80095cc:	78fb      	ldrb	r3, [r7, #3]
 80095ce:	2b01      	cmp	r3, #1
 80095d0:	d107      	bne.n	80095e2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80095d8:	461a      	mov	r2, r3
 80095da:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80095de:	6053      	str	r3, [r2, #4]
 80095e0:	e00c      	b.n	80095fc <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 80095e2:	78fb      	ldrb	r3, [r7, #3]
 80095e4:	2b02      	cmp	r3, #2
 80095e6:	d107      	bne.n	80095f8 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80095ee:	461a      	mov	r2, r3
 80095f0:	f241 7370 	movw	r3, #6000	@ 0x1770
 80095f4:	6053      	str	r3, [r2, #4]
 80095f6:	e001      	b.n	80095fc <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 80095f8:	2301      	movs	r3, #1
 80095fa:	e000      	b.n	80095fe <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 80095fc:	2300      	movs	r3, #0
}
 80095fe:	4618      	mov	r0, r3
 8009600:	3714      	adds	r7, #20
 8009602:	46bd      	mov	sp, r7
 8009604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009608:	4770      	bx	lr

0800960a <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 800960a:	b580      	push	{r7, lr}
 800960c:	b084      	sub	sp, #16
 800960e:	af00      	add	r7, sp, #0
 8009610:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8009616:	2300      	movs	r3, #0
 8009618:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8009624:	68bb      	ldr	r3, [r7, #8]
 8009626:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800962a:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800962c:	68bb      	ldr	r3, [r7, #8]
 800962e:	68fa      	ldr	r2, [r7, #12]
 8009630:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8009634:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009638:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800963a:	2064      	movs	r0, #100	@ 0x64
 800963c:	f7f7 ffcc 	bl	80015d8 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8009640:	68bb      	ldr	r3, [r7, #8]
 8009642:	68fa      	ldr	r2, [r7, #12]
 8009644:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8009648:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800964c:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800964e:	200a      	movs	r0, #10
 8009650:	f7f7 ffc2 	bl	80015d8 <HAL_Delay>

  return HAL_OK;
 8009654:	2300      	movs	r3, #0
}
 8009656:	4618      	mov	r0, r3
 8009658:	3710      	adds	r7, #16
 800965a:	46bd      	mov	sp, r7
 800965c:	bd80      	pop	{r7, pc}

0800965e <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800965e:	b480      	push	{r7}
 8009660:	b085      	sub	sp, #20
 8009662:	af00      	add	r7, sp, #0
 8009664:	6078      	str	r0, [r7, #4]
 8009666:	460b      	mov	r3, r1
 8009668:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800966e:	2300      	movs	r3, #0
 8009670:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800967c:	68bb      	ldr	r3, [r7, #8]
 800967e:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8009682:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8009684:	68bb      	ldr	r3, [r7, #8]
 8009686:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800968a:	2b00      	cmp	r3, #0
 800968c:	d109      	bne.n	80096a2 <USB_DriveVbus+0x44>
 800968e:	78fb      	ldrb	r3, [r7, #3]
 8009690:	2b01      	cmp	r3, #1
 8009692:	d106      	bne.n	80096a2 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8009694:	68bb      	ldr	r3, [r7, #8]
 8009696:	68fa      	ldr	r2, [r7, #12]
 8009698:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800969c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80096a0:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80096a2:	68bb      	ldr	r3, [r7, #8]
 80096a4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80096a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80096ac:	d109      	bne.n	80096c2 <USB_DriveVbus+0x64>
 80096ae:	78fb      	ldrb	r3, [r7, #3]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d106      	bne.n	80096c2 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80096b4:	68bb      	ldr	r3, [r7, #8]
 80096b6:	68fa      	ldr	r2, [r7, #12]
 80096b8:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80096bc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80096c0:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80096c2:	2300      	movs	r3, #0
}
 80096c4:	4618      	mov	r0, r3
 80096c6:	3714      	adds	r7, #20
 80096c8:	46bd      	mov	sp, r7
 80096ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ce:	4770      	bx	lr

080096d0 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 80096d0:	b480      	push	{r7}
 80096d2:	b085      	sub	sp, #20
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80096dc:	2300      	movs	r3, #0
 80096de:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80096ea:	68bb      	ldr	r3, [r7, #8]
 80096ec:	0c5b      	lsrs	r3, r3, #17
 80096ee:	f003 0303 	and.w	r3, r3, #3
}
 80096f2:	4618      	mov	r0, r3
 80096f4:	3714      	adds	r7, #20
 80096f6:	46bd      	mov	sp, r7
 80096f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fc:	4770      	bx	lr

080096fe <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 80096fe:	b480      	push	{r7}
 8009700:	b085      	sub	sp, #20
 8009702:	af00      	add	r7, sp, #0
 8009704:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009710:	689b      	ldr	r3, [r3, #8]
 8009712:	b29b      	uxth	r3, r3
}
 8009714:	4618      	mov	r0, r3
 8009716:	3714      	adds	r7, #20
 8009718:	46bd      	mov	sp, r7
 800971a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971e:	4770      	bx	lr

08009720 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8009720:	b580      	push	{r7, lr}
 8009722:	b088      	sub	sp, #32
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]
 8009728:	4608      	mov	r0, r1
 800972a:	4611      	mov	r1, r2
 800972c:	461a      	mov	r2, r3
 800972e:	4603      	mov	r3, r0
 8009730:	70fb      	strb	r3, [r7, #3]
 8009732:	460b      	mov	r3, r1
 8009734:	70bb      	strb	r3, [r7, #2]
 8009736:	4613      	mov	r3, r2
 8009738:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800973a:	2300      	movs	r3, #0
 800973c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8009742:	78fb      	ldrb	r3, [r7, #3]
 8009744:	015a      	lsls	r2, r3, #5
 8009746:	693b      	ldr	r3, [r7, #16]
 8009748:	4413      	add	r3, r2
 800974a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800974e:	461a      	mov	r2, r3
 8009750:	f04f 33ff 	mov.w	r3, #4294967295
 8009754:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8009756:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800975a:	2b03      	cmp	r3, #3
 800975c:	d87c      	bhi.n	8009858 <USB_HC_Init+0x138>
 800975e:	a201      	add	r2, pc, #4	@ (adr r2, 8009764 <USB_HC_Init+0x44>)
 8009760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009764:	08009775 	.word	0x08009775
 8009768:	0800981b 	.word	0x0800981b
 800976c:	08009775 	.word	0x08009775
 8009770:	080097dd 	.word	0x080097dd
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009774:	78fb      	ldrb	r3, [r7, #3]
 8009776:	015a      	lsls	r2, r3, #5
 8009778:	693b      	ldr	r3, [r7, #16]
 800977a:	4413      	add	r3, r2
 800977c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009780:	461a      	mov	r2, r3
 8009782:	f240 439d 	movw	r3, #1181	@ 0x49d
 8009786:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8009788:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800978c:	2b00      	cmp	r3, #0
 800978e:	da10      	bge.n	80097b2 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8009790:	78fb      	ldrb	r3, [r7, #3]
 8009792:	015a      	lsls	r2, r3, #5
 8009794:	693b      	ldr	r3, [r7, #16]
 8009796:	4413      	add	r3, r2
 8009798:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800979c:	68db      	ldr	r3, [r3, #12]
 800979e:	78fa      	ldrb	r2, [r7, #3]
 80097a0:	0151      	lsls	r1, r2, #5
 80097a2:	693a      	ldr	r2, [r7, #16]
 80097a4:	440a      	add	r2, r1
 80097a6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80097aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80097ae:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 80097b0:	e055      	b.n	800985e <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	4a6f      	ldr	r2, [pc, #444]	@ (8009974 <USB_HC_Init+0x254>)
 80097b6:	4293      	cmp	r3, r2
 80097b8:	d151      	bne.n	800985e <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80097ba:	78fb      	ldrb	r3, [r7, #3]
 80097bc:	015a      	lsls	r2, r3, #5
 80097be:	693b      	ldr	r3, [r7, #16]
 80097c0:	4413      	add	r3, r2
 80097c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80097c6:	68db      	ldr	r3, [r3, #12]
 80097c8:	78fa      	ldrb	r2, [r7, #3]
 80097ca:	0151      	lsls	r1, r2, #5
 80097cc:	693a      	ldr	r2, [r7, #16]
 80097ce:	440a      	add	r2, r1
 80097d0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80097d4:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80097d8:	60d3      	str	r3, [r2, #12]
      break;
 80097da:	e040      	b.n	800985e <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80097dc:	78fb      	ldrb	r3, [r7, #3]
 80097de:	015a      	lsls	r2, r3, #5
 80097e0:	693b      	ldr	r3, [r7, #16]
 80097e2:	4413      	add	r3, r2
 80097e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80097e8:	461a      	mov	r2, r3
 80097ea:	f240 639d 	movw	r3, #1693	@ 0x69d
 80097ee:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80097f0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	da34      	bge.n	8009862 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80097f8:	78fb      	ldrb	r3, [r7, #3]
 80097fa:	015a      	lsls	r2, r3, #5
 80097fc:	693b      	ldr	r3, [r7, #16]
 80097fe:	4413      	add	r3, r2
 8009800:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009804:	68db      	ldr	r3, [r3, #12]
 8009806:	78fa      	ldrb	r2, [r7, #3]
 8009808:	0151      	lsls	r1, r2, #5
 800980a:	693a      	ldr	r2, [r7, #16]
 800980c:	440a      	add	r2, r1
 800980e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009812:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009816:	60d3      	str	r3, [r2, #12]
      }

      break;
 8009818:	e023      	b.n	8009862 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800981a:	78fb      	ldrb	r3, [r7, #3]
 800981c:	015a      	lsls	r2, r3, #5
 800981e:	693b      	ldr	r3, [r7, #16]
 8009820:	4413      	add	r3, r2
 8009822:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009826:	461a      	mov	r2, r3
 8009828:	f240 2325 	movw	r3, #549	@ 0x225
 800982c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800982e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009832:	2b00      	cmp	r3, #0
 8009834:	da17      	bge.n	8009866 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8009836:	78fb      	ldrb	r3, [r7, #3]
 8009838:	015a      	lsls	r2, r3, #5
 800983a:	693b      	ldr	r3, [r7, #16]
 800983c:	4413      	add	r3, r2
 800983e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009842:	68db      	ldr	r3, [r3, #12]
 8009844:	78fa      	ldrb	r2, [r7, #3]
 8009846:	0151      	lsls	r1, r2, #5
 8009848:	693a      	ldr	r2, [r7, #16]
 800984a:	440a      	add	r2, r1
 800984c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009850:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8009854:	60d3      	str	r3, [r2, #12]
      }
      break;
 8009856:	e006      	b.n	8009866 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8009858:	2301      	movs	r3, #1
 800985a:	77fb      	strb	r3, [r7, #31]
      break;
 800985c:	e004      	b.n	8009868 <USB_HC_Init+0x148>
      break;
 800985e:	bf00      	nop
 8009860:	e002      	b.n	8009868 <USB_HC_Init+0x148>
      break;
 8009862:	bf00      	nop
 8009864:	e000      	b.n	8009868 <USB_HC_Init+0x148>
      break;
 8009866:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8009868:	78fb      	ldrb	r3, [r7, #3]
 800986a:	015a      	lsls	r2, r3, #5
 800986c:	693b      	ldr	r3, [r7, #16]
 800986e:	4413      	add	r3, r2
 8009870:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009874:	461a      	mov	r2, r3
 8009876:	2300      	movs	r3, #0
 8009878:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800987a:	78fb      	ldrb	r3, [r7, #3]
 800987c:	015a      	lsls	r2, r3, #5
 800987e:	693b      	ldr	r3, [r7, #16]
 8009880:	4413      	add	r3, r2
 8009882:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009886:	68db      	ldr	r3, [r3, #12]
 8009888:	78fa      	ldrb	r2, [r7, #3]
 800988a:	0151      	lsls	r1, r2, #5
 800988c:	693a      	ldr	r2, [r7, #16]
 800988e:	440a      	add	r2, r1
 8009890:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009894:	f043 0302 	orr.w	r3, r3, #2
 8009898:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800989a:	693b      	ldr	r3, [r7, #16]
 800989c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80098a0:	699a      	ldr	r2, [r3, #24]
 80098a2:	78fb      	ldrb	r3, [r7, #3]
 80098a4:	f003 030f 	and.w	r3, r3, #15
 80098a8:	2101      	movs	r1, #1
 80098aa:	fa01 f303 	lsl.w	r3, r1, r3
 80098ae:	6939      	ldr	r1, [r7, #16]
 80098b0:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80098b4:	4313      	orrs	r3, r2
 80098b6:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	699b      	ldr	r3, [r3, #24]
 80098bc:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80098c4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	da03      	bge.n	80098d4 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80098cc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80098d0:	61bb      	str	r3, [r7, #24]
 80098d2:	e001      	b.n	80098d8 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 80098d4:	2300      	movs	r3, #0
 80098d6:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80098d8:	6878      	ldr	r0, [r7, #4]
 80098da:	f7ff fef9 	bl	80096d0 <USB_GetHostSpeed>
 80098de:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80098e0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80098e4:	2b02      	cmp	r3, #2
 80098e6:	d106      	bne.n	80098f6 <USB_HC_Init+0x1d6>
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	2b02      	cmp	r3, #2
 80098ec:	d003      	beq.n	80098f6 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80098ee:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80098f2:	617b      	str	r3, [r7, #20]
 80098f4:	e001      	b.n	80098fa <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80098f6:	2300      	movs	r3, #0
 80098f8:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80098fa:	787b      	ldrb	r3, [r7, #1]
 80098fc:	059b      	lsls	r3, r3, #22
 80098fe:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8009902:	78bb      	ldrb	r3, [r7, #2]
 8009904:	02db      	lsls	r3, r3, #11
 8009906:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800990a:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800990c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009910:	049b      	lsls	r3, r3, #18
 8009912:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8009916:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8009918:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800991a:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800991e:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8009920:	69bb      	ldr	r3, [r7, #24]
 8009922:	431a      	orrs	r2, r3
 8009924:	697b      	ldr	r3, [r7, #20]
 8009926:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009928:	78fa      	ldrb	r2, [r7, #3]
 800992a:	0151      	lsls	r1, r2, #5
 800992c:	693a      	ldr	r2, [r7, #16]
 800992e:	440a      	add	r2, r1
 8009930:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8009934:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009938:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800993a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800993e:	2b03      	cmp	r3, #3
 8009940:	d003      	beq.n	800994a <USB_HC_Init+0x22a>
 8009942:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009946:	2b01      	cmp	r3, #1
 8009948:	d10f      	bne.n	800996a <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800994a:	78fb      	ldrb	r3, [r7, #3]
 800994c:	015a      	lsls	r2, r3, #5
 800994e:	693b      	ldr	r3, [r7, #16]
 8009950:	4413      	add	r3, r2
 8009952:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	78fa      	ldrb	r2, [r7, #3]
 800995a:	0151      	lsls	r1, r2, #5
 800995c:	693a      	ldr	r2, [r7, #16]
 800995e:	440a      	add	r2, r1
 8009960:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009964:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009968:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800996a:	7ffb      	ldrb	r3, [r7, #31]
}
 800996c:	4618      	mov	r0, r3
 800996e:	3720      	adds	r7, #32
 8009970:	46bd      	mov	sp, r7
 8009972:	bd80      	pop	{r7, pc}
 8009974:	40040000 	.word	0x40040000

08009978 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8009978:	b580      	push	{r7, lr}
 800997a:	b08c      	sub	sp, #48	@ 0x30
 800997c:	af02      	add	r7, sp, #8
 800997e:	60f8      	str	r0, [r7, #12]
 8009980:	60b9      	str	r1, [r7, #8]
 8009982:	4613      	mov	r3, r2
 8009984:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800998a:	68bb      	ldr	r3, [r7, #8]
 800998c:	785b      	ldrb	r3, [r3, #1]
 800998e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8009990:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009994:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	4a5d      	ldr	r2, [pc, #372]	@ (8009b10 <USB_HC_StartXfer+0x198>)
 800999a:	4293      	cmp	r3, r2
 800999c:	d12f      	bne.n	80099fe <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 800999e:	79fb      	ldrb	r3, [r7, #7]
 80099a0:	2b01      	cmp	r3, #1
 80099a2:	d11c      	bne.n	80099de <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 80099a4:	68bb      	ldr	r3, [r7, #8]
 80099a6:	7c9b      	ldrb	r3, [r3, #18]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d003      	beq.n	80099b4 <USB_HC_StartXfer+0x3c>
 80099ac:	68bb      	ldr	r3, [r7, #8]
 80099ae:	7c9b      	ldrb	r3, [r3, #18]
 80099b0:	2b02      	cmp	r3, #2
 80099b2:	d124      	bne.n	80099fe <USB_HC_StartXfer+0x86>
 80099b4:	68bb      	ldr	r3, [r7, #8]
 80099b6:	799b      	ldrb	r3, [r3, #6]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d120      	bne.n	80099fe <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80099bc:	69fb      	ldr	r3, [r7, #28]
 80099be:	015a      	lsls	r2, r3, #5
 80099c0:	6a3b      	ldr	r3, [r7, #32]
 80099c2:	4413      	add	r3, r2
 80099c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80099c8:	68db      	ldr	r3, [r3, #12]
 80099ca:	69fa      	ldr	r2, [r7, #28]
 80099cc:	0151      	lsls	r1, r2, #5
 80099ce:	6a3a      	ldr	r2, [r7, #32]
 80099d0:	440a      	add	r2, r1
 80099d2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80099d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80099da:	60d3      	str	r3, [r2, #12]
 80099dc:	e00f      	b.n	80099fe <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 80099de:	68bb      	ldr	r3, [r7, #8]
 80099e0:	791b      	ldrb	r3, [r3, #4]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d10b      	bne.n	80099fe <USB_HC_StartXfer+0x86>
 80099e6:	68bb      	ldr	r3, [r7, #8]
 80099e8:	795b      	ldrb	r3, [r3, #5]
 80099ea:	2b01      	cmp	r3, #1
 80099ec:	d107      	bne.n	80099fe <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 80099ee:	68bb      	ldr	r3, [r7, #8]
 80099f0:	785b      	ldrb	r3, [r3, #1]
 80099f2:	4619      	mov	r1, r3
 80099f4:	68f8      	ldr	r0, [r7, #12]
 80099f6:	f000 fb6b 	bl	800a0d0 <USB_DoPing>
        return HAL_OK;
 80099fa:	2300      	movs	r3, #0
 80099fc:	e232      	b.n	8009e64 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 80099fe:	68bb      	ldr	r3, [r7, #8]
 8009a00:	799b      	ldrb	r3, [r3, #6]
 8009a02:	2b01      	cmp	r3, #1
 8009a04:	d158      	bne.n	8009ab8 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8009a06:	2301      	movs	r3, #1
 8009a08:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8009a0a:	68bb      	ldr	r3, [r7, #8]
 8009a0c:	78db      	ldrb	r3, [r3, #3]
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d007      	beq.n	8009a22 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009a12:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009a14:	68ba      	ldr	r2, [r7, #8]
 8009a16:	8a92      	ldrh	r2, [r2, #20]
 8009a18:	fb03 f202 	mul.w	r2, r3, r2
 8009a1c:	68bb      	ldr	r3, [r7, #8]
 8009a1e:	61da      	str	r2, [r3, #28]
 8009a20:	e07c      	b.n	8009b1c <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8009a22:	68bb      	ldr	r3, [r7, #8]
 8009a24:	7c9b      	ldrb	r3, [r3, #18]
 8009a26:	2b01      	cmp	r3, #1
 8009a28:	d130      	bne.n	8009a8c <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8009a2a:	68bb      	ldr	r3, [r7, #8]
 8009a2c:	6a1b      	ldr	r3, [r3, #32]
 8009a2e:	2bbc      	cmp	r3, #188	@ 0xbc
 8009a30:	d918      	bls.n	8009a64 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8009a32:	68bb      	ldr	r3, [r7, #8]
 8009a34:	8a9b      	ldrh	r3, [r3, #20]
 8009a36:	461a      	mov	r2, r3
 8009a38:	68bb      	ldr	r3, [r7, #8]
 8009a3a:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8009a3c:	68bb      	ldr	r3, [r7, #8]
 8009a3e:	69da      	ldr	r2, [r3, #28]
 8009a40:	68bb      	ldr	r3, [r7, #8]
 8009a42:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8009a44:	68bb      	ldr	r3, [r7, #8]
 8009a46:	68db      	ldr	r3, [r3, #12]
 8009a48:	2b01      	cmp	r3, #1
 8009a4a:	d003      	beq.n	8009a54 <USB_HC_StartXfer+0xdc>
 8009a4c:	68bb      	ldr	r3, [r7, #8]
 8009a4e:	68db      	ldr	r3, [r3, #12]
 8009a50:	2b02      	cmp	r3, #2
 8009a52:	d103      	bne.n	8009a5c <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8009a54:	68bb      	ldr	r3, [r7, #8]
 8009a56:	2202      	movs	r2, #2
 8009a58:	60da      	str	r2, [r3, #12]
 8009a5a:	e05f      	b.n	8009b1c <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8009a5c:	68bb      	ldr	r3, [r7, #8]
 8009a5e:	2201      	movs	r2, #1
 8009a60:	60da      	str	r2, [r3, #12]
 8009a62:	e05b      	b.n	8009b1c <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8009a64:	68bb      	ldr	r3, [r7, #8]
 8009a66:	6a1a      	ldr	r2, [r3, #32]
 8009a68:	68bb      	ldr	r3, [r7, #8]
 8009a6a:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8009a6c:	68bb      	ldr	r3, [r7, #8]
 8009a6e:	68db      	ldr	r3, [r3, #12]
 8009a70:	2b01      	cmp	r3, #1
 8009a72:	d007      	beq.n	8009a84 <USB_HC_StartXfer+0x10c>
 8009a74:	68bb      	ldr	r3, [r7, #8]
 8009a76:	68db      	ldr	r3, [r3, #12]
 8009a78:	2b02      	cmp	r3, #2
 8009a7a:	d003      	beq.n	8009a84 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8009a7c:	68bb      	ldr	r3, [r7, #8]
 8009a7e:	2204      	movs	r2, #4
 8009a80:	60da      	str	r2, [r3, #12]
 8009a82:	e04b      	b.n	8009b1c <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8009a84:	68bb      	ldr	r3, [r7, #8]
 8009a86:	2203      	movs	r2, #3
 8009a88:	60da      	str	r2, [r3, #12]
 8009a8a:	e047      	b.n	8009b1c <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8009a8c:	79fb      	ldrb	r3, [r7, #7]
 8009a8e:	2b01      	cmp	r3, #1
 8009a90:	d10d      	bne.n	8009aae <USB_HC_StartXfer+0x136>
 8009a92:	68bb      	ldr	r3, [r7, #8]
 8009a94:	6a1b      	ldr	r3, [r3, #32]
 8009a96:	68ba      	ldr	r2, [r7, #8]
 8009a98:	8a92      	ldrh	r2, [r2, #20]
 8009a9a:	4293      	cmp	r3, r2
 8009a9c:	d907      	bls.n	8009aae <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009a9e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009aa0:	68ba      	ldr	r2, [r7, #8]
 8009aa2:	8a92      	ldrh	r2, [r2, #20]
 8009aa4:	fb03 f202 	mul.w	r2, r3, r2
 8009aa8:	68bb      	ldr	r3, [r7, #8]
 8009aaa:	61da      	str	r2, [r3, #28]
 8009aac:	e036      	b.n	8009b1c <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8009aae:	68bb      	ldr	r3, [r7, #8]
 8009ab0:	6a1a      	ldr	r2, [r3, #32]
 8009ab2:	68bb      	ldr	r3, [r7, #8]
 8009ab4:	61da      	str	r2, [r3, #28]
 8009ab6:	e031      	b.n	8009b1c <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8009ab8:	68bb      	ldr	r3, [r7, #8]
 8009aba:	6a1b      	ldr	r3, [r3, #32]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d018      	beq.n	8009af2 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8009ac0:	68bb      	ldr	r3, [r7, #8]
 8009ac2:	6a1b      	ldr	r3, [r3, #32]
 8009ac4:	68ba      	ldr	r2, [r7, #8]
 8009ac6:	8a92      	ldrh	r2, [r2, #20]
 8009ac8:	4413      	add	r3, r2
 8009aca:	3b01      	subs	r3, #1
 8009acc:	68ba      	ldr	r2, [r7, #8]
 8009ace:	8a92      	ldrh	r2, [r2, #20]
 8009ad0:	fbb3 f3f2 	udiv	r3, r3, r2
 8009ad4:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8009ad6:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8009ad8:	8b7b      	ldrh	r3, [r7, #26]
 8009ada:	429a      	cmp	r2, r3
 8009adc:	d90b      	bls.n	8009af6 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8009ade:	8b7b      	ldrh	r3, [r7, #26]
 8009ae0:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009ae2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009ae4:	68ba      	ldr	r2, [r7, #8]
 8009ae6:	8a92      	ldrh	r2, [r2, #20]
 8009ae8:	fb03 f202 	mul.w	r2, r3, r2
 8009aec:	68bb      	ldr	r3, [r7, #8]
 8009aee:	61da      	str	r2, [r3, #28]
 8009af0:	e001      	b.n	8009af6 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8009af2:	2301      	movs	r3, #1
 8009af4:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8009af6:	68bb      	ldr	r3, [r7, #8]
 8009af8:	78db      	ldrb	r3, [r3, #3]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d00a      	beq.n	8009b14 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009afe:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009b00:	68ba      	ldr	r2, [r7, #8]
 8009b02:	8a92      	ldrh	r2, [r2, #20]
 8009b04:	fb03 f202 	mul.w	r2, r3, r2
 8009b08:	68bb      	ldr	r3, [r7, #8]
 8009b0a:	61da      	str	r2, [r3, #28]
 8009b0c:	e006      	b.n	8009b1c <USB_HC_StartXfer+0x1a4>
 8009b0e:	bf00      	nop
 8009b10:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8009b14:	68bb      	ldr	r3, [r7, #8]
 8009b16:	6a1a      	ldr	r2, [r3, #32]
 8009b18:	68bb      	ldr	r3, [r7, #8]
 8009b1a:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009b1c:	68bb      	ldr	r3, [r7, #8]
 8009b1e:	69db      	ldr	r3, [r3, #28]
 8009b20:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009b24:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009b26:	04d9      	lsls	r1, r3, #19
 8009b28:	4ba3      	ldr	r3, [pc, #652]	@ (8009db8 <USB_HC_StartXfer+0x440>)
 8009b2a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009b2c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8009b2e:	68bb      	ldr	r3, [r7, #8]
 8009b30:	7d9b      	ldrb	r3, [r3, #22]
 8009b32:	075b      	lsls	r3, r3, #29
 8009b34:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009b38:	69f9      	ldr	r1, [r7, #28]
 8009b3a:	0148      	lsls	r0, r1, #5
 8009b3c:	6a39      	ldr	r1, [r7, #32]
 8009b3e:	4401      	add	r1, r0
 8009b40:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009b44:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009b46:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8009b48:	79fb      	ldrb	r3, [r7, #7]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d009      	beq.n	8009b62 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8009b4e:	68bb      	ldr	r3, [r7, #8]
 8009b50:	6999      	ldr	r1, [r3, #24]
 8009b52:	69fb      	ldr	r3, [r7, #28]
 8009b54:	015a      	lsls	r2, r3, #5
 8009b56:	6a3b      	ldr	r3, [r7, #32]
 8009b58:	4413      	add	r3, r2
 8009b5a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009b5e:	460a      	mov	r2, r1
 8009b60:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8009b62:	6a3b      	ldr	r3, [r7, #32]
 8009b64:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009b68:	689b      	ldr	r3, [r3, #8]
 8009b6a:	f003 0301 	and.w	r3, r3, #1
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	bf0c      	ite	eq
 8009b72:	2301      	moveq	r3, #1
 8009b74:	2300      	movne	r3, #0
 8009b76:	b2db      	uxtb	r3, r3
 8009b78:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8009b7a:	69fb      	ldr	r3, [r7, #28]
 8009b7c:	015a      	lsls	r2, r3, #5
 8009b7e:	6a3b      	ldr	r3, [r7, #32]
 8009b80:	4413      	add	r3, r2
 8009b82:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	69fa      	ldr	r2, [r7, #28]
 8009b8a:	0151      	lsls	r1, r2, #5
 8009b8c:	6a3a      	ldr	r2, [r7, #32]
 8009b8e:	440a      	add	r2, r1
 8009b90:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009b94:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009b98:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8009b9a:	69fb      	ldr	r3, [r7, #28]
 8009b9c:	015a      	lsls	r2, r3, #5
 8009b9e:	6a3b      	ldr	r3, [r7, #32]
 8009ba0:	4413      	add	r3, r2
 8009ba2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009ba6:	681a      	ldr	r2, [r3, #0]
 8009ba8:	7e7b      	ldrb	r3, [r7, #25]
 8009baa:	075b      	lsls	r3, r3, #29
 8009bac:	69f9      	ldr	r1, [r7, #28]
 8009bae:	0148      	lsls	r0, r1, #5
 8009bb0:	6a39      	ldr	r1, [r7, #32]
 8009bb2:	4401      	add	r1, r0
 8009bb4:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8009bb8:	4313      	orrs	r3, r2
 8009bba:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8009bbc:	68bb      	ldr	r3, [r7, #8]
 8009bbe:	799b      	ldrb	r3, [r3, #6]
 8009bc0:	2b01      	cmp	r3, #1
 8009bc2:	f040 80c3 	bne.w	8009d4c <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8009bc6:	68bb      	ldr	r3, [r7, #8]
 8009bc8:	7c5b      	ldrb	r3, [r3, #17]
 8009bca:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8009bcc:	68ba      	ldr	r2, [r7, #8]
 8009bce:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8009bd0:	4313      	orrs	r3, r2
 8009bd2:	69fa      	ldr	r2, [r7, #28]
 8009bd4:	0151      	lsls	r1, r2, #5
 8009bd6:	6a3a      	ldr	r2, [r7, #32]
 8009bd8:	440a      	add	r2, r1
 8009bda:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8009bde:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8009be2:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8009be4:	69fb      	ldr	r3, [r7, #28]
 8009be6:	015a      	lsls	r2, r3, #5
 8009be8:	6a3b      	ldr	r3, [r7, #32]
 8009bea:	4413      	add	r3, r2
 8009bec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009bf0:	68db      	ldr	r3, [r3, #12]
 8009bf2:	69fa      	ldr	r2, [r7, #28]
 8009bf4:	0151      	lsls	r1, r2, #5
 8009bf6:	6a3a      	ldr	r2, [r7, #32]
 8009bf8:	440a      	add	r2, r1
 8009bfa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009bfe:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8009c02:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8009c04:	68bb      	ldr	r3, [r7, #8]
 8009c06:	79db      	ldrb	r3, [r3, #7]
 8009c08:	2b01      	cmp	r3, #1
 8009c0a:	d123      	bne.n	8009c54 <USB_HC_StartXfer+0x2dc>
 8009c0c:	68bb      	ldr	r3, [r7, #8]
 8009c0e:	78db      	ldrb	r3, [r3, #3]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d11f      	bne.n	8009c54 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8009c14:	69fb      	ldr	r3, [r7, #28]
 8009c16:	015a      	lsls	r2, r3, #5
 8009c18:	6a3b      	ldr	r3, [r7, #32]
 8009c1a:	4413      	add	r3, r2
 8009c1c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009c20:	685b      	ldr	r3, [r3, #4]
 8009c22:	69fa      	ldr	r2, [r7, #28]
 8009c24:	0151      	lsls	r1, r2, #5
 8009c26:	6a3a      	ldr	r2, [r7, #32]
 8009c28:	440a      	add	r2, r1
 8009c2a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009c2e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009c32:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8009c34:	69fb      	ldr	r3, [r7, #28]
 8009c36:	015a      	lsls	r2, r3, #5
 8009c38:	6a3b      	ldr	r3, [r7, #32]
 8009c3a:	4413      	add	r3, r2
 8009c3c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009c40:	68db      	ldr	r3, [r3, #12]
 8009c42:	69fa      	ldr	r2, [r7, #28]
 8009c44:	0151      	lsls	r1, r2, #5
 8009c46:	6a3a      	ldr	r2, [r7, #32]
 8009c48:	440a      	add	r2, r1
 8009c4a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009c4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009c52:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8009c54:	68bb      	ldr	r3, [r7, #8]
 8009c56:	7c9b      	ldrb	r3, [r3, #18]
 8009c58:	2b01      	cmp	r3, #1
 8009c5a:	d003      	beq.n	8009c64 <USB_HC_StartXfer+0x2ec>
 8009c5c:	68bb      	ldr	r3, [r7, #8]
 8009c5e:	7c9b      	ldrb	r3, [r3, #18]
 8009c60:	2b03      	cmp	r3, #3
 8009c62:	d117      	bne.n	8009c94 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8009c64:	68bb      	ldr	r3, [r7, #8]
 8009c66:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8009c68:	2b01      	cmp	r3, #1
 8009c6a:	d113      	bne.n	8009c94 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8009c6c:	68bb      	ldr	r3, [r7, #8]
 8009c6e:	78db      	ldrb	r3, [r3, #3]
 8009c70:	2b01      	cmp	r3, #1
 8009c72:	d10f      	bne.n	8009c94 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8009c74:	69fb      	ldr	r3, [r7, #28]
 8009c76:	015a      	lsls	r2, r3, #5
 8009c78:	6a3b      	ldr	r3, [r7, #32]
 8009c7a:	4413      	add	r3, r2
 8009c7c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009c80:	685b      	ldr	r3, [r3, #4]
 8009c82:	69fa      	ldr	r2, [r7, #28]
 8009c84:	0151      	lsls	r1, r2, #5
 8009c86:	6a3a      	ldr	r2, [r7, #32]
 8009c88:	440a      	add	r2, r1
 8009c8a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009c8e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009c92:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8009c94:	68bb      	ldr	r3, [r7, #8]
 8009c96:	7c9b      	ldrb	r3, [r3, #18]
 8009c98:	2b01      	cmp	r3, #1
 8009c9a:	d162      	bne.n	8009d62 <USB_HC_StartXfer+0x3ea>
 8009c9c:	68bb      	ldr	r3, [r7, #8]
 8009c9e:	78db      	ldrb	r3, [r3, #3]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d15e      	bne.n	8009d62 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8009ca4:	68bb      	ldr	r3, [r7, #8]
 8009ca6:	68db      	ldr	r3, [r3, #12]
 8009ca8:	3b01      	subs	r3, #1
 8009caa:	2b03      	cmp	r3, #3
 8009cac:	d858      	bhi.n	8009d60 <USB_HC_StartXfer+0x3e8>
 8009cae:	a201      	add	r2, pc, #4	@ (adr r2, 8009cb4 <USB_HC_StartXfer+0x33c>)
 8009cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cb4:	08009cc5 	.word	0x08009cc5
 8009cb8:	08009ce7 	.word	0x08009ce7
 8009cbc:	08009d09 	.word	0x08009d09
 8009cc0:	08009d2b 	.word	0x08009d2b
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8009cc4:	69fb      	ldr	r3, [r7, #28]
 8009cc6:	015a      	lsls	r2, r3, #5
 8009cc8:	6a3b      	ldr	r3, [r7, #32]
 8009cca:	4413      	add	r3, r2
 8009ccc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009cd0:	685b      	ldr	r3, [r3, #4]
 8009cd2:	69fa      	ldr	r2, [r7, #28]
 8009cd4:	0151      	lsls	r1, r2, #5
 8009cd6:	6a3a      	ldr	r2, [r7, #32]
 8009cd8:	440a      	add	r2, r1
 8009cda:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009cde:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009ce2:	6053      	str	r3, [r2, #4]
          break;
 8009ce4:	e03d      	b.n	8009d62 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8009ce6:	69fb      	ldr	r3, [r7, #28]
 8009ce8:	015a      	lsls	r2, r3, #5
 8009cea:	6a3b      	ldr	r3, [r7, #32]
 8009cec:	4413      	add	r3, r2
 8009cee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009cf2:	685b      	ldr	r3, [r3, #4]
 8009cf4:	69fa      	ldr	r2, [r7, #28]
 8009cf6:	0151      	lsls	r1, r2, #5
 8009cf8:	6a3a      	ldr	r2, [r7, #32]
 8009cfa:	440a      	add	r2, r1
 8009cfc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009d00:	f043 030e 	orr.w	r3, r3, #14
 8009d04:	6053      	str	r3, [r2, #4]
          break;
 8009d06:	e02c      	b.n	8009d62 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8009d08:	69fb      	ldr	r3, [r7, #28]
 8009d0a:	015a      	lsls	r2, r3, #5
 8009d0c:	6a3b      	ldr	r3, [r7, #32]
 8009d0e:	4413      	add	r3, r2
 8009d10:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009d14:	685b      	ldr	r3, [r3, #4]
 8009d16:	69fa      	ldr	r2, [r7, #28]
 8009d18:	0151      	lsls	r1, r2, #5
 8009d1a:	6a3a      	ldr	r2, [r7, #32]
 8009d1c:	440a      	add	r2, r1
 8009d1e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009d22:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009d26:	6053      	str	r3, [r2, #4]
          break;
 8009d28:	e01b      	b.n	8009d62 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8009d2a:	69fb      	ldr	r3, [r7, #28]
 8009d2c:	015a      	lsls	r2, r3, #5
 8009d2e:	6a3b      	ldr	r3, [r7, #32]
 8009d30:	4413      	add	r3, r2
 8009d32:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009d36:	685b      	ldr	r3, [r3, #4]
 8009d38:	69fa      	ldr	r2, [r7, #28]
 8009d3a:	0151      	lsls	r1, r2, #5
 8009d3c:	6a3a      	ldr	r2, [r7, #32]
 8009d3e:	440a      	add	r2, r1
 8009d40:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009d44:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009d48:	6053      	str	r3, [r2, #4]
          break;
 8009d4a:	e00a      	b.n	8009d62 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8009d4c:	69fb      	ldr	r3, [r7, #28]
 8009d4e:	015a      	lsls	r2, r3, #5
 8009d50:	6a3b      	ldr	r3, [r7, #32]
 8009d52:	4413      	add	r3, r2
 8009d54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009d58:	461a      	mov	r2, r3
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	6053      	str	r3, [r2, #4]
 8009d5e:	e000      	b.n	8009d62 <USB_HC_StartXfer+0x3ea>
          break;
 8009d60:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8009d62:	69fb      	ldr	r3, [r7, #28]
 8009d64:	015a      	lsls	r2, r3, #5
 8009d66:	6a3b      	ldr	r3, [r7, #32]
 8009d68:	4413      	add	r3, r2
 8009d6a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009d72:	693b      	ldr	r3, [r7, #16]
 8009d74:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009d78:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8009d7a:	68bb      	ldr	r3, [r7, #8]
 8009d7c:	78db      	ldrb	r3, [r3, #3]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d004      	beq.n	8009d8c <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8009d82:	693b      	ldr	r3, [r7, #16]
 8009d84:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009d88:	613b      	str	r3, [r7, #16]
 8009d8a:	e003      	b.n	8009d94 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8009d8c:	693b      	ldr	r3, [r7, #16]
 8009d8e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009d92:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009d94:	693b      	ldr	r3, [r7, #16]
 8009d96:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009d9a:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8009d9c:	69fb      	ldr	r3, [r7, #28]
 8009d9e:	015a      	lsls	r2, r3, #5
 8009da0:	6a3b      	ldr	r3, [r7, #32]
 8009da2:	4413      	add	r3, r2
 8009da4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009da8:	461a      	mov	r2, r3
 8009daa:	693b      	ldr	r3, [r7, #16]
 8009dac:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8009dae:	79fb      	ldrb	r3, [r7, #7]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d003      	beq.n	8009dbc <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8009db4:	2300      	movs	r3, #0
 8009db6:	e055      	b.n	8009e64 <USB_HC_StartXfer+0x4ec>
 8009db8:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8009dbc:	68bb      	ldr	r3, [r7, #8]
 8009dbe:	78db      	ldrb	r3, [r3, #3]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d14e      	bne.n	8009e62 <USB_HC_StartXfer+0x4ea>
 8009dc4:	68bb      	ldr	r3, [r7, #8]
 8009dc6:	6a1b      	ldr	r3, [r3, #32]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d04a      	beq.n	8009e62 <USB_HC_StartXfer+0x4ea>
 8009dcc:	68bb      	ldr	r3, [r7, #8]
 8009dce:	79db      	ldrb	r3, [r3, #7]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d146      	bne.n	8009e62 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8009dd4:	68bb      	ldr	r3, [r7, #8]
 8009dd6:	7c9b      	ldrb	r3, [r3, #18]
 8009dd8:	2b03      	cmp	r3, #3
 8009dda:	d831      	bhi.n	8009e40 <USB_HC_StartXfer+0x4c8>
 8009ddc:	a201      	add	r2, pc, #4	@ (adr r2, 8009de4 <USB_HC_StartXfer+0x46c>)
 8009dde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009de2:	bf00      	nop
 8009de4:	08009df5 	.word	0x08009df5
 8009de8:	08009e19 	.word	0x08009e19
 8009dec:	08009df5 	.word	0x08009df5
 8009df0:	08009e19 	.word	0x08009e19
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009df4:	68bb      	ldr	r3, [r7, #8]
 8009df6:	6a1b      	ldr	r3, [r3, #32]
 8009df8:	3303      	adds	r3, #3
 8009dfa:	089b      	lsrs	r3, r3, #2
 8009dfc:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8009dfe:	8afa      	ldrh	r2, [r7, #22]
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e04:	b29b      	uxth	r3, r3
 8009e06:	429a      	cmp	r2, r3
 8009e08:	d91c      	bls.n	8009e44 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	699b      	ldr	r3, [r3, #24]
 8009e0e:	f043 0220 	orr.w	r2, r3, #32
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	619a      	str	r2, [r3, #24]
        }
        break;
 8009e16:	e015      	b.n	8009e44 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009e18:	68bb      	ldr	r3, [r7, #8]
 8009e1a:	6a1b      	ldr	r3, [r3, #32]
 8009e1c:	3303      	adds	r3, #3
 8009e1e:	089b      	lsrs	r3, r3, #2
 8009e20:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8009e22:	8afa      	ldrh	r2, [r7, #22]
 8009e24:	6a3b      	ldr	r3, [r7, #32]
 8009e26:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009e2a:	691b      	ldr	r3, [r3, #16]
 8009e2c:	b29b      	uxth	r3, r3
 8009e2e:	429a      	cmp	r2, r3
 8009e30:	d90a      	bls.n	8009e48 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	699b      	ldr	r3, [r3, #24]
 8009e36:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	619a      	str	r2, [r3, #24]
        }
        break;
 8009e3e:	e003      	b.n	8009e48 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8009e40:	bf00      	nop
 8009e42:	e002      	b.n	8009e4a <USB_HC_StartXfer+0x4d2>
        break;
 8009e44:	bf00      	nop
 8009e46:	e000      	b.n	8009e4a <USB_HC_StartXfer+0x4d2>
        break;
 8009e48:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8009e4a:	68bb      	ldr	r3, [r7, #8]
 8009e4c:	6999      	ldr	r1, [r3, #24]
 8009e4e:	68bb      	ldr	r3, [r7, #8]
 8009e50:	785a      	ldrb	r2, [r3, #1]
 8009e52:	68bb      	ldr	r3, [r7, #8]
 8009e54:	6a1b      	ldr	r3, [r3, #32]
 8009e56:	b29b      	uxth	r3, r3
 8009e58:	2000      	movs	r0, #0
 8009e5a:	9000      	str	r0, [sp, #0]
 8009e5c:	68f8      	ldr	r0, [r7, #12]
 8009e5e:	f7ff f9c9 	bl	80091f4 <USB_WritePacket>
  }

  return HAL_OK;
 8009e62:	2300      	movs	r3, #0
}
 8009e64:	4618      	mov	r0, r3
 8009e66:	3728      	adds	r7, #40	@ 0x28
 8009e68:	46bd      	mov	sp, r7
 8009e6a:	bd80      	pop	{r7, pc}

08009e6c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8009e6c:	b480      	push	{r7}
 8009e6e:	b085      	sub	sp, #20
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009e7e:	695b      	ldr	r3, [r3, #20]
 8009e80:	b29b      	uxth	r3, r3
}
 8009e82:	4618      	mov	r0, r3
 8009e84:	3714      	adds	r7, #20
 8009e86:	46bd      	mov	sp, r7
 8009e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8c:	4770      	bx	lr

08009e8e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8009e8e:	b480      	push	{r7}
 8009e90:	b089      	sub	sp, #36	@ 0x24
 8009e92:	af00      	add	r7, sp, #0
 8009e94:	6078      	str	r0, [r7, #4]
 8009e96:	460b      	mov	r3, r1
 8009e98:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8009e9e:	78fb      	ldrb	r3, [r7, #3]
 8009ea0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8009ea6:	69bb      	ldr	r3, [r7, #24]
 8009ea8:	015a      	lsls	r2, r3, #5
 8009eaa:	69fb      	ldr	r3, [r7, #28]
 8009eac:	4413      	add	r3, r2
 8009eae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	0c9b      	lsrs	r3, r3, #18
 8009eb6:	f003 0303 	and.w	r3, r3, #3
 8009eba:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8009ebc:	69bb      	ldr	r3, [r7, #24]
 8009ebe:	015a      	lsls	r2, r3, #5
 8009ec0:	69fb      	ldr	r3, [r7, #28]
 8009ec2:	4413      	add	r3, r2
 8009ec4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	0fdb      	lsrs	r3, r3, #31
 8009ecc:	f003 0301 	and.w	r3, r3, #1
 8009ed0:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8009ed2:	69bb      	ldr	r3, [r7, #24]
 8009ed4:	015a      	lsls	r2, r3, #5
 8009ed6:	69fb      	ldr	r3, [r7, #28]
 8009ed8:	4413      	add	r3, r2
 8009eda:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009ede:	685b      	ldr	r3, [r3, #4]
 8009ee0:	0fdb      	lsrs	r3, r3, #31
 8009ee2:	f003 0301 	and.w	r3, r3, #1
 8009ee6:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	689b      	ldr	r3, [r3, #8]
 8009eec:	f003 0320 	and.w	r3, r3, #32
 8009ef0:	2b20      	cmp	r3, #32
 8009ef2:	d10d      	bne.n	8009f10 <USB_HC_Halt+0x82>
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d10a      	bne.n	8009f10 <USB_HC_Halt+0x82>
 8009efa:	693b      	ldr	r3, [r7, #16]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d005      	beq.n	8009f0c <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8009f00:	697b      	ldr	r3, [r7, #20]
 8009f02:	2b01      	cmp	r3, #1
 8009f04:	d002      	beq.n	8009f0c <USB_HC_Halt+0x7e>
 8009f06:	697b      	ldr	r3, [r7, #20]
 8009f08:	2b03      	cmp	r3, #3
 8009f0a:	d101      	bne.n	8009f10 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	e0d8      	b.n	800a0c2 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8009f10:	697b      	ldr	r3, [r7, #20]
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d002      	beq.n	8009f1c <USB_HC_Halt+0x8e>
 8009f16:	697b      	ldr	r3, [r7, #20]
 8009f18:	2b02      	cmp	r3, #2
 8009f1a:	d173      	bne.n	800a004 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009f1c:	69bb      	ldr	r3, [r7, #24]
 8009f1e:	015a      	lsls	r2, r3, #5
 8009f20:	69fb      	ldr	r3, [r7, #28]
 8009f22:	4413      	add	r3, r2
 8009f24:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	69ba      	ldr	r2, [r7, #24]
 8009f2c:	0151      	lsls	r1, r2, #5
 8009f2e:	69fa      	ldr	r2, [r7, #28]
 8009f30:	440a      	add	r2, r1
 8009f32:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009f36:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009f3a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	689b      	ldr	r3, [r3, #8]
 8009f40:	f003 0320 	and.w	r3, r3, #32
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d14a      	bne.n	8009fde <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f4c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d133      	bne.n	8009fbc <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009f54:	69bb      	ldr	r3, [r7, #24]
 8009f56:	015a      	lsls	r2, r3, #5
 8009f58:	69fb      	ldr	r3, [r7, #28]
 8009f5a:	4413      	add	r3, r2
 8009f5c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	69ba      	ldr	r2, [r7, #24]
 8009f64:	0151      	lsls	r1, r2, #5
 8009f66:	69fa      	ldr	r2, [r7, #28]
 8009f68:	440a      	add	r2, r1
 8009f6a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009f6e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009f72:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009f74:	69bb      	ldr	r3, [r7, #24]
 8009f76:	015a      	lsls	r2, r3, #5
 8009f78:	69fb      	ldr	r3, [r7, #28]
 8009f7a:	4413      	add	r3, r2
 8009f7c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	69ba      	ldr	r2, [r7, #24]
 8009f84:	0151      	lsls	r1, r2, #5
 8009f86:	69fa      	ldr	r2, [r7, #28]
 8009f88:	440a      	add	r2, r1
 8009f8a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009f8e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009f92:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8009f94:	68bb      	ldr	r3, [r7, #8]
 8009f96:	3301      	adds	r3, #1
 8009f98:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8009f9a:	68bb      	ldr	r3, [r7, #8]
 8009f9c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009fa0:	d82e      	bhi.n	800a000 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009fa2:	69bb      	ldr	r3, [r7, #24]
 8009fa4:	015a      	lsls	r2, r3, #5
 8009fa6:	69fb      	ldr	r3, [r7, #28]
 8009fa8:	4413      	add	r3, r2
 8009faa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009fb4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009fb8:	d0ec      	beq.n	8009f94 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009fba:	e081      	b.n	800a0c0 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009fbc:	69bb      	ldr	r3, [r7, #24]
 8009fbe:	015a      	lsls	r2, r3, #5
 8009fc0:	69fb      	ldr	r3, [r7, #28]
 8009fc2:	4413      	add	r3, r2
 8009fc4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	69ba      	ldr	r2, [r7, #24]
 8009fcc:	0151      	lsls	r1, r2, #5
 8009fce:	69fa      	ldr	r2, [r7, #28]
 8009fd0:	440a      	add	r2, r1
 8009fd2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009fd6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009fda:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009fdc:	e070      	b.n	800a0c0 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009fde:	69bb      	ldr	r3, [r7, #24]
 8009fe0:	015a      	lsls	r2, r3, #5
 8009fe2:	69fb      	ldr	r3, [r7, #28]
 8009fe4:	4413      	add	r3, r2
 8009fe6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	69ba      	ldr	r2, [r7, #24]
 8009fee:	0151      	lsls	r1, r2, #5
 8009ff0:	69fa      	ldr	r2, [r7, #28]
 8009ff2:	440a      	add	r2, r1
 8009ff4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009ff8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009ffc:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009ffe:	e05f      	b.n	800a0c0 <USB_HC_Halt+0x232>
            break;
 800a000:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a002:	e05d      	b.n	800a0c0 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800a004:	69bb      	ldr	r3, [r7, #24]
 800a006:	015a      	lsls	r2, r3, #5
 800a008:	69fb      	ldr	r3, [r7, #28]
 800a00a:	4413      	add	r3, r2
 800a00c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	69ba      	ldr	r2, [r7, #24]
 800a014:	0151      	lsls	r1, r2, #5
 800a016:	69fa      	ldr	r2, [r7, #28]
 800a018:	440a      	add	r2, r1
 800a01a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a01e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a022:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800a024:	69fb      	ldr	r3, [r7, #28]
 800a026:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a02a:	691b      	ldr	r3, [r3, #16]
 800a02c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a030:	2b00      	cmp	r3, #0
 800a032:	d133      	bne.n	800a09c <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800a034:	69bb      	ldr	r3, [r7, #24]
 800a036:	015a      	lsls	r2, r3, #5
 800a038:	69fb      	ldr	r3, [r7, #28]
 800a03a:	4413      	add	r3, r2
 800a03c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	69ba      	ldr	r2, [r7, #24]
 800a044:	0151      	lsls	r1, r2, #5
 800a046:	69fa      	ldr	r2, [r7, #28]
 800a048:	440a      	add	r2, r1
 800a04a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a04e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a052:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a054:	69bb      	ldr	r3, [r7, #24]
 800a056:	015a      	lsls	r2, r3, #5
 800a058:	69fb      	ldr	r3, [r7, #28]
 800a05a:	4413      	add	r3, r2
 800a05c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	69ba      	ldr	r2, [r7, #24]
 800a064:	0151      	lsls	r1, r2, #5
 800a066:	69fa      	ldr	r2, [r7, #28]
 800a068:	440a      	add	r2, r1
 800a06a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a06e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a072:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800a074:	68bb      	ldr	r3, [r7, #8]
 800a076:	3301      	adds	r3, #1
 800a078:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800a07a:	68bb      	ldr	r3, [r7, #8]
 800a07c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a080:	d81d      	bhi.n	800a0be <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a082:	69bb      	ldr	r3, [r7, #24]
 800a084:	015a      	lsls	r2, r3, #5
 800a086:	69fb      	ldr	r3, [r7, #28]
 800a088:	4413      	add	r3, r2
 800a08a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a094:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a098:	d0ec      	beq.n	800a074 <USB_HC_Halt+0x1e6>
 800a09a:	e011      	b.n	800a0c0 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a09c:	69bb      	ldr	r3, [r7, #24]
 800a09e:	015a      	lsls	r2, r3, #5
 800a0a0:	69fb      	ldr	r3, [r7, #28]
 800a0a2:	4413      	add	r3, r2
 800a0a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	69ba      	ldr	r2, [r7, #24]
 800a0ac:	0151      	lsls	r1, r2, #5
 800a0ae:	69fa      	ldr	r2, [r7, #28]
 800a0b0:	440a      	add	r2, r1
 800a0b2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a0b6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a0ba:	6013      	str	r3, [r2, #0]
 800a0bc:	e000      	b.n	800a0c0 <USB_HC_Halt+0x232>
          break;
 800a0be:	bf00      	nop
    }
  }

  return HAL_OK;
 800a0c0:	2300      	movs	r3, #0
}
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	3724      	adds	r7, #36	@ 0x24
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0cc:	4770      	bx	lr
	...

0800a0d0 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800a0d0:	b480      	push	{r7}
 800a0d2:	b087      	sub	sp, #28
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	6078      	str	r0, [r7, #4]
 800a0d8:	460b      	mov	r3, r1
 800a0da:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800a0e0:	78fb      	ldrb	r3, [r7, #3]
 800a0e2:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800a0e4:	2301      	movs	r3, #1
 800a0e6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	04da      	lsls	r2, r3, #19
 800a0ec:	4b15      	ldr	r3, [pc, #84]	@ (800a144 <USB_DoPing+0x74>)
 800a0ee:	4013      	ands	r3, r2
 800a0f0:	693a      	ldr	r2, [r7, #16]
 800a0f2:	0151      	lsls	r1, r2, #5
 800a0f4:	697a      	ldr	r2, [r7, #20]
 800a0f6:	440a      	add	r2, r1
 800a0f8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a0fc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a100:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800a102:	693b      	ldr	r3, [r7, #16]
 800a104:	015a      	lsls	r2, r3, #5
 800a106:	697b      	ldr	r3, [r7, #20]
 800a108:	4413      	add	r3, r2
 800a10a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a112:	68bb      	ldr	r3, [r7, #8]
 800a114:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a118:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a11a:	68bb      	ldr	r3, [r7, #8]
 800a11c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a120:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800a122:	693b      	ldr	r3, [r7, #16]
 800a124:	015a      	lsls	r2, r3, #5
 800a126:	697b      	ldr	r3, [r7, #20]
 800a128:	4413      	add	r3, r2
 800a12a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a12e:	461a      	mov	r2, r3
 800a130:	68bb      	ldr	r3, [r7, #8]
 800a132:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800a134:	2300      	movs	r3, #0
}
 800a136:	4618      	mov	r0, r3
 800a138:	371c      	adds	r7, #28
 800a13a:	46bd      	mov	sp, r7
 800a13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a140:	4770      	bx	lr
 800a142:	bf00      	nop
 800a144:	1ff80000 	.word	0x1ff80000

0800a148 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800a148:	b580      	push	{r7, lr}
 800a14a:	b088      	sub	sp, #32
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800a150:	2300      	movs	r3, #0
 800a152:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800a158:	2300      	movs	r3, #0
 800a15a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800a15c:	6878      	ldr	r0, [r7, #4]
 800a15e:	f7fe ff8c 	bl	800907a <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a162:	2110      	movs	r1, #16
 800a164:	6878      	ldr	r0, [r7, #4]
 800a166:	f7fe ffe5 	bl	8009134 <USB_FlushTxFifo>
 800a16a:	4603      	mov	r3, r0
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d001      	beq.n	800a174 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800a170:	2301      	movs	r3, #1
 800a172:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a174:	6878      	ldr	r0, [r7, #4]
 800a176:	f7ff f80f 	bl	8009198 <USB_FlushRxFifo>
 800a17a:	4603      	mov	r3, r0
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d001      	beq.n	800a184 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800a180:	2301      	movs	r3, #1
 800a182:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800a184:	2300      	movs	r3, #0
 800a186:	61bb      	str	r3, [r7, #24]
 800a188:	e01f      	b.n	800a1ca <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800a18a:	69bb      	ldr	r3, [r7, #24]
 800a18c:	015a      	lsls	r2, r3, #5
 800a18e:	697b      	ldr	r3, [r7, #20]
 800a190:	4413      	add	r3, r2
 800a192:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800a19a:	693b      	ldr	r3, [r7, #16]
 800a19c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a1a0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800a1a2:	693b      	ldr	r3, [r7, #16]
 800a1a4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a1a8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800a1aa:	693b      	ldr	r3, [r7, #16]
 800a1ac:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a1b0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800a1b2:	69bb      	ldr	r3, [r7, #24]
 800a1b4:	015a      	lsls	r2, r3, #5
 800a1b6:	697b      	ldr	r3, [r7, #20]
 800a1b8:	4413      	add	r3, r2
 800a1ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a1be:	461a      	mov	r2, r3
 800a1c0:	693b      	ldr	r3, [r7, #16]
 800a1c2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800a1c4:	69bb      	ldr	r3, [r7, #24]
 800a1c6:	3301      	adds	r3, #1
 800a1c8:	61bb      	str	r3, [r7, #24]
 800a1ca:	69bb      	ldr	r3, [r7, #24]
 800a1cc:	2b0f      	cmp	r3, #15
 800a1ce:	d9dc      	bls.n	800a18a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800a1d0:	2300      	movs	r3, #0
 800a1d2:	61bb      	str	r3, [r7, #24]
 800a1d4:	e034      	b.n	800a240 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800a1d6:	69bb      	ldr	r3, [r7, #24]
 800a1d8:	015a      	lsls	r2, r3, #5
 800a1da:	697b      	ldr	r3, [r7, #20]
 800a1dc:	4413      	add	r3, r2
 800a1de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800a1e6:	693b      	ldr	r3, [r7, #16]
 800a1e8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a1ec:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800a1ee:	693b      	ldr	r3, [r7, #16]
 800a1f0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a1f4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800a1f6:	693b      	ldr	r3, [r7, #16]
 800a1f8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a1fc:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800a1fe:	69bb      	ldr	r3, [r7, #24]
 800a200:	015a      	lsls	r2, r3, #5
 800a202:	697b      	ldr	r3, [r7, #20]
 800a204:	4413      	add	r3, r2
 800a206:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a20a:	461a      	mov	r2, r3
 800a20c:	693b      	ldr	r3, [r7, #16]
 800a20e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	3301      	adds	r3, #1
 800a214:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a21c:	d80c      	bhi.n	800a238 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a21e:	69bb      	ldr	r3, [r7, #24]
 800a220:	015a      	lsls	r2, r3, #5
 800a222:	697b      	ldr	r3, [r7, #20]
 800a224:	4413      	add	r3, r2
 800a226:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a230:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a234:	d0ec      	beq.n	800a210 <USB_StopHost+0xc8>
 800a236:	e000      	b.n	800a23a <USB_StopHost+0xf2>
        break;
 800a238:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800a23a:	69bb      	ldr	r3, [r7, #24]
 800a23c:	3301      	adds	r3, #1
 800a23e:	61bb      	str	r3, [r7, #24]
 800a240:	69bb      	ldr	r3, [r7, #24]
 800a242:	2b0f      	cmp	r3, #15
 800a244:	d9c7      	bls.n	800a1d6 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800a246:	697b      	ldr	r3, [r7, #20]
 800a248:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a24c:	461a      	mov	r2, r3
 800a24e:	f04f 33ff 	mov.w	r3, #4294967295
 800a252:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	f04f 32ff 	mov.w	r2, #4294967295
 800a25a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800a25c:	6878      	ldr	r0, [r7, #4]
 800a25e:	f7fe fefb 	bl	8009058 <USB_EnableGlobalInt>

  return ret;
 800a262:	7ffb      	ldrb	r3, [r7, #31]
}
 800a264:	4618      	mov	r0, r3
 800a266:	3720      	adds	r7, #32
 800a268:	46bd      	mov	sp, r7
 800a26a:	bd80      	pop	{r7, pc}

0800a26c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800a26c:	b590      	push	{r4, r7, lr}
 800a26e:	b089      	sub	sp, #36	@ 0x24
 800a270:	af04      	add	r7, sp, #16
 800a272:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800a274:	2301      	movs	r3, #1
 800a276:	2202      	movs	r2, #2
 800a278:	2102      	movs	r1, #2
 800a27a:	6878      	ldr	r0, [r7, #4]
 800a27c:	f000 fc85 	bl	800ab8a <USBH_FindInterface>
 800a280:	4603      	mov	r3, r0
 800a282:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800a284:	7bfb      	ldrb	r3, [r7, #15]
 800a286:	2bff      	cmp	r3, #255	@ 0xff
 800a288:	d002      	beq.n	800a290 <USBH_CDC_InterfaceInit+0x24>
 800a28a:	7bfb      	ldrb	r3, [r7, #15]
 800a28c:	2b01      	cmp	r3, #1
 800a28e:	d901      	bls.n	800a294 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800a290:	2302      	movs	r3, #2
 800a292:	e13d      	b.n	800a510 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800a294:	7bfb      	ldrb	r3, [r7, #15]
 800a296:	4619      	mov	r1, r3
 800a298:	6878      	ldr	r0, [r7, #4]
 800a29a:	f000 fc5a 	bl	800ab52 <USBH_SelectInterface>
 800a29e:	4603      	mov	r3, r0
 800a2a0:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800a2a2:	7bbb      	ldrb	r3, [r7, #14]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d001      	beq.n	800a2ac <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800a2a8:	2302      	movs	r3, #2
 800a2aa:	e131      	b.n	800a510 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 800a2b2:	2050      	movs	r0, #80	@ 0x50
 800a2b4:	f002 fb68 	bl	800c988 <malloc>
 800a2b8:	4603      	mov	r3, r0
 800a2ba:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a2c2:	69db      	ldr	r3, [r3, #28]
 800a2c4:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800a2c6:	68bb      	ldr	r3, [r7, #8]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d101      	bne.n	800a2d0 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800a2cc:	2302      	movs	r3, #2
 800a2ce:	e11f      	b.n	800a510 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800a2d0:	2250      	movs	r2, #80	@ 0x50
 800a2d2:	2100      	movs	r1, #0
 800a2d4:	68b8      	ldr	r0, [r7, #8]
 800a2d6:	f002 fc99 	bl	800cc0c <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800a2da:	7bfb      	ldrb	r3, [r7, #15]
 800a2dc:	687a      	ldr	r2, [r7, #4]
 800a2de:	211a      	movs	r1, #26
 800a2e0:	fb01 f303 	mul.w	r3, r1, r3
 800a2e4:	4413      	add	r3, r2
 800a2e6:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800a2ea:	781b      	ldrb	r3, [r3, #0]
 800a2ec:	b25b      	sxtb	r3, r3
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	da15      	bge.n	800a31e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800a2f2:	7bfb      	ldrb	r3, [r7, #15]
 800a2f4:	687a      	ldr	r2, [r7, #4]
 800a2f6:	211a      	movs	r1, #26
 800a2f8:	fb01 f303 	mul.w	r3, r1, r3
 800a2fc:	4413      	add	r3, r2
 800a2fe:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800a302:	781a      	ldrb	r2, [r3, #0]
 800a304:	68bb      	ldr	r3, [r7, #8]
 800a306:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a308:	7bfb      	ldrb	r3, [r7, #15]
 800a30a:	687a      	ldr	r2, [r7, #4]
 800a30c:	211a      	movs	r1, #26
 800a30e:	fb01 f303 	mul.w	r3, r1, r3
 800a312:	4413      	add	r3, r2
 800a314:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800a318:	881a      	ldrh	r2, [r3, #0]
 800a31a:	68bb      	ldr	r3, [r7, #8]
 800a31c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800a31e:	68bb      	ldr	r3, [r7, #8]
 800a320:	785b      	ldrb	r3, [r3, #1]
 800a322:	4619      	mov	r1, r3
 800a324:	6878      	ldr	r0, [r7, #4]
 800a326:	f001 ffbe 	bl	800c2a6 <USBH_AllocPipe>
 800a32a:	4603      	mov	r3, r0
 800a32c:	461a      	mov	r2, r3
 800a32e:	68bb      	ldr	r3, [r7, #8]
 800a330:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800a332:	68bb      	ldr	r3, [r7, #8]
 800a334:	7819      	ldrb	r1, [r3, #0]
 800a336:	68bb      	ldr	r3, [r7, #8]
 800a338:	7858      	ldrb	r0, [r3, #1]
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a346:	68ba      	ldr	r2, [r7, #8]
 800a348:	8952      	ldrh	r2, [r2, #10]
 800a34a:	9202      	str	r2, [sp, #8]
 800a34c:	2203      	movs	r2, #3
 800a34e:	9201      	str	r2, [sp, #4]
 800a350:	9300      	str	r3, [sp, #0]
 800a352:	4623      	mov	r3, r4
 800a354:	4602      	mov	r2, r0
 800a356:	6878      	ldr	r0, [r7, #4]
 800a358:	f001 ff76 	bl	800c248 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800a35c:	68bb      	ldr	r3, [r7, #8]
 800a35e:	781b      	ldrb	r3, [r3, #0]
 800a360:	2200      	movs	r2, #0
 800a362:	4619      	mov	r1, r3
 800a364:	6878      	ldr	r0, [r7, #4]
 800a366:	f002 fa85 	bl	800c874 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800a36a:	2300      	movs	r3, #0
 800a36c:	2200      	movs	r2, #0
 800a36e:	210a      	movs	r1, #10
 800a370:	6878      	ldr	r0, [r7, #4]
 800a372:	f000 fc0a 	bl	800ab8a <USBH_FindInterface>
 800a376:	4603      	mov	r3, r0
 800a378:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800a37a:	7bfb      	ldrb	r3, [r7, #15]
 800a37c:	2bff      	cmp	r3, #255	@ 0xff
 800a37e:	d002      	beq.n	800a386 <USBH_CDC_InterfaceInit+0x11a>
 800a380:	7bfb      	ldrb	r3, [r7, #15]
 800a382:	2b01      	cmp	r3, #1
 800a384:	d901      	bls.n	800a38a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800a386:	2302      	movs	r3, #2
 800a388:	e0c2      	b.n	800a510 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800a38a:	7bfb      	ldrb	r3, [r7, #15]
 800a38c:	687a      	ldr	r2, [r7, #4]
 800a38e:	211a      	movs	r1, #26
 800a390:	fb01 f303 	mul.w	r3, r1, r3
 800a394:	4413      	add	r3, r2
 800a396:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800a39a:	781b      	ldrb	r3, [r3, #0]
 800a39c:	b25b      	sxtb	r3, r3
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	da16      	bge.n	800a3d0 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800a3a2:	7bfb      	ldrb	r3, [r7, #15]
 800a3a4:	687a      	ldr	r2, [r7, #4]
 800a3a6:	211a      	movs	r1, #26
 800a3a8:	fb01 f303 	mul.w	r3, r1, r3
 800a3ac:	4413      	add	r3, r2
 800a3ae:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800a3b2:	781a      	ldrb	r2, [r3, #0]
 800a3b4:	68bb      	ldr	r3, [r7, #8]
 800a3b6:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a3b8:	7bfb      	ldrb	r3, [r7, #15]
 800a3ba:	687a      	ldr	r2, [r7, #4]
 800a3bc:	211a      	movs	r1, #26
 800a3be:	fb01 f303 	mul.w	r3, r1, r3
 800a3c2:	4413      	add	r3, r2
 800a3c4:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800a3c8:	881a      	ldrh	r2, [r3, #0]
 800a3ca:	68bb      	ldr	r3, [r7, #8]
 800a3cc:	835a      	strh	r2, [r3, #26]
 800a3ce:	e015      	b.n	800a3fc <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800a3d0:	7bfb      	ldrb	r3, [r7, #15]
 800a3d2:	687a      	ldr	r2, [r7, #4]
 800a3d4:	211a      	movs	r1, #26
 800a3d6:	fb01 f303 	mul.w	r3, r1, r3
 800a3da:	4413      	add	r3, r2
 800a3dc:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800a3e0:	781a      	ldrb	r2, [r3, #0]
 800a3e2:	68bb      	ldr	r3, [r7, #8]
 800a3e4:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a3e6:	7bfb      	ldrb	r3, [r7, #15]
 800a3e8:	687a      	ldr	r2, [r7, #4]
 800a3ea:	211a      	movs	r1, #26
 800a3ec:	fb01 f303 	mul.w	r3, r1, r3
 800a3f0:	4413      	add	r3, r2
 800a3f2:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800a3f6:	881a      	ldrh	r2, [r3, #0]
 800a3f8:	68bb      	ldr	r3, [r7, #8]
 800a3fa:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800a3fc:	7bfb      	ldrb	r3, [r7, #15]
 800a3fe:	687a      	ldr	r2, [r7, #4]
 800a400:	211a      	movs	r1, #26
 800a402:	fb01 f303 	mul.w	r3, r1, r3
 800a406:	4413      	add	r3, r2
 800a408:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800a40c:	781b      	ldrb	r3, [r3, #0]
 800a40e:	b25b      	sxtb	r3, r3
 800a410:	2b00      	cmp	r3, #0
 800a412:	da16      	bge.n	800a442 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800a414:	7bfb      	ldrb	r3, [r7, #15]
 800a416:	687a      	ldr	r2, [r7, #4]
 800a418:	211a      	movs	r1, #26
 800a41a:	fb01 f303 	mul.w	r3, r1, r3
 800a41e:	4413      	add	r3, r2
 800a420:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800a424:	781a      	ldrb	r2, [r3, #0]
 800a426:	68bb      	ldr	r3, [r7, #8]
 800a428:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800a42a:	7bfb      	ldrb	r3, [r7, #15]
 800a42c:	687a      	ldr	r2, [r7, #4]
 800a42e:	211a      	movs	r1, #26
 800a430:	fb01 f303 	mul.w	r3, r1, r3
 800a434:	4413      	add	r3, r2
 800a436:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800a43a:	881a      	ldrh	r2, [r3, #0]
 800a43c:	68bb      	ldr	r3, [r7, #8]
 800a43e:	835a      	strh	r2, [r3, #26]
 800a440:	e015      	b.n	800a46e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800a442:	7bfb      	ldrb	r3, [r7, #15]
 800a444:	687a      	ldr	r2, [r7, #4]
 800a446:	211a      	movs	r1, #26
 800a448:	fb01 f303 	mul.w	r3, r1, r3
 800a44c:	4413      	add	r3, r2
 800a44e:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800a452:	781a      	ldrb	r2, [r3, #0]
 800a454:	68bb      	ldr	r3, [r7, #8]
 800a456:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800a458:	7bfb      	ldrb	r3, [r7, #15]
 800a45a:	687a      	ldr	r2, [r7, #4]
 800a45c:	211a      	movs	r1, #26
 800a45e:	fb01 f303 	mul.w	r3, r1, r3
 800a462:	4413      	add	r3, r2
 800a464:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800a468:	881a      	ldrh	r2, [r3, #0]
 800a46a:	68bb      	ldr	r3, [r7, #8]
 800a46c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800a46e:	68bb      	ldr	r3, [r7, #8]
 800a470:	7b9b      	ldrb	r3, [r3, #14]
 800a472:	4619      	mov	r1, r3
 800a474:	6878      	ldr	r0, [r7, #4]
 800a476:	f001 ff16 	bl	800c2a6 <USBH_AllocPipe>
 800a47a:	4603      	mov	r3, r0
 800a47c:	461a      	mov	r2, r3
 800a47e:	68bb      	ldr	r3, [r7, #8]
 800a480:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800a482:	68bb      	ldr	r3, [r7, #8]
 800a484:	7bdb      	ldrb	r3, [r3, #15]
 800a486:	4619      	mov	r1, r3
 800a488:	6878      	ldr	r0, [r7, #4]
 800a48a:	f001 ff0c 	bl	800c2a6 <USBH_AllocPipe>
 800a48e:	4603      	mov	r3, r0
 800a490:	461a      	mov	r2, r3
 800a492:	68bb      	ldr	r3, [r7, #8]
 800a494:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800a496:	68bb      	ldr	r3, [r7, #8]
 800a498:	7b59      	ldrb	r1, [r3, #13]
 800a49a:	68bb      	ldr	r3, [r7, #8]
 800a49c:	7b98      	ldrb	r0, [r3, #14]
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a4aa:	68ba      	ldr	r2, [r7, #8]
 800a4ac:	8b12      	ldrh	r2, [r2, #24]
 800a4ae:	9202      	str	r2, [sp, #8]
 800a4b0:	2202      	movs	r2, #2
 800a4b2:	9201      	str	r2, [sp, #4]
 800a4b4:	9300      	str	r3, [sp, #0]
 800a4b6:	4623      	mov	r3, r4
 800a4b8:	4602      	mov	r2, r0
 800a4ba:	6878      	ldr	r0, [r7, #4]
 800a4bc:	f001 fec4 	bl	800c248 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800a4c0:	68bb      	ldr	r3, [r7, #8]
 800a4c2:	7b19      	ldrb	r1, [r3, #12]
 800a4c4:	68bb      	ldr	r3, [r7, #8]
 800a4c6:	7bd8      	ldrb	r0, [r3, #15]
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a4d4:	68ba      	ldr	r2, [r7, #8]
 800a4d6:	8b52      	ldrh	r2, [r2, #26]
 800a4d8:	9202      	str	r2, [sp, #8]
 800a4da:	2202      	movs	r2, #2
 800a4dc:	9201      	str	r2, [sp, #4]
 800a4de:	9300      	str	r3, [sp, #0]
 800a4e0:	4623      	mov	r3, r4
 800a4e2:	4602      	mov	r2, r0
 800a4e4:	6878      	ldr	r0, [r7, #4]
 800a4e6:	f001 feaf 	bl	800c248 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800a4ea:	68bb      	ldr	r3, [r7, #8]
 800a4ec:	2200      	movs	r2, #0
 800a4ee:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800a4f2:	68bb      	ldr	r3, [r7, #8]
 800a4f4:	7b5b      	ldrb	r3, [r3, #13]
 800a4f6:	2200      	movs	r2, #0
 800a4f8:	4619      	mov	r1, r3
 800a4fa:	6878      	ldr	r0, [r7, #4]
 800a4fc:	f002 f9ba 	bl	800c874 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800a500:	68bb      	ldr	r3, [r7, #8]
 800a502:	7b1b      	ldrb	r3, [r3, #12]
 800a504:	2200      	movs	r2, #0
 800a506:	4619      	mov	r1, r3
 800a508:	6878      	ldr	r0, [r7, #4]
 800a50a:	f002 f9b3 	bl	800c874 <USBH_LL_SetToggle>

  return USBH_OK;
 800a50e:	2300      	movs	r3, #0
}
 800a510:	4618      	mov	r0, r3
 800a512:	3714      	adds	r7, #20
 800a514:	46bd      	mov	sp, r7
 800a516:	bd90      	pop	{r4, r7, pc}

0800a518 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800a518:	b580      	push	{r7, lr}
 800a51a:	b084      	sub	sp, #16
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a526:	69db      	ldr	r3, [r3, #28]
 800a528:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	781b      	ldrb	r3, [r3, #0]
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d00e      	beq.n	800a550 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	781b      	ldrb	r3, [r3, #0]
 800a536:	4619      	mov	r1, r3
 800a538:	6878      	ldr	r0, [r7, #4]
 800a53a:	f001 fea4 	bl	800c286 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	781b      	ldrb	r3, [r3, #0]
 800a542:	4619      	mov	r1, r3
 800a544:	6878      	ldr	r0, [r7, #4]
 800a546:	f001 fecf 	bl	800c2e8 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	2200      	movs	r2, #0
 800a54e:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	7b1b      	ldrb	r3, [r3, #12]
 800a554:	2b00      	cmp	r3, #0
 800a556:	d00e      	beq.n	800a576 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	7b1b      	ldrb	r3, [r3, #12]
 800a55c:	4619      	mov	r1, r3
 800a55e:	6878      	ldr	r0, [r7, #4]
 800a560:	f001 fe91 	bl	800c286 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	7b1b      	ldrb	r3, [r3, #12]
 800a568:	4619      	mov	r1, r3
 800a56a:	6878      	ldr	r0, [r7, #4]
 800a56c:	f001 febc 	bl	800c2e8 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	2200      	movs	r2, #0
 800a574:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	7b5b      	ldrb	r3, [r3, #13]
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d00e      	beq.n	800a59c <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	7b5b      	ldrb	r3, [r3, #13]
 800a582:	4619      	mov	r1, r3
 800a584:	6878      	ldr	r0, [r7, #4]
 800a586:	f001 fe7e 	bl	800c286 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	7b5b      	ldrb	r3, [r3, #13]
 800a58e:	4619      	mov	r1, r3
 800a590:	6878      	ldr	r0, [r7, #4]
 800a592:	f001 fea9 	bl	800c2e8 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	2200      	movs	r2, #0
 800a59a:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a5a2:	69db      	ldr	r3, [r3, #28]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d00b      	beq.n	800a5c0 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a5ae:	69db      	ldr	r3, [r3, #28]
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	f002 f9f1 	bl	800c998 <free>
    phost->pActiveClass->pData = 0U;
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a5bc:	2200      	movs	r2, #0
 800a5be:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800a5c0:	2300      	movs	r3, #0
}
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	3710      	adds	r7, #16
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	bd80      	pop	{r7, pc}

0800a5ca <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800a5ca:	b580      	push	{r7, lr}
 800a5cc:	b084      	sub	sp, #16
 800a5ce:	af00      	add	r7, sp, #0
 800a5d0:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a5d8:	69db      	ldr	r3, [r3, #28]
 800a5da:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	3340      	adds	r3, #64	@ 0x40
 800a5e0:	4619      	mov	r1, r3
 800a5e2:	6878      	ldr	r0, [r7, #4]
 800a5e4:	f000 f8b1 	bl	800a74a <GetLineCoding>
 800a5e8:	4603      	mov	r3, r0
 800a5ea:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800a5ec:	7afb      	ldrb	r3, [r7, #11]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d105      	bne.n	800a5fe <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a5f8:	2102      	movs	r1, #2
 800a5fa:	6878      	ldr	r0, [r7, #4]
 800a5fc:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800a5fe:	7afb      	ldrb	r3, [r7, #11]
}
 800a600:	4618      	mov	r0, r3
 800a602:	3710      	adds	r7, #16
 800a604:	46bd      	mov	sp, r7
 800a606:	bd80      	pop	{r7, pc}

0800a608 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800a608:	b580      	push	{r7, lr}
 800a60a:	b084      	sub	sp, #16
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800a610:	2301      	movs	r3, #1
 800a612:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800a614:	2300      	movs	r3, #0
 800a616:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a61e:	69db      	ldr	r3, [r3, #28]
 800a620:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800a622:	68bb      	ldr	r3, [r7, #8]
 800a624:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800a628:	2b04      	cmp	r3, #4
 800a62a:	d877      	bhi.n	800a71c <USBH_CDC_Process+0x114>
 800a62c:	a201      	add	r2, pc, #4	@ (adr r2, 800a634 <USBH_CDC_Process+0x2c>)
 800a62e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a632:	bf00      	nop
 800a634:	0800a649 	.word	0x0800a649
 800a638:	0800a64f 	.word	0x0800a64f
 800a63c:	0800a67f 	.word	0x0800a67f
 800a640:	0800a6f3 	.word	0x0800a6f3
 800a644:	0800a701 	.word	0x0800a701
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800a648:	2300      	movs	r3, #0
 800a64a:	73fb      	strb	r3, [r7, #15]
      break;
 800a64c:	e06d      	b.n	800a72a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800a64e:	68bb      	ldr	r3, [r7, #8]
 800a650:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a652:	4619      	mov	r1, r3
 800a654:	6878      	ldr	r0, [r7, #4]
 800a656:	f000 f897 	bl	800a788 <SetLineCoding>
 800a65a:	4603      	mov	r3, r0
 800a65c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800a65e:	7bbb      	ldrb	r3, [r7, #14]
 800a660:	2b00      	cmp	r3, #0
 800a662:	d104      	bne.n	800a66e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800a664:	68bb      	ldr	r3, [r7, #8]
 800a666:	2202      	movs	r2, #2
 800a668:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800a66c:	e058      	b.n	800a720 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800a66e:	7bbb      	ldrb	r3, [r7, #14]
 800a670:	2b01      	cmp	r3, #1
 800a672:	d055      	beq.n	800a720 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800a674:	68bb      	ldr	r3, [r7, #8]
 800a676:	2204      	movs	r2, #4
 800a678:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800a67c:	e050      	b.n	800a720 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800a67e:	68bb      	ldr	r3, [r7, #8]
 800a680:	3340      	adds	r3, #64	@ 0x40
 800a682:	4619      	mov	r1, r3
 800a684:	6878      	ldr	r0, [r7, #4]
 800a686:	f000 f860 	bl	800a74a <GetLineCoding>
 800a68a:	4603      	mov	r3, r0
 800a68c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800a68e:	7bbb      	ldrb	r3, [r7, #14]
 800a690:	2b00      	cmp	r3, #0
 800a692:	d126      	bne.n	800a6e2 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800a694:	68bb      	ldr	r3, [r7, #8]
 800a696:	2200      	movs	r2, #0
 800a698:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800a69c:	68bb      	ldr	r3, [r7, #8]
 800a69e:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800a6a2:	68bb      	ldr	r3, [r7, #8]
 800a6a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a6a6:	791b      	ldrb	r3, [r3, #4]
 800a6a8:	429a      	cmp	r2, r3
 800a6aa:	d13b      	bne.n	800a724 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800a6ac:	68bb      	ldr	r3, [r7, #8]
 800a6ae:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 800a6b2:	68bb      	ldr	r3, [r7, #8]
 800a6b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a6b6:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800a6b8:	429a      	cmp	r2, r3
 800a6ba:	d133      	bne.n	800a724 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800a6bc:	68bb      	ldr	r3, [r7, #8]
 800a6be:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 800a6c2:	68bb      	ldr	r3, [r7, #8]
 800a6c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a6c6:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800a6c8:	429a      	cmp	r2, r3
 800a6ca:	d12b      	bne.n	800a724 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800a6cc:	68bb      	ldr	r3, [r7, #8]
 800a6ce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a6d0:	68bb      	ldr	r3, [r7, #8]
 800a6d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a6d4:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800a6d6:	429a      	cmp	r2, r3
 800a6d8:	d124      	bne.n	800a724 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800a6da:	6878      	ldr	r0, [r7, #4]
 800a6dc:	f000 f958 	bl	800a990 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800a6e0:	e020      	b.n	800a724 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800a6e2:	7bbb      	ldrb	r3, [r7, #14]
 800a6e4:	2b01      	cmp	r3, #1
 800a6e6:	d01d      	beq.n	800a724 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800a6e8:	68bb      	ldr	r3, [r7, #8]
 800a6ea:	2204      	movs	r2, #4
 800a6ec:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800a6f0:	e018      	b.n	800a724 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800a6f2:	6878      	ldr	r0, [r7, #4]
 800a6f4:	f000 f867 	bl	800a7c6 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800a6f8:	6878      	ldr	r0, [r7, #4]
 800a6fa:	f000 f8da 	bl	800a8b2 <CDC_ProcessReception>
      break;
 800a6fe:	e014      	b.n	800a72a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800a700:	2100      	movs	r1, #0
 800a702:	6878      	ldr	r0, [r7, #4]
 800a704:	f001 f81a 	bl	800b73c <USBH_ClrFeature>
 800a708:	4603      	mov	r3, r0
 800a70a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800a70c:	7bbb      	ldrb	r3, [r7, #14]
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d10a      	bne.n	800a728 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800a712:	68bb      	ldr	r3, [r7, #8]
 800a714:	2200      	movs	r2, #0
 800a716:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 800a71a:	e005      	b.n	800a728 <USBH_CDC_Process+0x120>

    default:
      break;
 800a71c:	bf00      	nop
 800a71e:	e004      	b.n	800a72a <USBH_CDC_Process+0x122>
      break;
 800a720:	bf00      	nop
 800a722:	e002      	b.n	800a72a <USBH_CDC_Process+0x122>
      break;
 800a724:	bf00      	nop
 800a726:	e000      	b.n	800a72a <USBH_CDC_Process+0x122>
      break;
 800a728:	bf00      	nop

  }

  return status;
 800a72a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a72c:	4618      	mov	r0, r3
 800a72e:	3710      	adds	r7, #16
 800a730:	46bd      	mov	sp, r7
 800a732:	bd80      	pop	{r7, pc}

0800a734 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800a734:	b480      	push	{r7}
 800a736:	b083      	sub	sp, #12
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800a73c:	2300      	movs	r3, #0
}
 800a73e:	4618      	mov	r0, r3
 800a740:	370c      	adds	r7, #12
 800a742:	46bd      	mov	sp, r7
 800a744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a748:	4770      	bx	lr

0800a74a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800a74a:	b580      	push	{r7, lr}
 800a74c:	b082      	sub	sp, #8
 800a74e:	af00      	add	r7, sp, #0
 800a750:	6078      	str	r0, [r7, #4]
 800a752:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	22a1      	movs	r2, #161	@ 0xa1
 800a758:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	2221      	movs	r2, #33	@ 0x21
 800a75e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	2200      	movs	r2, #0
 800a764:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	2200      	movs	r2, #0
 800a76a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	2207      	movs	r2, #7
 800a770:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800a772:	683b      	ldr	r3, [r7, #0]
 800a774:	2207      	movs	r2, #7
 800a776:	4619      	mov	r1, r3
 800a778:	6878      	ldr	r0, [r7, #4]
 800a77a:	f001 fb14 	bl	800bda6 <USBH_CtlReq>
 800a77e:	4603      	mov	r3, r0
}
 800a780:	4618      	mov	r0, r3
 800a782:	3708      	adds	r7, #8
 800a784:	46bd      	mov	sp, r7
 800a786:	bd80      	pop	{r7, pc}

0800a788 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800a788:	b580      	push	{r7, lr}
 800a78a:	b082      	sub	sp, #8
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	6078      	str	r0, [r7, #4]
 800a790:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	2221      	movs	r2, #33	@ 0x21
 800a796:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	2220      	movs	r2, #32
 800a79c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	2200      	movs	r2, #0
 800a7a2:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	2200      	movs	r2, #0
 800a7a8:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	2207      	movs	r2, #7
 800a7ae:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800a7b0:	683b      	ldr	r3, [r7, #0]
 800a7b2:	2207      	movs	r2, #7
 800a7b4:	4619      	mov	r1, r3
 800a7b6:	6878      	ldr	r0, [r7, #4]
 800a7b8:	f001 faf5 	bl	800bda6 <USBH_CtlReq>
 800a7bc:	4603      	mov	r3, r0
}
 800a7be:	4618      	mov	r0, r3
 800a7c0:	3708      	adds	r7, #8
 800a7c2:	46bd      	mov	sp, r7
 800a7c4:	bd80      	pop	{r7, pc}

0800a7c6 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800a7c6:	b580      	push	{r7, lr}
 800a7c8:	b086      	sub	sp, #24
 800a7ca:	af02      	add	r7, sp, #8
 800a7cc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a7d4:	69db      	ldr	r3, [r3, #28]
 800a7d6:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a7d8:	2300      	movs	r3, #0
 800a7da:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800a7e2:	2b01      	cmp	r3, #1
 800a7e4:	d002      	beq.n	800a7ec <CDC_ProcessTransmission+0x26>
 800a7e6:	2b02      	cmp	r3, #2
 800a7e8:	d023      	beq.n	800a832 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800a7ea:	e05e      	b.n	800a8aa <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7f0:	68fa      	ldr	r2, [r7, #12]
 800a7f2:	8b12      	ldrh	r2, [r2, #24]
 800a7f4:	4293      	cmp	r3, r2
 800a7f6:	d90b      	bls.n	800a810 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	69d9      	ldr	r1, [r3, #28]
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	8b1a      	ldrh	r2, [r3, #24]
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	7b5b      	ldrb	r3, [r3, #13]
 800a804:	2001      	movs	r0, #1
 800a806:	9000      	str	r0, [sp, #0]
 800a808:	6878      	ldr	r0, [r7, #4]
 800a80a:	f001 fcda 	bl	800c1c2 <USBH_BulkSendData>
 800a80e:	e00b      	b.n	800a828 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 800a818:	b29a      	uxth	r2, r3
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	7b5b      	ldrb	r3, [r3, #13]
 800a81e:	2001      	movs	r0, #1
 800a820:	9000      	str	r0, [sp, #0]
 800a822:	6878      	ldr	r0, [r7, #4]
 800a824:	f001 fccd 	bl	800c1c2 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	2202      	movs	r2, #2
 800a82c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800a830:	e03b      	b.n	800a8aa <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	7b5b      	ldrb	r3, [r3, #13]
 800a836:	4619      	mov	r1, r3
 800a838:	6878      	ldr	r0, [r7, #4]
 800a83a:	f001 fff1 	bl	800c820 <USBH_LL_GetURBState>
 800a83e:	4603      	mov	r3, r0
 800a840:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800a842:	7afb      	ldrb	r3, [r7, #11]
 800a844:	2b01      	cmp	r3, #1
 800a846:	d128      	bne.n	800a89a <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a84c:	68fa      	ldr	r2, [r7, #12]
 800a84e:	8b12      	ldrh	r2, [r2, #24]
 800a850:	4293      	cmp	r3, r2
 800a852:	d90e      	bls.n	800a872 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a858:	68fa      	ldr	r2, [r7, #12]
 800a85a:	8b12      	ldrh	r2, [r2, #24]
 800a85c:	1a9a      	subs	r2, r3, r2
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	69db      	ldr	r3, [r3, #28]
 800a866:	68fa      	ldr	r2, [r7, #12]
 800a868:	8b12      	ldrh	r2, [r2, #24]
 800a86a:	441a      	add	r2, r3
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	61da      	str	r2, [r3, #28]
 800a870:	e002      	b.n	800a878 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	2200      	movs	r2, #0
 800a876:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d004      	beq.n	800a88a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	2201      	movs	r2, #1
 800a884:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800a888:	e00e      	b.n	800a8a8 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	2200      	movs	r2, #0
 800a88e:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 800a892:	6878      	ldr	r0, [r7, #4]
 800a894:	f000 f868 	bl	800a968 <USBH_CDC_TransmitCallback>
      break;
 800a898:	e006      	b.n	800a8a8 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800a89a:	7afb      	ldrb	r3, [r7, #11]
 800a89c:	2b02      	cmp	r3, #2
 800a89e:	d103      	bne.n	800a8a8 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	2201      	movs	r2, #1
 800a8a4:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800a8a8:	bf00      	nop
  }
}
 800a8aa:	bf00      	nop
 800a8ac:	3710      	adds	r7, #16
 800a8ae:	46bd      	mov	sp, r7
 800a8b0:	bd80      	pop	{r7, pc}

0800a8b2 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800a8b2:	b580      	push	{r7, lr}
 800a8b4:	b086      	sub	sp, #24
 800a8b6:	af00      	add	r7, sp, #0
 800a8b8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a8c0:	69db      	ldr	r3, [r3, #28]
 800a8c2:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a8c4:	2300      	movs	r3, #0
 800a8c6:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800a8c8:	697b      	ldr	r3, [r7, #20]
 800a8ca:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 800a8ce:	2b03      	cmp	r3, #3
 800a8d0:	d002      	beq.n	800a8d8 <CDC_ProcessReception+0x26>
 800a8d2:	2b04      	cmp	r3, #4
 800a8d4:	d00e      	beq.n	800a8f4 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800a8d6:	e043      	b.n	800a960 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 800a8d8:	697b      	ldr	r3, [r7, #20]
 800a8da:	6a19      	ldr	r1, [r3, #32]
 800a8dc:	697b      	ldr	r3, [r7, #20]
 800a8de:	8b5a      	ldrh	r2, [r3, #26]
 800a8e0:	697b      	ldr	r3, [r7, #20]
 800a8e2:	7b1b      	ldrb	r3, [r3, #12]
 800a8e4:	6878      	ldr	r0, [r7, #4]
 800a8e6:	f001 fc91 	bl	800c20c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800a8ea:	697b      	ldr	r3, [r7, #20]
 800a8ec:	2204      	movs	r2, #4
 800a8ee:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800a8f2:	e035      	b.n	800a960 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800a8f4:	697b      	ldr	r3, [r7, #20]
 800a8f6:	7b1b      	ldrb	r3, [r3, #12]
 800a8f8:	4619      	mov	r1, r3
 800a8fa:	6878      	ldr	r0, [r7, #4]
 800a8fc:	f001 ff90 	bl	800c820 <USBH_LL_GetURBState>
 800a900:	4603      	mov	r3, r0
 800a902:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800a904:	7cfb      	ldrb	r3, [r7, #19]
 800a906:	2b01      	cmp	r3, #1
 800a908:	d129      	bne.n	800a95e <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800a90a:	697b      	ldr	r3, [r7, #20]
 800a90c:	7b1b      	ldrb	r3, [r3, #12]
 800a90e:	4619      	mov	r1, r3
 800a910:	6878      	ldr	r0, [r7, #4]
 800a912:	f001 fef3 	bl	800c6fc <USBH_LL_GetLastXferSize>
 800a916:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 800a918:	697b      	ldr	r3, [r7, #20]
 800a91a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a91c:	68fa      	ldr	r2, [r7, #12]
 800a91e:	429a      	cmp	r2, r3
 800a920:	d016      	beq.n	800a950 <CDC_ProcessReception+0x9e>
 800a922:	697b      	ldr	r3, [r7, #20]
 800a924:	8b5b      	ldrh	r3, [r3, #26]
 800a926:	461a      	mov	r2, r3
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	4293      	cmp	r3, r2
 800a92c:	d110      	bne.n	800a950 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 800a92e:	697b      	ldr	r3, [r7, #20]
 800a930:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	1ad2      	subs	r2, r2, r3
 800a936:	697b      	ldr	r3, [r7, #20]
 800a938:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 800a93a:	697b      	ldr	r3, [r7, #20]
 800a93c:	6a1a      	ldr	r2, [r3, #32]
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	441a      	add	r2, r3
 800a942:	697b      	ldr	r3, [r7, #20]
 800a944:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800a946:	697b      	ldr	r3, [r7, #20]
 800a948:	2203      	movs	r2, #3
 800a94a:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800a94e:	e006      	b.n	800a95e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800a950:	697b      	ldr	r3, [r7, #20]
 800a952:	2200      	movs	r2, #0
 800a954:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800a958:	6878      	ldr	r0, [r7, #4]
 800a95a:	f000 f80f 	bl	800a97c <USBH_CDC_ReceiveCallback>
      break;
 800a95e:	bf00      	nop
  }
}
 800a960:	bf00      	nop
 800a962:	3718      	adds	r7, #24
 800a964:	46bd      	mov	sp, r7
 800a966:	bd80      	pop	{r7, pc}

0800a968 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800a968:	b480      	push	{r7}
 800a96a:	b083      	sub	sp, #12
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a970:	bf00      	nop
 800a972:	370c      	adds	r7, #12
 800a974:	46bd      	mov	sp, r7
 800a976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97a:	4770      	bx	lr

0800a97c <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800a97c:	b480      	push	{r7}
 800a97e:	b083      	sub	sp, #12
 800a980:	af00      	add	r7, sp, #0
 800a982:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a984:	bf00      	nop
 800a986:	370c      	adds	r7, #12
 800a988:	46bd      	mov	sp, r7
 800a98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98e:	4770      	bx	lr

0800a990 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800a990:	b480      	push	{r7}
 800a992:	b083      	sub	sp, #12
 800a994:	af00      	add	r7, sp, #0
 800a996:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a998:	bf00      	nop
 800a99a:	370c      	adds	r7, #12
 800a99c:	46bd      	mov	sp, r7
 800a99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a2:	4770      	bx	lr

0800a9a4 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800a9a4:	b580      	push	{r7, lr}
 800a9a6:	b084      	sub	sp, #16
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	60f8      	str	r0, [r7, #12]
 800a9ac:	60b9      	str	r1, [r7, #8]
 800a9ae:	4613      	mov	r3, r2
 800a9b0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d101      	bne.n	800a9bc <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800a9b8:	2302      	movs	r3, #2
 800a9ba:	e029      	b.n	800aa10 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	79fa      	ldrb	r2, [r7, #7]
 800a9c0:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	2200      	movs	r2, #0
 800a9c8:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	2200      	movs	r2, #0
 800a9d0:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800a9d4:	68f8      	ldr	r0, [r7, #12]
 800a9d6:	f000 f81f 	bl	800aa18 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	2200      	movs	r2, #0
 800a9de:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	2200      	movs	r2, #0
 800a9e6:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	2200      	movs	r2, #0
 800a9ee:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	2200      	movs	r2, #0
 800a9f6:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800a9fa:	68bb      	ldr	r3, [r7, #8]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d003      	beq.n	800aa08 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	68ba      	ldr	r2, [r7, #8]
 800aa04:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800aa08:	68f8      	ldr	r0, [r7, #12]
 800aa0a:	f001 fdc3 	bl	800c594 <USBH_LL_Init>

  return USBH_OK;
 800aa0e:	2300      	movs	r3, #0
}
 800aa10:	4618      	mov	r0, r3
 800aa12:	3710      	adds	r7, #16
 800aa14:	46bd      	mov	sp, r7
 800aa16:	bd80      	pop	{r7, pc}

0800aa18 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800aa18:	b580      	push	{r7, lr}
 800aa1a:	b084      	sub	sp, #16
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800aa20:	2300      	movs	r3, #0
 800aa22:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800aa24:	2300      	movs	r3, #0
 800aa26:	60fb      	str	r3, [r7, #12]
 800aa28:	e009      	b.n	800aa3e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800aa2a:	687a      	ldr	r2, [r7, #4]
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	33e0      	adds	r3, #224	@ 0xe0
 800aa30:	009b      	lsls	r3, r3, #2
 800aa32:	4413      	add	r3, r2
 800aa34:	2200      	movs	r2, #0
 800aa36:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	3301      	adds	r3, #1
 800aa3c:	60fb      	str	r3, [r7, #12]
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	2b0f      	cmp	r3, #15
 800aa42:	d9f2      	bls.n	800aa2a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800aa44:	2300      	movs	r3, #0
 800aa46:	60fb      	str	r3, [r7, #12]
 800aa48:	e009      	b.n	800aa5e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800aa4a:	687a      	ldr	r2, [r7, #4]
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	4413      	add	r3, r2
 800aa50:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800aa54:	2200      	movs	r2, #0
 800aa56:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	3301      	adds	r3, #1
 800aa5c:	60fb      	str	r3, [r7, #12]
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aa64:	d3f1      	bcc.n	800aa4a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	2200      	movs	r2, #0
 800aa6a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	2200      	movs	r2, #0
 800aa70:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	2201      	movs	r2, #1
 800aa76:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	2200      	movs	r2, #0
 800aa7c:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	2201      	movs	r2, #1
 800aa84:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	2240      	movs	r2, #64	@ 0x40
 800aa8a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	2200      	movs	r2, #0
 800aa90:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	2200      	movs	r2, #0
 800aa96:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	2201      	movs	r2, #1
 800aa9e:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	2200      	movs	r2, #0
 800aaa6:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	2200      	movs	r2, #0
 800aaae:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	331c      	adds	r3, #28
 800aab6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800aaba:	2100      	movs	r1, #0
 800aabc:	4618      	mov	r0, r3
 800aabe:	f002 f8a5 	bl	800cc0c <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800aac8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800aacc:	2100      	movs	r1, #0
 800aace:	4618      	mov	r0, r3
 800aad0:	f002 f89c 	bl	800cc0c <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800aada:	2212      	movs	r2, #18
 800aadc:	2100      	movs	r1, #0
 800aade:	4618      	mov	r0, r3
 800aae0:	f002 f894 	bl	800cc0c <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800aaea:	223e      	movs	r2, #62	@ 0x3e
 800aaec:	2100      	movs	r1, #0
 800aaee:	4618      	mov	r0, r3
 800aaf0:	f002 f88c 	bl	800cc0c <memset>

  return USBH_OK;
 800aaf4:	2300      	movs	r3, #0
}
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	3710      	adds	r7, #16
 800aafa:	46bd      	mov	sp, r7
 800aafc:	bd80      	pop	{r7, pc}

0800aafe <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800aafe:	b480      	push	{r7}
 800ab00:	b085      	sub	sp, #20
 800ab02:	af00      	add	r7, sp, #0
 800ab04:	6078      	str	r0, [r7, #4]
 800ab06:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800ab08:	2300      	movs	r3, #0
 800ab0a:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800ab0c:	683b      	ldr	r3, [r7, #0]
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d016      	beq.n	800ab40 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d10e      	bne.n	800ab3a <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800ab22:	1c59      	adds	r1, r3, #1
 800ab24:	687a      	ldr	r2, [r7, #4]
 800ab26:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 800ab2a:	687a      	ldr	r2, [r7, #4]
 800ab2c:	33de      	adds	r3, #222	@ 0xde
 800ab2e:	6839      	ldr	r1, [r7, #0]
 800ab30:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800ab34:	2300      	movs	r3, #0
 800ab36:	73fb      	strb	r3, [r7, #15]
 800ab38:	e004      	b.n	800ab44 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800ab3a:	2302      	movs	r3, #2
 800ab3c:	73fb      	strb	r3, [r7, #15]
 800ab3e:	e001      	b.n	800ab44 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800ab40:	2302      	movs	r3, #2
 800ab42:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800ab44:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab46:	4618      	mov	r0, r3
 800ab48:	3714      	adds	r7, #20
 800ab4a:	46bd      	mov	sp, r7
 800ab4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab50:	4770      	bx	lr

0800ab52 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800ab52:	b480      	push	{r7}
 800ab54:	b085      	sub	sp, #20
 800ab56:	af00      	add	r7, sp, #0
 800ab58:	6078      	str	r0, [r7, #4]
 800ab5a:	460b      	mov	r3, r1
 800ab5c:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800ab5e:	2300      	movs	r3, #0
 800ab60:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 800ab68:	78fa      	ldrb	r2, [r7, #3]
 800ab6a:	429a      	cmp	r2, r3
 800ab6c:	d204      	bcs.n	800ab78 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	78fa      	ldrb	r2, [r7, #3]
 800ab72:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 800ab76:	e001      	b.n	800ab7c <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800ab78:	2302      	movs	r3, #2
 800ab7a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800ab7c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab7e:	4618      	mov	r0, r3
 800ab80:	3714      	adds	r7, #20
 800ab82:	46bd      	mov	sp, r7
 800ab84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab88:	4770      	bx	lr

0800ab8a <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800ab8a:	b480      	push	{r7}
 800ab8c:	b087      	sub	sp, #28
 800ab8e:	af00      	add	r7, sp, #0
 800ab90:	6078      	str	r0, [r7, #4]
 800ab92:	4608      	mov	r0, r1
 800ab94:	4611      	mov	r1, r2
 800ab96:	461a      	mov	r2, r3
 800ab98:	4603      	mov	r3, r0
 800ab9a:	70fb      	strb	r3, [r7, #3]
 800ab9c:	460b      	mov	r3, r1
 800ab9e:	70bb      	strb	r3, [r7, #2]
 800aba0:	4613      	mov	r3, r2
 800aba2:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800aba4:	2300      	movs	r3, #0
 800aba6:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800aba8:	2300      	movs	r3, #0
 800abaa:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800abb2:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800abb4:	e025      	b.n	800ac02 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800abb6:	7dfb      	ldrb	r3, [r7, #23]
 800abb8:	221a      	movs	r2, #26
 800abba:	fb02 f303 	mul.w	r3, r2, r3
 800abbe:	3308      	adds	r3, #8
 800abc0:	68fa      	ldr	r2, [r7, #12]
 800abc2:	4413      	add	r3, r2
 800abc4:	3302      	adds	r3, #2
 800abc6:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800abc8:	693b      	ldr	r3, [r7, #16]
 800abca:	795b      	ldrb	r3, [r3, #5]
 800abcc:	78fa      	ldrb	r2, [r7, #3]
 800abce:	429a      	cmp	r2, r3
 800abd0:	d002      	beq.n	800abd8 <USBH_FindInterface+0x4e>
 800abd2:	78fb      	ldrb	r3, [r7, #3]
 800abd4:	2bff      	cmp	r3, #255	@ 0xff
 800abd6:	d111      	bne.n	800abfc <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800abd8:	693b      	ldr	r3, [r7, #16]
 800abda:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800abdc:	78ba      	ldrb	r2, [r7, #2]
 800abde:	429a      	cmp	r2, r3
 800abe0:	d002      	beq.n	800abe8 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800abe2:	78bb      	ldrb	r3, [r7, #2]
 800abe4:	2bff      	cmp	r3, #255	@ 0xff
 800abe6:	d109      	bne.n	800abfc <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800abe8:	693b      	ldr	r3, [r7, #16]
 800abea:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800abec:	787a      	ldrb	r2, [r7, #1]
 800abee:	429a      	cmp	r2, r3
 800abf0:	d002      	beq.n	800abf8 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800abf2:	787b      	ldrb	r3, [r7, #1]
 800abf4:	2bff      	cmp	r3, #255	@ 0xff
 800abf6:	d101      	bne.n	800abfc <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800abf8:	7dfb      	ldrb	r3, [r7, #23]
 800abfa:	e006      	b.n	800ac0a <USBH_FindInterface+0x80>
    }
    if_ix++;
 800abfc:	7dfb      	ldrb	r3, [r7, #23]
 800abfe:	3301      	adds	r3, #1
 800ac00:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800ac02:	7dfb      	ldrb	r3, [r7, #23]
 800ac04:	2b01      	cmp	r3, #1
 800ac06:	d9d6      	bls.n	800abb6 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800ac08:	23ff      	movs	r3, #255	@ 0xff
}
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	371c      	adds	r7, #28
 800ac0e:	46bd      	mov	sp, r7
 800ac10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac14:	4770      	bx	lr

0800ac16 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800ac16:	b580      	push	{r7, lr}
 800ac18:	b082      	sub	sp, #8
 800ac1a:	af00      	add	r7, sp, #0
 800ac1c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800ac1e:	6878      	ldr	r0, [r7, #4]
 800ac20:	f001 fcf4 	bl	800c60c <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800ac24:	2101      	movs	r1, #1
 800ac26:	6878      	ldr	r0, [r7, #4]
 800ac28:	f001 fe0d 	bl	800c846 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800ac2c:	2300      	movs	r3, #0
}
 800ac2e:	4618      	mov	r0, r3
 800ac30:	3708      	adds	r7, #8
 800ac32:	46bd      	mov	sp, r7
 800ac34:	bd80      	pop	{r7, pc}
	...

0800ac38 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 800ac38:	b580      	push	{r7, lr}
 800ac3a:	b088      	sub	sp, #32
 800ac3c:	af04      	add	r7, sp, #16
 800ac3e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800ac40:	2302      	movs	r3, #2
 800ac42:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800ac44:	2300      	movs	r3, #0
 800ac46:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 800ac4e:	b2db      	uxtb	r3, r3
 800ac50:	2b01      	cmp	r3, #1
 800ac52:	d102      	bne.n	800ac5a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	2203      	movs	r2, #3
 800ac58:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	781b      	ldrb	r3, [r3, #0]
 800ac5e:	b2db      	uxtb	r3, r3
 800ac60:	2b0b      	cmp	r3, #11
 800ac62:	f200 81bb 	bhi.w	800afdc <USBH_Process+0x3a4>
 800ac66:	a201      	add	r2, pc, #4	@ (adr r2, 800ac6c <USBH_Process+0x34>)
 800ac68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac6c:	0800ac9d 	.word	0x0800ac9d
 800ac70:	0800accf 	.word	0x0800accf
 800ac74:	0800ad37 	.word	0x0800ad37
 800ac78:	0800af77 	.word	0x0800af77
 800ac7c:	0800afdd 	.word	0x0800afdd
 800ac80:	0800add7 	.word	0x0800add7
 800ac84:	0800af1d 	.word	0x0800af1d
 800ac88:	0800ae0d 	.word	0x0800ae0d
 800ac8c:	0800ae2d 	.word	0x0800ae2d
 800ac90:	0800ae4b 	.word	0x0800ae4b
 800ac94:	0800ae8f 	.word	0x0800ae8f
 800ac98:	0800af5f 	.word	0x0800af5f
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800aca2:	b2db      	uxtb	r3, r3
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	f000 819b 	beq.w	800afe0 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	2201      	movs	r2, #1
 800acae:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800acb0:	20c8      	movs	r0, #200	@ 0xc8
 800acb2:	f001 fe12 	bl	800c8da <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800acb6:	6878      	ldr	r0, [r7, #4]
 800acb8:	f001 fd05 	bl	800c6c6 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	2200      	movs	r2, #0
 800acc0:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	2200      	movs	r2, #0
 800acc8:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800accc:	e188      	b.n	800afe0 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 800acd4:	2b01      	cmp	r3, #1
 800acd6:	d107      	bne.n	800ace8 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	2200      	movs	r2, #0
 800acdc:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	2202      	movs	r2, #2
 800ace4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ace6:	e18a      	b.n	800affe <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800acee:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800acf2:	d914      	bls.n	800ad1e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800acfa:	3301      	adds	r3, #1
 800acfc:	b2da      	uxtb	r2, r3
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800ad0a:	2b03      	cmp	r3, #3
 800ad0c:	d903      	bls.n	800ad16 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	220d      	movs	r2, #13
 800ad12:	701a      	strb	r2, [r3, #0]
      break;
 800ad14:	e173      	b.n	800affe <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	2200      	movs	r2, #0
 800ad1a:	701a      	strb	r2, [r3, #0]
      break;
 800ad1c:	e16f      	b.n	800affe <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800ad24:	f103 020a 	add.w	r2, r3, #10
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 800ad2e:	200a      	movs	r0, #10
 800ad30:	f001 fdd3 	bl	800c8da <USBH_Delay>
      break;
 800ad34:	e163      	b.n	800affe <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d005      	beq.n	800ad4c <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800ad46:	2104      	movs	r1, #4
 800ad48:	6878      	ldr	r0, [r7, #4]
 800ad4a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800ad4c:	2064      	movs	r0, #100	@ 0x64
 800ad4e:	f001 fdc4 	bl	800c8da <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800ad52:	6878      	ldr	r0, [r7, #4]
 800ad54:	f001 fc90 	bl	800c678 <USBH_LL_GetSpeed>
 800ad58:	4603      	mov	r3, r0
 800ad5a:	461a      	mov	r2, r3
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	2205      	movs	r2, #5
 800ad66:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800ad68:	2100      	movs	r1, #0
 800ad6a:	6878      	ldr	r0, [r7, #4]
 800ad6c:	f001 fa9b 	bl	800c2a6 <USBH_AllocPipe>
 800ad70:	4603      	mov	r3, r0
 800ad72:	461a      	mov	r2, r3
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800ad78:	2180      	movs	r1, #128	@ 0x80
 800ad7a:	6878      	ldr	r0, [r7, #4]
 800ad7c:	f001 fa93 	bl	800c2a6 <USBH_AllocPipe>
 800ad80:	4603      	mov	r3, r0
 800ad82:	461a      	mov	r2, r3
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	7919      	ldrb	r1, [r3, #4]
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800ad98:	687a      	ldr	r2, [r7, #4]
 800ad9a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800ad9c:	9202      	str	r2, [sp, #8]
 800ad9e:	2200      	movs	r2, #0
 800ada0:	9201      	str	r2, [sp, #4]
 800ada2:	9300      	str	r3, [sp, #0]
 800ada4:	4603      	mov	r3, r0
 800ada6:	2280      	movs	r2, #128	@ 0x80
 800ada8:	6878      	ldr	r0, [r7, #4]
 800adaa:	f001 fa4d 	bl	800c248 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	7959      	ldrb	r1, [r3, #5]
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800adbe:	687a      	ldr	r2, [r7, #4]
 800adc0:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800adc2:	9202      	str	r2, [sp, #8]
 800adc4:	2200      	movs	r2, #0
 800adc6:	9201      	str	r2, [sp, #4]
 800adc8:	9300      	str	r3, [sp, #0]
 800adca:	4603      	mov	r3, r0
 800adcc:	2200      	movs	r2, #0
 800adce:	6878      	ldr	r0, [r7, #4]
 800add0:	f001 fa3a 	bl	800c248 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800add4:	e113      	b.n	800affe <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800add6:	6878      	ldr	r0, [r7, #4]
 800add8:	f000 f916 	bl	800b008 <USBH_HandleEnum>
 800addc:	4603      	mov	r3, r0
 800adde:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800ade0:	7bbb      	ldrb	r3, [r7, #14]
 800ade2:	b2db      	uxtb	r3, r3
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	f040 80fd 	bne.w	800afe4 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	2200      	movs	r2, #0
 800adee:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 800adf8:	2b01      	cmp	r3, #1
 800adfa:	d103      	bne.n	800ae04 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	2208      	movs	r2, #8
 800ae00:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800ae02:	e0ef      	b.n	800afe4 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	2207      	movs	r2, #7
 800ae08:	701a      	strb	r2, [r3, #0]
      break;
 800ae0a:	e0eb      	b.n	800afe4 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	f000 80e8 	beq.w	800afe8 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800ae1e:	2101      	movs	r1, #1
 800ae20:	6878      	ldr	r0, [r7, #4]
 800ae22:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	2208      	movs	r2, #8
 800ae28:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800ae2a:	e0dd      	b.n	800afe8 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 800ae32:	4619      	mov	r1, r3
 800ae34:	6878      	ldr	r0, [r7, #4]
 800ae36:	f000 fc3a 	bl	800b6ae <USBH_SetCfg>
 800ae3a:	4603      	mov	r3, r0
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	f040 80d5 	bne.w	800afec <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	2209      	movs	r2, #9
 800ae46:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ae48:	e0d0      	b.n	800afec <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 800ae50:	f003 0320 	and.w	r3, r3, #32
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d016      	beq.n	800ae86 <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800ae58:	2101      	movs	r1, #1
 800ae5a:	6878      	ldr	r0, [r7, #4]
 800ae5c:	f000 fc4a 	bl	800b6f4 <USBH_SetFeature>
 800ae60:	4603      	mov	r3, r0
 800ae62:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800ae64:	7bbb      	ldrb	r3, [r7, #14]
 800ae66:	b2db      	uxtb	r3, r3
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d103      	bne.n	800ae74 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	220a      	movs	r2, #10
 800ae70:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ae72:	e0bd      	b.n	800aff0 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 800ae74:	7bbb      	ldrb	r3, [r7, #14]
 800ae76:	b2db      	uxtb	r3, r3
 800ae78:	2b03      	cmp	r3, #3
 800ae7a:	f040 80b9 	bne.w	800aff0 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	220a      	movs	r2, #10
 800ae82:	701a      	strb	r2, [r3, #0]
      break;
 800ae84:	e0b4      	b.n	800aff0 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	220a      	movs	r2, #10
 800ae8a:	701a      	strb	r2, [r3, #0]
      break;
 800ae8c:	e0b0      	b.n	800aff0 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	f000 80ad 	beq.w	800aff4 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	2200      	movs	r2, #0
 800ae9e:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800aea2:	2300      	movs	r3, #0
 800aea4:	73fb      	strb	r3, [r7, #15]
 800aea6:	e016      	b.n	800aed6 <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800aea8:	7bfa      	ldrb	r2, [r7, #15]
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	32de      	adds	r2, #222	@ 0xde
 800aeae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aeb2:	791a      	ldrb	r2, [r3, #4]
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 800aeba:	429a      	cmp	r2, r3
 800aebc:	d108      	bne.n	800aed0 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 800aebe:	7bfa      	ldrb	r2, [r7, #15]
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	32de      	adds	r2, #222	@ 0xde
 800aec4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 800aece:	e005      	b.n	800aedc <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800aed0:	7bfb      	ldrb	r3, [r7, #15]
 800aed2:	3301      	adds	r3, #1
 800aed4:	73fb      	strb	r3, [r7, #15]
 800aed6:	7bfb      	ldrb	r3, [r7, #15]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d0e5      	beq.n	800aea8 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d016      	beq.n	800af14 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800aeec:	689b      	ldr	r3, [r3, #8]
 800aeee:	6878      	ldr	r0, [r7, #4]
 800aef0:	4798      	blx	r3
 800aef2:	4603      	mov	r3, r0
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d109      	bne.n	800af0c <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	2206      	movs	r2, #6
 800aefc:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800af04:	2103      	movs	r1, #3
 800af06:	6878      	ldr	r0, [r7, #4]
 800af08:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800af0a:	e073      	b.n	800aff4 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	220d      	movs	r2, #13
 800af10:	701a      	strb	r2, [r3, #0]
      break;
 800af12:	e06f      	b.n	800aff4 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	220d      	movs	r2, #13
 800af18:	701a      	strb	r2, [r3, #0]
      break;
 800af1a:	e06b      	b.n	800aff4 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800af22:	2b00      	cmp	r3, #0
 800af24:	d017      	beq.n	800af56 <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800af2c:	691b      	ldr	r3, [r3, #16]
 800af2e:	6878      	ldr	r0, [r7, #4]
 800af30:	4798      	blx	r3
 800af32:	4603      	mov	r3, r0
 800af34:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800af36:	7bbb      	ldrb	r3, [r7, #14]
 800af38:	b2db      	uxtb	r3, r3
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d103      	bne.n	800af46 <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	220b      	movs	r2, #11
 800af42:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800af44:	e058      	b.n	800aff8 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 800af46:	7bbb      	ldrb	r3, [r7, #14]
 800af48:	b2db      	uxtb	r3, r3
 800af4a:	2b02      	cmp	r3, #2
 800af4c:	d154      	bne.n	800aff8 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	220d      	movs	r2, #13
 800af52:	701a      	strb	r2, [r3, #0]
      break;
 800af54:	e050      	b.n	800aff8 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	220d      	movs	r2, #13
 800af5a:	701a      	strb	r2, [r3, #0]
      break;
 800af5c:	e04c      	b.n	800aff8 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800af64:	2b00      	cmp	r3, #0
 800af66:	d049      	beq.n	800affc <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800af6e:	695b      	ldr	r3, [r3, #20]
 800af70:	6878      	ldr	r0, [r7, #4]
 800af72:	4798      	blx	r3
      }
      break;
 800af74:	e042      	b.n	800affc <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	2200      	movs	r2, #0
 800af7a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 800af7e:	6878      	ldr	r0, [r7, #4]
 800af80:	f7ff fd4a 	bl	800aa18 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d009      	beq.n	800afa2 <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800af94:	68db      	ldr	r3, [r3, #12]
 800af96:	6878      	ldr	r0, [r7, #4]
 800af98:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	2200      	movs	r2, #0
 800af9e:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d005      	beq.n	800afb8 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800afb2:	2105      	movs	r1, #5
 800afb4:	6878      	ldr	r0, [r7, #4]
 800afb6:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 800afbe:	b2db      	uxtb	r3, r3
 800afc0:	2b01      	cmp	r3, #1
 800afc2:	d107      	bne.n	800afd4 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	2200      	movs	r2, #0
 800afc8:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800afcc:	6878      	ldr	r0, [r7, #4]
 800afce:	f7ff fe22 	bl	800ac16 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800afd2:	e014      	b.n	800affe <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 800afd4:	6878      	ldr	r0, [r7, #4]
 800afd6:	f001 fb19 	bl	800c60c <USBH_LL_Start>
      break;
 800afda:	e010      	b.n	800affe <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 800afdc:	bf00      	nop
 800afde:	e00e      	b.n	800affe <USBH_Process+0x3c6>
      break;
 800afe0:	bf00      	nop
 800afe2:	e00c      	b.n	800affe <USBH_Process+0x3c6>
      break;
 800afe4:	bf00      	nop
 800afe6:	e00a      	b.n	800affe <USBH_Process+0x3c6>
    break;
 800afe8:	bf00      	nop
 800afea:	e008      	b.n	800affe <USBH_Process+0x3c6>
      break;
 800afec:	bf00      	nop
 800afee:	e006      	b.n	800affe <USBH_Process+0x3c6>
      break;
 800aff0:	bf00      	nop
 800aff2:	e004      	b.n	800affe <USBH_Process+0x3c6>
      break;
 800aff4:	bf00      	nop
 800aff6:	e002      	b.n	800affe <USBH_Process+0x3c6>
      break;
 800aff8:	bf00      	nop
 800affa:	e000      	b.n	800affe <USBH_Process+0x3c6>
      break;
 800affc:	bf00      	nop
  }
  return USBH_OK;
 800affe:	2300      	movs	r3, #0
}
 800b000:	4618      	mov	r0, r3
 800b002:	3710      	adds	r7, #16
 800b004:	46bd      	mov	sp, r7
 800b006:	bd80      	pop	{r7, pc}

0800b008 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800b008:	b580      	push	{r7, lr}
 800b00a:	b088      	sub	sp, #32
 800b00c:	af04      	add	r7, sp, #16
 800b00e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800b010:	2301      	movs	r3, #1
 800b012:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800b014:	2301      	movs	r3, #1
 800b016:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	785b      	ldrb	r3, [r3, #1]
 800b01c:	2b07      	cmp	r3, #7
 800b01e:	f200 81bd 	bhi.w	800b39c <USBH_HandleEnum+0x394>
 800b022:	a201      	add	r2, pc, #4	@ (adr r2, 800b028 <USBH_HandleEnum+0x20>)
 800b024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b028:	0800b049 	.word	0x0800b049
 800b02c:	0800b103 	.word	0x0800b103
 800b030:	0800b16d 	.word	0x0800b16d
 800b034:	0800b1f7 	.word	0x0800b1f7
 800b038:	0800b261 	.word	0x0800b261
 800b03c:	0800b2d1 	.word	0x0800b2d1
 800b040:	0800b317 	.word	0x0800b317
 800b044:	0800b35d 	.word	0x0800b35d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800b048:	2108      	movs	r1, #8
 800b04a:	6878      	ldr	r0, [r7, #4]
 800b04c:	f000 fa4c 	bl	800b4e8 <USBH_Get_DevDesc>
 800b050:	4603      	mov	r3, r0
 800b052:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b054:	7bbb      	ldrb	r3, [r7, #14]
 800b056:	2b00      	cmp	r3, #0
 800b058:	d12e      	bne.n	800b0b8 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	2201      	movs	r2, #1
 800b068:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	7919      	ldrb	r1, [r3, #4]
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800b07a:	687a      	ldr	r2, [r7, #4]
 800b07c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800b07e:	9202      	str	r2, [sp, #8]
 800b080:	2200      	movs	r2, #0
 800b082:	9201      	str	r2, [sp, #4]
 800b084:	9300      	str	r3, [sp, #0]
 800b086:	4603      	mov	r3, r0
 800b088:	2280      	movs	r2, #128	@ 0x80
 800b08a:	6878      	ldr	r0, [r7, #4]
 800b08c:	f001 f8dc 	bl	800c248 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	7959      	ldrb	r1, [r3, #5]
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800b0a0:	687a      	ldr	r2, [r7, #4]
 800b0a2:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b0a4:	9202      	str	r2, [sp, #8]
 800b0a6:	2200      	movs	r2, #0
 800b0a8:	9201      	str	r2, [sp, #4]
 800b0aa:	9300      	str	r3, [sp, #0]
 800b0ac:	4603      	mov	r3, r0
 800b0ae:	2200      	movs	r2, #0
 800b0b0:	6878      	ldr	r0, [r7, #4]
 800b0b2:	f001 f8c9 	bl	800c248 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800b0b6:	e173      	b.n	800b3a0 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b0b8:	7bbb      	ldrb	r3, [r7, #14]
 800b0ba:	2b03      	cmp	r3, #3
 800b0bc:	f040 8170 	bne.w	800b3a0 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800b0c6:	3301      	adds	r3, #1
 800b0c8:	b2da      	uxtb	r2, r3
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800b0d6:	2b03      	cmp	r3, #3
 800b0d8:	d903      	bls.n	800b0e2 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	220d      	movs	r2, #13
 800b0de:	701a      	strb	r2, [r3, #0]
      break;
 800b0e0:	e15e      	b.n	800b3a0 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	795b      	ldrb	r3, [r3, #5]
 800b0e6:	4619      	mov	r1, r3
 800b0e8:	6878      	ldr	r0, [r7, #4]
 800b0ea:	f001 f8fd 	bl	800c2e8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	791b      	ldrb	r3, [r3, #4]
 800b0f2:	4619      	mov	r1, r3
 800b0f4:	6878      	ldr	r0, [r7, #4]
 800b0f6:	f001 f8f7 	bl	800c2e8 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	2200      	movs	r2, #0
 800b0fe:	701a      	strb	r2, [r3, #0]
      break;
 800b100:	e14e      	b.n	800b3a0 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800b102:	2112      	movs	r1, #18
 800b104:	6878      	ldr	r0, [r7, #4]
 800b106:	f000 f9ef 	bl	800b4e8 <USBH_Get_DevDesc>
 800b10a:	4603      	mov	r3, r0
 800b10c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b10e:	7bbb      	ldrb	r3, [r7, #14]
 800b110:	2b00      	cmp	r3, #0
 800b112:	d103      	bne.n	800b11c <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	2202      	movs	r2, #2
 800b118:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b11a:	e143      	b.n	800b3a4 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b11c:	7bbb      	ldrb	r3, [r7, #14]
 800b11e:	2b03      	cmp	r3, #3
 800b120:	f040 8140 	bne.w	800b3a4 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800b12a:	3301      	adds	r3, #1
 800b12c:	b2da      	uxtb	r2, r3
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800b13a:	2b03      	cmp	r3, #3
 800b13c:	d903      	bls.n	800b146 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	220d      	movs	r2, #13
 800b142:	701a      	strb	r2, [r3, #0]
      break;
 800b144:	e12e      	b.n	800b3a4 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	795b      	ldrb	r3, [r3, #5]
 800b14a:	4619      	mov	r1, r3
 800b14c:	6878      	ldr	r0, [r7, #4]
 800b14e:	f001 f8cb 	bl	800c2e8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	791b      	ldrb	r3, [r3, #4]
 800b156:	4619      	mov	r1, r3
 800b158:	6878      	ldr	r0, [r7, #4]
 800b15a:	f001 f8c5 	bl	800c2e8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	2200      	movs	r2, #0
 800b162:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	2200      	movs	r2, #0
 800b168:	701a      	strb	r2, [r3, #0]
      break;
 800b16a:	e11b      	b.n	800b3a4 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800b16c:	2101      	movs	r1, #1
 800b16e:	6878      	ldr	r0, [r7, #4]
 800b170:	f000 fa79 	bl	800b666 <USBH_SetAddress>
 800b174:	4603      	mov	r3, r0
 800b176:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b178:	7bbb      	ldrb	r3, [r7, #14]
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d130      	bne.n	800b1e0 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 800b17e:	2002      	movs	r0, #2
 800b180:	f001 fbab 	bl	800c8da <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	2201      	movs	r2, #1
 800b188:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	2203      	movs	r2, #3
 800b190:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	7919      	ldrb	r1, [r3, #4]
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800b1a2:	687a      	ldr	r2, [r7, #4]
 800b1a4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800b1a6:	9202      	str	r2, [sp, #8]
 800b1a8:	2200      	movs	r2, #0
 800b1aa:	9201      	str	r2, [sp, #4]
 800b1ac:	9300      	str	r3, [sp, #0]
 800b1ae:	4603      	mov	r3, r0
 800b1b0:	2280      	movs	r2, #128	@ 0x80
 800b1b2:	6878      	ldr	r0, [r7, #4]
 800b1b4:	f001 f848 	bl	800c248 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	7959      	ldrb	r1, [r3, #5]
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800b1c8:	687a      	ldr	r2, [r7, #4]
 800b1ca:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b1cc:	9202      	str	r2, [sp, #8]
 800b1ce:	2200      	movs	r2, #0
 800b1d0:	9201      	str	r2, [sp, #4]
 800b1d2:	9300      	str	r3, [sp, #0]
 800b1d4:	4603      	mov	r3, r0
 800b1d6:	2200      	movs	r2, #0
 800b1d8:	6878      	ldr	r0, [r7, #4]
 800b1da:	f001 f835 	bl	800c248 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800b1de:	e0e3      	b.n	800b3a8 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b1e0:	7bbb      	ldrb	r3, [r7, #14]
 800b1e2:	2b03      	cmp	r3, #3
 800b1e4:	f040 80e0 	bne.w	800b3a8 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	220d      	movs	r2, #13
 800b1ec:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	2200      	movs	r2, #0
 800b1f2:	705a      	strb	r2, [r3, #1]
      break;
 800b1f4:	e0d8      	b.n	800b3a8 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800b1f6:	2109      	movs	r1, #9
 800b1f8:	6878      	ldr	r0, [r7, #4]
 800b1fa:	f000 f9a1 	bl	800b540 <USBH_Get_CfgDesc>
 800b1fe:	4603      	mov	r3, r0
 800b200:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b202:	7bbb      	ldrb	r3, [r7, #14]
 800b204:	2b00      	cmp	r3, #0
 800b206:	d103      	bne.n	800b210 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	2204      	movs	r2, #4
 800b20c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b20e:	e0cd      	b.n	800b3ac <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b210:	7bbb      	ldrb	r3, [r7, #14]
 800b212:	2b03      	cmp	r3, #3
 800b214:	f040 80ca 	bne.w	800b3ac <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800b21e:	3301      	adds	r3, #1
 800b220:	b2da      	uxtb	r2, r3
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800b22e:	2b03      	cmp	r3, #3
 800b230:	d903      	bls.n	800b23a <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	220d      	movs	r2, #13
 800b236:	701a      	strb	r2, [r3, #0]
      break;
 800b238:	e0b8      	b.n	800b3ac <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	795b      	ldrb	r3, [r3, #5]
 800b23e:	4619      	mov	r1, r3
 800b240:	6878      	ldr	r0, [r7, #4]
 800b242:	f001 f851 	bl	800c2e8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	791b      	ldrb	r3, [r3, #4]
 800b24a:	4619      	mov	r1, r3
 800b24c:	6878      	ldr	r0, [r7, #4]
 800b24e:	f001 f84b 	bl	800c2e8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	2200      	movs	r2, #0
 800b256:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	2200      	movs	r2, #0
 800b25c:	701a      	strb	r2, [r3, #0]
      break;
 800b25e:	e0a5      	b.n	800b3ac <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 800b266:	4619      	mov	r1, r3
 800b268:	6878      	ldr	r0, [r7, #4]
 800b26a:	f000 f969 	bl	800b540 <USBH_Get_CfgDesc>
 800b26e:	4603      	mov	r3, r0
 800b270:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b272:	7bbb      	ldrb	r3, [r7, #14]
 800b274:	2b00      	cmp	r3, #0
 800b276:	d103      	bne.n	800b280 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	2205      	movs	r2, #5
 800b27c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b27e:	e097      	b.n	800b3b0 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b280:	7bbb      	ldrb	r3, [r7, #14]
 800b282:	2b03      	cmp	r3, #3
 800b284:	f040 8094 	bne.w	800b3b0 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800b28e:	3301      	adds	r3, #1
 800b290:	b2da      	uxtb	r2, r3
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800b29e:	2b03      	cmp	r3, #3
 800b2a0:	d903      	bls.n	800b2aa <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	220d      	movs	r2, #13
 800b2a6:	701a      	strb	r2, [r3, #0]
      break;
 800b2a8:	e082      	b.n	800b3b0 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	795b      	ldrb	r3, [r3, #5]
 800b2ae:	4619      	mov	r1, r3
 800b2b0:	6878      	ldr	r0, [r7, #4]
 800b2b2:	f001 f819 	bl	800c2e8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	791b      	ldrb	r3, [r3, #4]
 800b2ba:	4619      	mov	r1, r3
 800b2bc:	6878      	ldr	r0, [r7, #4]
 800b2be:	f001 f813 	bl	800c2e8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	2200      	movs	r2, #0
 800b2c6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	2200      	movs	r2, #0
 800b2cc:	701a      	strb	r2, [r3, #0]
      break;
 800b2ce:	e06f      	b.n	800b3b0 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d019      	beq.n	800b30e <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800b2e6:	23ff      	movs	r3, #255	@ 0xff
 800b2e8:	6878      	ldr	r0, [r7, #4]
 800b2ea:	f000 f953 	bl	800b594 <USBH_Get_StringDesc>
 800b2ee:	4603      	mov	r3, r0
 800b2f0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b2f2:	7bbb      	ldrb	r3, [r7, #14]
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d103      	bne.n	800b300 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	2206      	movs	r2, #6
 800b2fc:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800b2fe:	e059      	b.n	800b3b4 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b300:	7bbb      	ldrb	r3, [r7, #14]
 800b302:	2b03      	cmp	r3, #3
 800b304:	d156      	bne.n	800b3b4 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	2206      	movs	r2, #6
 800b30a:	705a      	strb	r2, [r3, #1]
      break;
 800b30c:	e052      	b.n	800b3b4 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	2206      	movs	r2, #6
 800b312:	705a      	strb	r2, [r3, #1]
      break;
 800b314:	e04e      	b.n	800b3b4 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d019      	beq.n	800b354 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800b32c:	23ff      	movs	r3, #255	@ 0xff
 800b32e:	6878      	ldr	r0, [r7, #4]
 800b330:	f000 f930 	bl	800b594 <USBH_Get_StringDesc>
 800b334:	4603      	mov	r3, r0
 800b336:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b338:	7bbb      	ldrb	r3, [r7, #14]
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d103      	bne.n	800b346 <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	2207      	movs	r2, #7
 800b342:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800b344:	e038      	b.n	800b3b8 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b346:	7bbb      	ldrb	r3, [r7, #14]
 800b348:	2b03      	cmp	r3, #3
 800b34a:	d135      	bne.n	800b3b8 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	2207      	movs	r2, #7
 800b350:	705a      	strb	r2, [r3, #1]
      break;
 800b352:	e031      	b.n	800b3b8 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	2207      	movs	r2, #7
 800b358:	705a      	strb	r2, [r3, #1]
      break;
 800b35a:	e02d      	b.n	800b3b8 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800b362:	2b00      	cmp	r3, #0
 800b364:	d017      	beq.n	800b396 <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800b372:	23ff      	movs	r3, #255	@ 0xff
 800b374:	6878      	ldr	r0, [r7, #4]
 800b376:	f000 f90d 	bl	800b594 <USBH_Get_StringDesc>
 800b37a:	4603      	mov	r3, r0
 800b37c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b37e:	7bbb      	ldrb	r3, [r7, #14]
 800b380:	2b00      	cmp	r3, #0
 800b382:	d102      	bne.n	800b38a <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800b384:	2300      	movs	r3, #0
 800b386:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800b388:	e018      	b.n	800b3bc <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b38a:	7bbb      	ldrb	r3, [r7, #14]
 800b38c:	2b03      	cmp	r3, #3
 800b38e:	d115      	bne.n	800b3bc <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 800b390:	2300      	movs	r3, #0
 800b392:	73fb      	strb	r3, [r7, #15]
      break;
 800b394:	e012      	b.n	800b3bc <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 800b396:	2300      	movs	r3, #0
 800b398:	73fb      	strb	r3, [r7, #15]
      break;
 800b39a:	e00f      	b.n	800b3bc <USBH_HandleEnum+0x3b4>

    default:
      break;
 800b39c:	bf00      	nop
 800b39e:	e00e      	b.n	800b3be <USBH_HandleEnum+0x3b6>
      break;
 800b3a0:	bf00      	nop
 800b3a2:	e00c      	b.n	800b3be <USBH_HandleEnum+0x3b6>
      break;
 800b3a4:	bf00      	nop
 800b3a6:	e00a      	b.n	800b3be <USBH_HandleEnum+0x3b6>
      break;
 800b3a8:	bf00      	nop
 800b3aa:	e008      	b.n	800b3be <USBH_HandleEnum+0x3b6>
      break;
 800b3ac:	bf00      	nop
 800b3ae:	e006      	b.n	800b3be <USBH_HandleEnum+0x3b6>
      break;
 800b3b0:	bf00      	nop
 800b3b2:	e004      	b.n	800b3be <USBH_HandleEnum+0x3b6>
      break;
 800b3b4:	bf00      	nop
 800b3b6:	e002      	b.n	800b3be <USBH_HandleEnum+0x3b6>
      break;
 800b3b8:	bf00      	nop
 800b3ba:	e000      	b.n	800b3be <USBH_HandleEnum+0x3b6>
      break;
 800b3bc:	bf00      	nop
  }
  return Status;
 800b3be:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3c0:	4618      	mov	r0, r3
 800b3c2:	3710      	adds	r7, #16
 800b3c4:	46bd      	mov	sp, r7
 800b3c6:	bd80      	pop	{r7, pc}

0800b3c8 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800b3c8:	b480      	push	{r7}
 800b3ca:	b083      	sub	sp, #12
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	6078      	str	r0, [r7, #4]
 800b3d0:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	683a      	ldr	r2, [r7, #0]
 800b3d6:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 800b3da:	bf00      	nop
 800b3dc:	370c      	adds	r7, #12
 800b3de:	46bd      	mov	sp, r7
 800b3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e4:	4770      	bx	lr

0800b3e6 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800b3e6:	b580      	push	{r7, lr}
 800b3e8:	b082      	sub	sp, #8
 800b3ea:	af00      	add	r7, sp, #0
 800b3ec:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800b3f4:	1c5a      	adds	r2, r3, #1
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800b3fc:	6878      	ldr	r0, [r7, #4]
 800b3fe:	f000 f804 	bl	800b40a <USBH_HandleSof>
}
 800b402:	bf00      	nop
 800b404:	3708      	adds	r7, #8
 800b406:	46bd      	mov	sp, r7
 800b408:	bd80      	pop	{r7, pc}

0800b40a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800b40a:	b580      	push	{r7, lr}
 800b40c:	b082      	sub	sp, #8
 800b40e:	af00      	add	r7, sp, #0
 800b410:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	781b      	ldrb	r3, [r3, #0]
 800b416:	b2db      	uxtb	r3, r3
 800b418:	2b0b      	cmp	r3, #11
 800b41a:	d10a      	bne.n	800b432 <USBH_HandleSof+0x28>
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b422:	2b00      	cmp	r3, #0
 800b424:	d005      	beq.n	800b432 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b42c:	699b      	ldr	r3, [r3, #24]
 800b42e:	6878      	ldr	r0, [r7, #4]
 800b430:	4798      	blx	r3
  }
}
 800b432:	bf00      	nop
 800b434:	3708      	adds	r7, #8
 800b436:	46bd      	mov	sp, r7
 800b438:	bd80      	pop	{r7, pc}

0800b43a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800b43a:	b480      	push	{r7}
 800b43c:	b083      	sub	sp, #12
 800b43e:	af00      	add	r7, sp, #0
 800b440:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	2201      	movs	r2, #1
 800b446:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800b44a:	bf00      	nop
}
 800b44c:	370c      	adds	r7, #12
 800b44e:	46bd      	mov	sp, r7
 800b450:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b454:	4770      	bx	lr

0800b456 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800b456:	b480      	push	{r7}
 800b458:	b083      	sub	sp, #12
 800b45a:	af00      	add	r7, sp, #0
 800b45c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	2200      	movs	r2, #0
 800b462:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 800b466:	bf00      	nop
}
 800b468:	370c      	adds	r7, #12
 800b46a:	46bd      	mov	sp, r7
 800b46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b470:	4770      	bx	lr

0800b472 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800b472:	b480      	push	{r7}
 800b474:	b083      	sub	sp, #12
 800b476:	af00      	add	r7, sp, #0
 800b478:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	2201      	movs	r2, #1
 800b47e:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	2200      	movs	r2, #0
 800b486:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	2200      	movs	r2, #0
 800b48e:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800b492:	2300      	movs	r3, #0
}
 800b494:	4618      	mov	r0, r3
 800b496:	370c      	adds	r7, #12
 800b498:	46bd      	mov	sp, r7
 800b49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b49e:	4770      	bx	lr

0800b4a0 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800b4a0:	b580      	push	{r7, lr}
 800b4a2:	b082      	sub	sp, #8
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	2201      	movs	r2, #1
 800b4ac:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	2200      	movs	r2, #0
 800b4b4:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	2200      	movs	r2, #0
 800b4bc:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800b4c0:	6878      	ldr	r0, [r7, #4]
 800b4c2:	f001 f8be 	bl	800c642 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	791b      	ldrb	r3, [r3, #4]
 800b4ca:	4619      	mov	r1, r3
 800b4cc:	6878      	ldr	r0, [r7, #4]
 800b4ce:	f000 ff0b 	bl	800c2e8 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	795b      	ldrb	r3, [r3, #5]
 800b4d6:	4619      	mov	r1, r3
 800b4d8:	6878      	ldr	r0, [r7, #4]
 800b4da:	f000 ff05 	bl	800c2e8 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800b4de:	2300      	movs	r3, #0
}
 800b4e0:	4618      	mov	r0, r3
 800b4e2:	3708      	adds	r7, #8
 800b4e4:	46bd      	mov	sp, r7
 800b4e6:	bd80      	pop	{r7, pc}

0800b4e8 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800b4e8:	b580      	push	{r7, lr}
 800b4ea:	b086      	sub	sp, #24
 800b4ec:	af02      	add	r7, sp, #8
 800b4ee:	6078      	str	r0, [r7, #4]
 800b4f0:	460b      	mov	r3, r1
 800b4f2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800b4f4:	887b      	ldrh	r3, [r7, #2]
 800b4f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b4fa:	d901      	bls.n	800b500 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800b4fc:	2303      	movs	r3, #3
 800b4fe:	e01b      	b.n	800b538 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800b506:	887b      	ldrh	r3, [r7, #2]
 800b508:	9300      	str	r3, [sp, #0]
 800b50a:	4613      	mov	r3, r2
 800b50c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b510:	2100      	movs	r1, #0
 800b512:	6878      	ldr	r0, [r7, #4]
 800b514:	f000 f872 	bl	800b5fc <USBH_GetDescriptor>
 800b518:	4603      	mov	r3, r0
 800b51a:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800b51c:	7bfb      	ldrb	r3, [r7, #15]
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d109      	bne.n	800b536 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800b528:	887a      	ldrh	r2, [r7, #2]
 800b52a:	4619      	mov	r1, r3
 800b52c:	6878      	ldr	r0, [r7, #4]
 800b52e:	f000 f929 	bl	800b784 <USBH_ParseDevDesc>
 800b532:	4603      	mov	r3, r0
 800b534:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b536:	7bfb      	ldrb	r3, [r7, #15]
}
 800b538:	4618      	mov	r0, r3
 800b53a:	3710      	adds	r7, #16
 800b53c:	46bd      	mov	sp, r7
 800b53e:	bd80      	pop	{r7, pc}

0800b540 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800b540:	b580      	push	{r7, lr}
 800b542:	b086      	sub	sp, #24
 800b544:	af02      	add	r7, sp, #8
 800b546:	6078      	str	r0, [r7, #4]
 800b548:	460b      	mov	r3, r1
 800b54a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	331c      	adds	r3, #28
 800b550:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800b552:	887b      	ldrh	r3, [r7, #2]
 800b554:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b558:	d901      	bls.n	800b55e <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800b55a:	2303      	movs	r3, #3
 800b55c:	e016      	b.n	800b58c <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800b55e:	887b      	ldrh	r3, [r7, #2]
 800b560:	9300      	str	r3, [sp, #0]
 800b562:	68bb      	ldr	r3, [r7, #8]
 800b564:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b568:	2100      	movs	r1, #0
 800b56a:	6878      	ldr	r0, [r7, #4]
 800b56c:	f000 f846 	bl	800b5fc <USBH_GetDescriptor>
 800b570:	4603      	mov	r3, r0
 800b572:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800b574:	7bfb      	ldrb	r3, [r7, #15]
 800b576:	2b00      	cmp	r3, #0
 800b578:	d107      	bne.n	800b58a <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800b57a:	887b      	ldrh	r3, [r7, #2]
 800b57c:	461a      	mov	r2, r3
 800b57e:	68b9      	ldr	r1, [r7, #8]
 800b580:	6878      	ldr	r0, [r7, #4]
 800b582:	f000 f9af 	bl	800b8e4 <USBH_ParseCfgDesc>
 800b586:	4603      	mov	r3, r0
 800b588:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b58a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b58c:	4618      	mov	r0, r3
 800b58e:	3710      	adds	r7, #16
 800b590:	46bd      	mov	sp, r7
 800b592:	bd80      	pop	{r7, pc}

0800b594 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800b594:	b580      	push	{r7, lr}
 800b596:	b088      	sub	sp, #32
 800b598:	af02      	add	r7, sp, #8
 800b59a:	60f8      	str	r0, [r7, #12]
 800b59c:	607a      	str	r2, [r7, #4]
 800b59e:	461a      	mov	r2, r3
 800b5a0:	460b      	mov	r3, r1
 800b5a2:	72fb      	strb	r3, [r7, #11]
 800b5a4:	4613      	mov	r3, r2
 800b5a6:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800b5a8:	893b      	ldrh	r3, [r7, #8]
 800b5aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b5ae:	d802      	bhi.n	800b5b6 <USBH_Get_StringDesc+0x22>
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d101      	bne.n	800b5ba <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800b5b6:	2303      	movs	r3, #3
 800b5b8:	e01c      	b.n	800b5f4 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800b5ba:	7afb      	ldrb	r3, [r7, #11]
 800b5bc:	b29b      	uxth	r3, r3
 800b5be:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800b5c2:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800b5ca:	893b      	ldrh	r3, [r7, #8]
 800b5cc:	9300      	str	r3, [sp, #0]
 800b5ce:	460b      	mov	r3, r1
 800b5d0:	2100      	movs	r1, #0
 800b5d2:	68f8      	ldr	r0, [r7, #12]
 800b5d4:	f000 f812 	bl	800b5fc <USBH_GetDescriptor>
 800b5d8:	4603      	mov	r3, r0
 800b5da:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800b5dc:	7dfb      	ldrb	r3, [r7, #23]
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d107      	bne.n	800b5f2 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800b5e8:	893a      	ldrh	r2, [r7, #8]
 800b5ea:	6879      	ldr	r1, [r7, #4]
 800b5ec:	4618      	mov	r0, r3
 800b5ee:	f000 fb8d 	bl	800bd0c <USBH_ParseStringDesc>
  }

  return status;
 800b5f2:	7dfb      	ldrb	r3, [r7, #23]
}
 800b5f4:	4618      	mov	r0, r3
 800b5f6:	3718      	adds	r7, #24
 800b5f8:	46bd      	mov	sp, r7
 800b5fa:	bd80      	pop	{r7, pc}

0800b5fc <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800b5fc:	b580      	push	{r7, lr}
 800b5fe:	b084      	sub	sp, #16
 800b600:	af00      	add	r7, sp, #0
 800b602:	60f8      	str	r0, [r7, #12]
 800b604:	607b      	str	r3, [r7, #4]
 800b606:	460b      	mov	r3, r1
 800b608:	72fb      	strb	r3, [r7, #11]
 800b60a:	4613      	mov	r3, r2
 800b60c:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	789b      	ldrb	r3, [r3, #2]
 800b612:	2b01      	cmp	r3, #1
 800b614:	d11c      	bne.n	800b650 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800b616:	7afb      	ldrb	r3, [r7, #11]
 800b618:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800b61c:	b2da      	uxtb	r2, r3
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	2206      	movs	r2, #6
 800b626:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	893a      	ldrh	r2, [r7, #8]
 800b62c:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800b62e:	893b      	ldrh	r3, [r7, #8]
 800b630:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800b634:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b638:	d104      	bne.n	800b644 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	f240 4209 	movw	r2, #1033	@ 0x409
 800b640:	829a      	strh	r2, [r3, #20]
 800b642:	e002      	b.n	800b64a <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	2200      	movs	r2, #0
 800b648:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	8b3a      	ldrh	r2, [r7, #24]
 800b64e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800b650:	8b3b      	ldrh	r3, [r7, #24]
 800b652:	461a      	mov	r2, r3
 800b654:	6879      	ldr	r1, [r7, #4]
 800b656:	68f8      	ldr	r0, [r7, #12]
 800b658:	f000 fba5 	bl	800bda6 <USBH_CtlReq>
 800b65c:	4603      	mov	r3, r0
}
 800b65e:	4618      	mov	r0, r3
 800b660:	3710      	adds	r7, #16
 800b662:	46bd      	mov	sp, r7
 800b664:	bd80      	pop	{r7, pc}

0800b666 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800b666:	b580      	push	{r7, lr}
 800b668:	b082      	sub	sp, #8
 800b66a:	af00      	add	r7, sp, #0
 800b66c:	6078      	str	r0, [r7, #4]
 800b66e:	460b      	mov	r3, r1
 800b670:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	789b      	ldrb	r3, [r3, #2]
 800b676:	2b01      	cmp	r3, #1
 800b678:	d10f      	bne.n	800b69a <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	2200      	movs	r2, #0
 800b67e:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	2205      	movs	r2, #5
 800b684:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800b686:	78fb      	ldrb	r3, [r7, #3]
 800b688:	b29a      	uxth	r2, r3
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	2200      	movs	r2, #0
 800b692:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	2200      	movs	r2, #0
 800b698:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800b69a:	2200      	movs	r2, #0
 800b69c:	2100      	movs	r1, #0
 800b69e:	6878      	ldr	r0, [r7, #4]
 800b6a0:	f000 fb81 	bl	800bda6 <USBH_CtlReq>
 800b6a4:	4603      	mov	r3, r0
}
 800b6a6:	4618      	mov	r0, r3
 800b6a8:	3708      	adds	r7, #8
 800b6aa:	46bd      	mov	sp, r7
 800b6ac:	bd80      	pop	{r7, pc}

0800b6ae <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800b6ae:	b580      	push	{r7, lr}
 800b6b0:	b082      	sub	sp, #8
 800b6b2:	af00      	add	r7, sp, #0
 800b6b4:	6078      	str	r0, [r7, #4]
 800b6b6:	460b      	mov	r3, r1
 800b6b8:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	789b      	ldrb	r3, [r3, #2]
 800b6be:	2b01      	cmp	r3, #1
 800b6c0:	d10e      	bne.n	800b6e0 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	2200      	movs	r2, #0
 800b6c6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	2209      	movs	r2, #9
 800b6cc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	887a      	ldrh	r2, [r7, #2]
 800b6d2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	2200      	movs	r2, #0
 800b6d8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	2200      	movs	r2, #0
 800b6de:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800b6e0:	2200      	movs	r2, #0
 800b6e2:	2100      	movs	r1, #0
 800b6e4:	6878      	ldr	r0, [r7, #4]
 800b6e6:	f000 fb5e 	bl	800bda6 <USBH_CtlReq>
 800b6ea:	4603      	mov	r3, r0
}
 800b6ec:	4618      	mov	r0, r3
 800b6ee:	3708      	adds	r7, #8
 800b6f0:	46bd      	mov	sp, r7
 800b6f2:	bd80      	pop	{r7, pc}

0800b6f4 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800b6f4:	b580      	push	{r7, lr}
 800b6f6:	b082      	sub	sp, #8
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	6078      	str	r0, [r7, #4]
 800b6fc:	460b      	mov	r3, r1
 800b6fe:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	789b      	ldrb	r3, [r3, #2]
 800b704:	2b01      	cmp	r3, #1
 800b706:	d10f      	bne.n	800b728 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	2200      	movs	r2, #0
 800b70c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	2203      	movs	r2, #3
 800b712:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800b714:	78fb      	ldrb	r3, [r7, #3]
 800b716:	b29a      	uxth	r2, r3
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	2200      	movs	r2, #0
 800b720:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	2200      	movs	r2, #0
 800b726:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800b728:	2200      	movs	r2, #0
 800b72a:	2100      	movs	r1, #0
 800b72c:	6878      	ldr	r0, [r7, #4]
 800b72e:	f000 fb3a 	bl	800bda6 <USBH_CtlReq>
 800b732:	4603      	mov	r3, r0
}
 800b734:	4618      	mov	r0, r3
 800b736:	3708      	adds	r7, #8
 800b738:	46bd      	mov	sp, r7
 800b73a:	bd80      	pop	{r7, pc}

0800b73c <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800b73c:	b580      	push	{r7, lr}
 800b73e:	b082      	sub	sp, #8
 800b740:	af00      	add	r7, sp, #0
 800b742:	6078      	str	r0, [r7, #4]
 800b744:	460b      	mov	r3, r1
 800b746:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	789b      	ldrb	r3, [r3, #2]
 800b74c:	2b01      	cmp	r3, #1
 800b74e:	d10f      	bne.n	800b770 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	2202      	movs	r2, #2
 800b754:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	2201      	movs	r2, #1
 800b75a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	2200      	movs	r2, #0
 800b760:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800b762:	78fb      	ldrb	r3, [r7, #3]
 800b764:	b29a      	uxth	r2, r3
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	2200      	movs	r2, #0
 800b76e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800b770:	2200      	movs	r2, #0
 800b772:	2100      	movs	r1, #0
 800b774:	6878      	ldr	r0, [r7, #4]
 800b776:	f000 fb16 	bl	800bda6 <USBH_CtlReq>
 800b77a:	4603      	mov	r3, r0
}
 800b77c:	4618      	mov	r0, r3
 800b77e:	3708      	adds	r7, #8
 800b780:	46bd      	mov	sp, r7
 800b782:	bd80      	pop	{r7, pc}

0800b784 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800b784:	b480      	push	{r7}
 800b786:	b087      	sub	sp, #28
 800b788:	af00      	add	r7, sp, #0
 800b78a:	60f8      	str	r0, [r7, #12]
 800b78c:	60b9      	str	r1, [r7, #8]
 800b78e:	4613      	mov	r3, r2
 800b790:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800b798:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800b79a:	2300      	movs	r3, #0
 800b79c:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800b79e:	68bb      	ldr	r3, [r7, #8]
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d101      	bne.n	800b7a8 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800b7a4:	2302      	movs	r3, #2
 800b7a6:	e094      	b.n	800b8d2 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800b7a8:	68bb      	ldr	r3, [r7, #8]
 800b7aa:	781a      	ldrb	r2, [r3, #0]
 800b7ac:	693b      	ldr	r3, [r7, #16]
 800b7ae:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800b7b0:	68bb      	ldr	r3, [r7, #8]
 800b7b2:	785a      	ldrb	r2, [r3, #1]
 800b7b4:	693b      	ldr	r3, [r7, #16]
 800b7b6:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800b7b8:	68bb      	ldr	r3, [r7, #8]
 800b7ba:	3302      	adds	r3, #2
 800b7bc:	781b      	ldrb	r3, [r3, #0]
 800b7be:	461a      	mov	r2, r3
 800b7c0:	68bb      	ldr	r3, [r7, #8]
 800b7c2:	3303      	adds	r3, #3
 800b7c4:	781b      	ldrb	r3, [r3, #0]
 800b7c6:	021b      	lsls	r3, r3, #8
 800b7c8:	b29b      	uxth	r3, r3
 800b7ca:	4313      	orrs	r3, r2
 800b7cc:	b29a      	uxth	r2, r3
 800b7ce:	693b      	ldr	r3, [r7, #16]
 800b7d0:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800b7d2:	68bb      	ldr	r3, [r7, #8]
 800b7d4:	791a      	ldrb	r2, [r3, #4]
 800b7d6:	693b      	ldr	r3, [r7, #16]
 800b7d8:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800b7da:	68bb      	ldr	r3, [r7, #8]
 800b7dc:	795a      	ldrb	r2, [r3, #5]
 800b7de:	693b      	ldr	r3, [r7, #16]
 800b7e0:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800b7e2:	68bb      	ldr	r3, [r7, #8]
 800b7e4:	799a      	ldrb	r2, [r3, #6]
 800b7e6:	693b      	ldr	r3, [r7, #16]
 800b7e8:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800b7ea:	68bb      	ldr	r3, [r7, #8]
 800b7ec:	79da      	ldrb	r2, [r3, #7]
 800b7ee:	693b      	ldr	r3, [r7, #16]
 800b7f0:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d004      	beq.n	800b806 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800b802:	2b01      	cmp	r3, #1
 800b804:	d11b      	bne.n	800b83e <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800b806:	693b      	ldr	r3, [r7, #16]
 800b808:	79db      	ldrb	r3, [r3, #7]
 800b80a:	2b20      	cmp	r3, #32
 800b80c:	dc0f      	bgt.n	800b82e <USBH_ParseDevDesc+0xaa>
 800b80e:	2b08      	cmp	r3, #8
 800b810:	db0f      	blt.n	800b832 <USBH_ParseDevDesc+0xae>
 800b812:	3b08      	subs	r3, #8
 800b814:	4a32      	ldr	r2, [pc, #200]	@ (800b8e0 <USBH_ParseDevDesc+0x15c>)
 800b816:	fa22 f303 	lsr.w	r3, r2, r3
 800b81a:	f003 0301 	and.w	r3, r3, #1
 800b81e:	2b00      	cmp	r3, #0
 800b820:	bf14      	ite	ne
 800b822:	2301      	movne	r3, #1
 800b824:	2300      	moveq	r3, #0
 800b826:	b2db      	uxtb	r3, r3
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d106      	bne.n	800b83a <USBH_ParseDevDesc+0xb6>
 800b82c:	e001      	b.n	800b832 <USBH_ParseDevDesc+0xae>
 800b82e:	2b40      	cmp	r3, #64	@ 0x40
 800b830:	d003      	beq.n	800b83a <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800b832:	693b      	ldr	r3, [r7, #16]
 800b834:	2208      	movs	r2, #8
 800b836:	71da      	strb	r2, [r3, #7]
        break;
 800b838:	e000      	b.n	800b83c <USBH_ParseDevDesc+0xb8>
        break;
 800b83a:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800b83c:	e00e      	b.n	800b85c <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b844:	2b02      	cmp	r3, #2
 800b846:	d107      	bne.n	800b858 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800b848:	693b      	ldr	r3, [r7, #16]
 800b84a:	79db      	ldrb	r3, [r3, #7]
 800b84c:	2b08      	cmp	r3, #8
 800b84e:	d005      	beq.n	800b85c <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800b850:	693b      	ldr	r3, [r7, #16]
 800b852:	2208      	movs	r2, #8
 800b854:	71da      	strb	r2, [r3, #7]
 800b856:	e001      	b.n	800b85c <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800b858:	2303      	movs	r3, #3
 800b85a:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800b85c:	88fb      	ldrh	r3, [r7, #6]
 800b85e:	2b08      	cmp	r3, #8
 800b860:	d936      	bls.n	800b8d0 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800b862:	68bb      	ldr	r3, [r7, #8]
 800b864:	3308      	adds	r3, #8
 800b866:	781b      	ldrb	r3, [r3, #0]
 800b868:	461a      	mov	r2, r3
 800b86a:	68bb      	ldr	r3, [r7, #8]
 800b86c:	3309      	adds	r3, #9
 800b86e:	781b      	ldrb	r3, [r3, #0]
 800b870:	021b      	lsls	r3, r3, #8
 800b872:	b29b      	uxth	r3, r3
 800b874:	4313      	orrs	r3, r2
 800b876:	b29a      	uxth	r2, r3
 800b878:	693b      	ldr	r3, [r7, #16]
 800b87a:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800b87c:	68bb      	ldr	r3, [r7, #8]
 800b87e:	330a      	adds	r3, #10
 800b880:	781b      	ldrb	r3, [r3, #0]
 800b882:	461a      	mov	r2, r3
 800b884:	68bb      	ldr	r3, [r7, #8]
 800b886:	330b      	adds	r3, #11
 800b888:	781b      	ldrb	r3, [r3, #0]
 800b88a:	021b      	lsls	r3, r3, #8
 800b88c:	b29b      	uxth	r3, r3
 800b88e:	4313      	orrs	r3, r2
 800b890:	b29a      	uxth	r2, r3
 800b892:	693b      	ldr	r3, [r7, #16]
 800b894:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800b896:	68bb      	ldr	r3, [r7, #8]
 800b898:	330c      	adds	r3, #12
 800b89a:	781b      	ldrb	r3, [r3, #0]
 800b89c:	461a      	mov	r2, r3
 800b89e:	68bb      	ldr	r3, [r7, #8]
 800b8a0:	330d      	adds	r3, #13
 800b8a2:	781b      	ldrb	r3, [r3, #0]
 800b8a4:	021b      	lsls	r3, r3, #8
 800b8a6:	b29b      	uxth	r3, r3
 800b8a8:	4313      	orrs	r3, r2
 800b8aa:	b29a      	uxth	r2, r3
 800b8ac:	693b      	ldr	r3, [r7, #16]
 800b8ae:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800b8b0:	68bb      	ldr	r3, [r7, #8]
 800b8b2:	7b9a      	ldrb	r2, [r3, #14]
 800b8b4:	693b      	ldr	r3, [r7, #16]
 800b8b6:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800b8b8:	68bb      	ldr	r3, [r7, #8]
 800b8ba:	7bda      	ldrb	r2, [r3, #15]
 800b8bc:	693b      	ldr	r3, [r7, #16]
 800b8be:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800b8c0:	68bb      	ldr	r3, [r7, #8]
 800b8c2:	7c1a      	ldrb	r2, [r3, #16]
 800b8c4:	693b      	ldr	r3, [r7, #16]
 800b8c6:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800b8c8:	68bb      	ldr	r3, [r7, #8]
 800b8ca:	7c5a      	ldrb	r2, [r3, #17]
 800b8cc:	693b      	ldr	r3, [r7, #16]
 800b8ce:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800b8d0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b8d2:	4618      	mov	r0, r3
 800b8d4:	371c      	adds	r7, #28
 800b8d6:	46bd      	mov	sp, r7
 800b8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8dc:	4770      	bx	lr
 800b8de:	bf00      	nop
 800b8e0:	01000101 	.word	0x01000101

0800b8e4 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800b8e4:	b580      	push	{r7, lr}
 800b8e6:	b08c      	sub	sp, #48	@ 0x30
 800b8e8:	af00      	add	r7, sp, #0
 800b8ea:	60f8      	str	r0, [r7, #12]
 800b8ec:	60b9      	str	r1, [r7, #8]
 800b8ee:	4613      	mov	r3, r2
 800b8f0:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800b8f8:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800b8fa:	2300      	movs	r3, #0
 800b8fc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800b900:	2300      	movs	r3, #0
 800b902:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800b906:	2300      	movs	r3, #0
 800b908:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 800b90c:	68bb      	ldr	r3, [r7, #8]
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d101      	bne.n	800b916 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800b912:	2302      	movs	r3, #2
 800b914:	e0da      	b.n	800bacc <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800b916:	68bb      	ldr	r3, [r7, #8]
 800b918:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800b91a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b91c:	781b      	ldrb	r3, [r3, #0]
 800b91e:	2b09      	cmp	r3, #9
 800b920:	d002      	beq.n	800b928 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800b922:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b924:	2209      	movs	r2, #9
 800b926:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800b928:	68bb      	ldr	r3, [r7, #8]
 800b92a:	781a      	ldrb	r2, [r3, #0]
 800b92c:	6a3b      	ldr	r3, [r7, #32]
 800b92e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800b930:	68bb      	ldr	r3, [r7, #8]
 800b932:	785a      	ldrb	r2, [r3, #1]
 800b934:	6a3b      	ldr	r3, [r7, #32]
 800b936:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800b938:	68bb      	ldr	r3, [r7, #8]
 800b93a:	3302      	adds	r3, #2
 800b93c:	781b      	ldrb	r3, [r3, #0]
 800b93e:	461a      	mov	r2, r3
 800b940:	68bb      	ldr	r3, [r7, #8]
 800b942:	3303      	adds	r3, #3
 800b944:	781b      	ldrb	r3, [r3, #0]
 800b946:	021b      	lsls	r3, r3, #8
 800b948:	b29b      	uxth	r3, r3
 800b94a:	4313      	orrs	r3, r2
 800b94c:	b29b      	uxth	r3, r3
 800b94e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b952:	bf28      	it	cs
 800b954:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800b958:	b29a      	uxth	r2, r3
 800b95a:	6a3b      	ldr	r3, [r7, #32]
 800b95c:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800b95e:	68bb      	ldr	r3, [r7, #8]
 800b960:	791a      	ldrb	r2, [r3, #4]
 800b962:	6a3b      	ldr	r3, [r7, #32]
 800b964:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800b966:	68bb      	ldr	r3, [r7, #8]
 800b968:	795a      	ldrb	r2, [r3, #5]
 800b96a:	6a3b      	ldr	r3, [r7, #32]
 800b96c:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800b96e:	68bb      	ldr	r3, [r7, #8]
 800b970:	799a      	ldrb	r2, [r3, #6]
 800b972:	6a3b      	ldr	r3, [r7, #32]
 800b974:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800b976:	68bb      	ldr	r3, [r7, #8]
 800b978:	79da      	ldrb	r2, [r3, #7]
 800b97a:	6a3b      	ldr	r3, [r7, #32]
 800b97c:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800b97e:	68bb      	ldr	r3, [r7, #8]
 800b980:	7a1a      	ldrb	r2, [r3, #8]
 800b982:	6a3b      	ldr	r3, [r7, #32]
 800b984:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800b986:	88fb      	ldrh	r3, [r7, #6]
 800b988:	2b09      	cmp	r3, #9
 800b98a:	f240 809d 	bls.w	800bac8 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 800b98e:	2309      	movs	r3, #9
 800b990:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800b992:	2300      	movs	r3, #0
 800b994:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b996:	e081      	b.n	800ba9c <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b998:	f107 0316 	add.w	r3, r7, #22
 800b99c:	4619      	mov	r1, r3
 800b99e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b9a0:	f000 f9e7 	bl	800bd72 <USBH_GetNextDesc>
 800b9a4:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800b9a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9a8:	785b      	ldrb	r3, [r3, #1]
 800b9aa:	2b04      	cmp	r3, #4
 800b9ac:	d176      	bne.n	800ba9c <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800b9ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9b0:	781b      	ldrb	r3, [r3, #0]
 800b9b2:	2b09      	cmp	r3, #9
 800b9b4:	d002      	beq.n	800b9bc <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800b9b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9b8:	2209      	movs	r2, #9
 800b9ba:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800b9bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b9c0:	221a      	movs	r2, #26
 800b9c2:	fb02 f303 	mul.w	r3, r2, r3
 800b9c6:	3308      	adds	r3, #8
 800b9c8:	6a3a      	ldr	r2, [r7, #32]
 800b9ca:	4413      	add	r3, r2
 800b9cc:	3302      	adds	r3, #2
 800b9ce:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800b9d0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b9d2:	69f8      	ldr	r0, [r7, #28]
 800b9d4:	f000 f87e 	bl	800bad4 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800b9d8:	2300      	movs	r3, #0
 800b9da:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800b9de:	2300      	movs	r3, #0
 800b9e0:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b9e2:	e043      	b.n	800ba6c <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b9e4:	f107 0316 	add.w	r3, r7, #22
 800b9e8:	4619      	mov	r1, r3
 800b9ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b9ec:	f000 f9c1 	bl	800bd72 <USBH_GetNextDesc>
 800b9f0:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b9f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9f4:	785b      	ldrb	r3, [r3, #1]
 800b9f6:	2b05      	cmp	r3, #5
 800b9f8:	d138      	bne.n	800ba6c <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800b9fa:	69fb      	ldr	r3, [r7, #28]
 800b9fc:	795b      	ldrb	r3, [r3, #5]
 800b9fe:	2b01      	cmp	r3, #1
 800ba00:	d113      	bne.n	800ba2a <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800ba02:	69fb      	ldr	r3, [r7, #28]
 800ba04:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800ba06:	2b02      	cmp	r3, #2
 800ba08:	d003      	beq.n	800ba12 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800ba0a:	69fb      	ldr	r3, [r7, #28]
 800ba0c:	799b      	ldrb	r3, [r3, #6]
 800ba0e:	2b03      	cmp	r3, #3
 800ba10:	d10b      	bne.n	800ba2a <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800ba12:	69fb      	ldr	r3, [r7, #28]
 800ba14:	79db      	ldrb	r3, [r3, #7]
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d10b      	bne.n	800ba32 <USBH_ParseCfgDesc+0x14e>
 800ba1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba1c:	781b      	ldrb	r3, [r3, #0]
 800ba1e:	2b09      	cmp	r3, #9
 800ba20:	d007      	beq.n	800ba32 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800ba22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba24:	2209      	movs	r2, #9
 800ba26:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800ba28:	e003      	b.n	800ba32 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800ba2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba2c:	2207      	movs	r2, #7
 800ba2e:	701a      	strb	r2, [r3, #0]
 800ba30:	e000      	b.n	800ba34 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800ba32:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800ba34:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ba38:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800ba3c:	3201      	adds	r2, #1
 800ba3e:	00d2      	lsls	r2, r2, #3
 800ba40:	211a      	movs	r1, #26
 800ba42:	fb01 f303 	mul.w	r3, r1, r3
 800ba46:	4413      	add	r3, r2
 800ba48:	3308      	adds	r3, #8
 800ba4a:	6a3a      	ldr	r2, [r7, #32]
 800ba4c:	4413      	add	r3, r2
 800ba4e:	3304      	adds	r3, #4
 800ba50:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800ba52:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ba54:	69b9      	ldr	r1, [r7, #24]
 800ba56:	68f8      	ldr	r0, [r7, #12]
 800ba58:	f000 f870 	bl	800bb3c <USBH_ParseEPDesc>
 800ba5c:	4603      	mov	r3, r0
 800ba5e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800ba62:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ba66:	3301      	adds	r3, #1
 800ba68:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800ba6c:	69fb      	ldr	r3, [r7, #28]
 800ba6e:	791b      	ldrb	r3, [r3, #4]
 800ba70:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800ba74:	429a      	cmp	r2, r3
 800ba76:	d204      	bcs.n	800ba82 <USBH_ParseCfgDesc+0x19e>
 800ba78:	6a3b      	ldr	r3, [r7, #32]
 800ba7a:	885a      	ldrh	r2, [r3, #2]
 800ba7c:	8afb      	ldrh	r3, [r7, #22]
 800ba7e:	429a      	cmp	r2, r3
 800ba80:	d8b0      	bhi.n	800b9e4 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800ba82:	69fb      	ldr	r3, [r7, #28]
 800ba84:	791b      	ldrb	r3, [r3, #4]
 800ba86:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800ba8a:	429a      	cmp	r2, r3
 800ba8c:	d201      	bcs.n	800ba92 <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 800ba8e:	2303      	movs	r3, #3
 800ba90:	e01c      	b.n	800bacc <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 800ba92:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ba96:	3301      	adds	r3, #1
 800ba98:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800ba9c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800baa0:	2b01      	cmp	r3, #1
 800baa2:	d805      	bhi.n	800bab0 <USBH_ParseCfgDesc+0x1cc>
 800baa4:	6a3b      	ldr	r3, [r7, #32]
 800baa6:	885a      	ldrh	r2, [r3, #2]
 800baa8:	8afb      	ldrh	r3, [r7, #22]
 800baaa:	429a      	cmp	r2, r3
 800baac:	f63f af74 	bhi.w	800b998 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800bab0:	6a3b      	ldr	r3, [r7, #32]
 800bab2:	791b      	ldrb	r3, [r3, #4]
 800bab4:	2b02      	cmp	r3, #2
 800bab6:	bf28      	it	cs
 800bab8:	2302      	movcs	r3, #2
 800baba:	b2db      	uxtb	r3, r3
 800babc:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800bac0:	429a      	cmp	r2, r3
 800bac2:	d201      	bcs.n	800bac8 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 800bac4:	2303      	movs	r3, #3
 800bac6:	e001      	b.n	800bacc <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 800bac8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800bacc:	4618      	mov	r0, r3
 800bace:	3730      	adds	r7, #48	@ 0x30
 800bad0:	46bd      	mov	sp, r7
 800bad2:	bd80      	pop	{r7, pc}

0800bad4 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800bad4:	b480      	push	{r7}
 800bad6:	b083      	sub	sp, #12
 800bad8:	af00      	add	r7, sp, #0
 800bada:	6078      	str	r0, [r7, #4]
 800badc:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800bade:	683b      	ldr	r3, [r7, #0]
 800bae0:	781a      	ldrb	r2, [r3, #0]
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800bae6:	683b      	ldr	r3, [r7, #0]
 800bae8:	785a      	ldrb	r2, [r3, #1]
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800baee:	683b      	ldr	r3, [r7, #0]
 800baf0:	789a      	ldrb	r2, [r3, #2]
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800baf6:	683b      	ldr	r3, [r7, #0]
 800baf8:	78da      	ldrb	r2, [r3, #3]
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 800bafe:	683b      	ldr	r3, [r7, #0]
 800bb00:	3304      	adds	r3, #4
 800bb02:	781b      	ldrb	r3, [r3, #0]
 800bb04:	2b02      	cmp	r3, #2
 800bb06:	bf28      	it	cs
 800bb08:	2302      	movcs	r3, #2
 800bb0a:	b2da      	uxtb	r2, r3
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800bb10:	683b      	ldr	r3, [r7, #0]
 800bb12:	795a      	ldrb	r2, [r3, #5]
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800bb18:	683b      	ldr	r3, [r7, #0]
 800bb1a:	799a      	ldrb	r2, [r3, #6]
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800bb20:	683b      	ldr	r3, [r7, #0]
 800bb22:	79da      	ldrb	r2, [r3, #7]
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800bb28:	683b      	ldr	r3, [r7, #0]
 800bb2a:	7a1a      	ldrb	r2, [r3, #8]
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	721a      	strb	r2, [r3, #8]
}
 800bb30:	bf00      	nop
 800bb32:	370c      	adds	r7, #12
 800bb34:	46bd      	mov	sp, r7
 800bb36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb3a:	4770      	bx	lr

0800bb3c <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800bb3c:	b480      	push	{r7}
 800bb3e:	b087      	sub	sp, #28
 800bb40:	af00      	add	r7, sp, #0
 800bb42:	60f8      	str	r0, [r7, #12]
 800bb44:	60b9      	str	r1, [r7, #8]
 800bb46:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800bb48:	2300      	movs	r3, #0
 800bb4a:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	781a      	ldrb	r2, [r3, #0]
 800bb50:	68bb      	ldr	r3, [r7, #8]
 800bb52:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	785a      	ldrb	r2, [r3, #1]
 800bb58:	68bb      	ldr	r3, [r7, #8]
 800bb5a:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	789a      	ldrb	r2, [r3, #2]
 800bb60:	68bb      	ldr	r3, [r7, #8]
 800bb62:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	78da      	ldrb	r2, [r3, #3]
 800bb68:	68bb      	ldr	r3, [r7, #8]
 800bb6a:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	3304      	adds	r3, #4
 800bb70:	781b      	ldrb	r3, [r3, #0]
 800bb72:	461a      	mov	r2, r3
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	3305      	adds	r3, #5
 800bb78:	781b      	ldrb	r3, [r3, #0]
 800bb7a:	021b      	lsls	r3, r3, #8
 800bb7c:	b29b      	uxth	r3, r3
 800bb7e:	4313      	orrs	r3, r2
 800bb80:	b29a      	uxth	r2, r3
 800bb82:	68bb      	ldr	r3, [r7, #8]
 800bb84:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	799a      	ldrb	r2, [r3, #6]
 800bb8a:	68bb      	ldr	r3, [r7, #8]
 800bb8c:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800bb8e:	68bb      	ldr	r3, [r7, #8]
 800bb90:	889b      	ldrh	r3, [r3, #4]
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d009      	beq.n	800bbaa <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800bb96:	68bb      	ldr	r3, [r7, #8]
 800bb98:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800bb9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bb9e:	d804      	bhi.n	800bbaa <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800bba0:	68bb      	ldr	r3, [r7, #8]
 800bba2:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800bba4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bba8:	d901      	bls.n	800bbae <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 800bbaa:	2303      	movs	r3, #3
 800bbac:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d136      	bne.n	800bc26 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800bbb8:	68bb      	ldr	r3, [r7, #8]
 800bbba:	78db      	ldrb	r3, [r3, #3]
 800bbbc:	f003 0303 	and.w	r3, r3, #3
 800bbc0:	2b02      	cmp	r3, #2
 800bbc2:	d108      	bne.n	800bbd6 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800bbc4:	68bb      	ldr	r3, [r7, #8]
 800bbc6:	889b      	ldrh	r3, [r3, #4]
 800bbc8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bbcc:	f240 8097 	bls.w	800bcfe <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800bbd0:	2303      	movs	r3, #3
 800bbd2:	75fb      	strb	r3, [r7, #23]
 800bbd4:	e093      	b.n	800bcfe <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800bbd6:	68bb      	ldr	r3, [r7, #8]
 800bbd8:	78db      	ldrb	r3, [r3, #3]
 800bbda:	f003 0303 	and.w	r3, r3, #3
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d107      	bne.n	800bbf2 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800bbe2:	68bb      	ldr	r3, [r7, #8]
 800bbe4:	889b      	ldrh	r3, [r3, #4]
 800bbe6:	2b40      	cmp	r3, #64	@ 0x40
 800bbe8:	f240 8089 	bls.w	800bcfe <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800bbec:	2303      	movs	r3, #3
 800bbee:	75fb      	strb	r3, [r7, #23]
 800bbf0:	e085      	b.n	800bcfe <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800bbf2:	68bb      	ldr	r3, [r7, #8]
 800bbf4:	78db      	ldrb	r3, [r3, #3]
 800bbf6:	f003 0303 	and.w	r3, r3, #3
 800bbfa:	2b01      	cmp	r3, #1
 800bbfc:	d005      	beq.n	800bc0a <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800bbfe:	68bb      	ldr	r3, [r7, #8]
 800bc00:	78db      	ldrb	r3, [r3, #3]
 800bc02:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800bc06:	2b03      	cmp	r3, #3
 800bc08:	d10a      	bne.n	800bc20 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800bc0a:	68bb      	ldr	r3, [r7, #8]
 800bc0c:	799b      	ldrb	r3, [r3, #6]
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d003      	beq.n	800bc1a <USBH_ParseEPDesc+0xde>
 800bc12:	68bb      	ldr	r3, [r7, #8]
 800bc14:	799b      	ldrb	r3, [r3, #6]
 800bc16:	2b10      	cmp	r3, #16
 800bc18:	d970      	bls.n	800bcfc <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 800bc1a:	2303      	movs	r3, #3
 800bc1c:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800bc1e:	e06d      	b.n	800bcfc <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800bc20:	2303      	movs	r3, #3
 800bc22:	75fb      	strb	r3, [r7, #23]
 800bc24:	e06b      	b.n	800bcfe <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800bc2c:	2b01      	cmp	r3, #1
 800bc2e:	d13c      	bne.n	800bcaa <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800bc30:	68bb      	ldr	r3, [r7, #8]
 800bc32:	78db      	ldrb	r3, [r3, #3]
 800bc34:	f003 0303 	and.w	r3, r3, #3
 800bc38:	2b02      	cmp	r3, #2
 800bc3a:	d005      	beq.n	800bc48 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800bc3c:	68bb      	ldr	r3, [r7, #8]
 800bc3e:	78db      	ldrb	r3, [r3, #3]
 800bc40:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d106      	bne.n	800bc56 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800bc48:	68bb      	ldr	r3, [r7, #8]
 800bc4a:	889b      	ldrh	r3, [r3, #4]
 800bc4c:	2b40      	cmp	r3, #64	@ 0x40
 800bc4e:	d956      	bls.n	800bcfe <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800bc50:	2303      	movs	r3, #3
 800bc52:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800bc54:	e053      	b.n	800bcfe <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800bc56:	68bb      	ldr	r3, [r7, #8]
 800bc58:	78db      	ldrb	r3, [r3, #3]
 800bc5a:	f003 0303 	and.w	r3, r3, #3
 800bc5e:	2b01      	cmp	r3, #1
 800bc60:	d10e      	bne.n	800bc80 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800bc62:	68bb      	ldr	r3, [r7, #8]
 800bc64:	799b      	ldrb	r3, [r3, #6]
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d007      	beq.n	800bc7a <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 800bc6a:	68bb      	ldr	r3, [r7, #8]
 800bc6c:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800bc6e:	2b10      	cmp	r3, #16
 800bc70:	d803      	bhi.n	800bc7a <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800bc72:	68bb      	ldr	r3, [r7, #8]
 800bc74:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800bc76:	2b40      	cmp	r3, #64	@ 0x40
 800bc78:	d941      	bls.n	800bcfe <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800bc7a:	2303      	movs	r3, #3
 800bc7c:	75fb      	strb	r3, [r7, #23]
 800bc7e:	e03e      	b.n	800bcfe <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800bc80:	68bb      	ldr	r3, [r7, #8]
 800bc82:	78db      	ldrb	r3, [r3, #3]
 800bc84:	f003 0303 	and.w	r3, r3, #3
 800bc88:	2b03      	cmp	r3, #3
 800bc8a:	d10b      	bne.n	800bca4 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800bc8c:	68bb      	ldr	r3, [r7, #8]
 800bc8e:	799b      	ldrb	r3, [r3, #6]
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d004      	beq.n	800bc9e <USBH_ParseEPDesc+0x162>
 800bc94:	68bb      	ldr	r3, [r7, #8]
 800bc96:	889b      	ldrh	r3, [r3, #4]
 800bc98:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bc9c:	d32f      	bcc.n	800bcfe <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800bc9e:	2303      	movs	r3, #3
 800bca0:	75fb      	strb	r3, [r7, #23]
 800bca2:	e02c      	b.n	800bcfe <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800bca4:	2303      	movs	r3, #3
 800bca6:	75fb      	strb	r3, [r7, #23]
 800bca8:	e029      	b.n	800bcfe <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800bcb0:	2b02      	cmp	r3, #2
 800bcb2:	d120      	bne.n	800bcf6 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800bcb4:	68bb      	ldr	r3, [r7, #8]
 800bcb6:	78db      	ldrb	r3, [r3, #3]
 800bcb8:	f003 0303 	and.w	r3, r3, #3
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d106      	bne.n	800bcce <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800bcc0:	68bb      	ldr	r3, [r7, #8]
 800bcc2:	889b      	ldrh	r3, [r3, #4]
 800bcc4:	2b08      	cmp	r3, #8
 800bcc6:	d01a      	beq.n	800bcfe <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800bcc8:	2303      	movs	r3, #3
 800bcca:	75fb      	strb	r3, [r7, #23]
 800bccc:	e017      	b.n	800bcfe <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800bcce:	68bb      	ldr	r3, [r7, #8]
 800bcd0:	78db      	ldrb	r3, [r3, #3]
 800bcd2:	f003 0303 	and.w	r3, r3, #3
 800bcd6:	2b03      	cmp	r3, #3
 800bcd8:	d10a      	bne.n	800bcf0 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800bcda:	68bb      	ldr	r3, [r7, #8]
 800bcdc:	799b      	ldrb	r3, [r3, #6]
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d003      	beq.n	800bcea <USBH_ParseEPDesc+0x1ae>
 800bce2:	68bb      	ldr	r3, [r7, #8]
 800bce4:	889b      	ldrh	r3, [r3, #4]
 800bce6:	2b08      	cmp	r3, #8
 800bce8:	d909      	bls.n	800bcfe <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800bcea:	2303      	movs	r3, #3
 800bcec:	75fb      	strb	r3, [r7, #23]
 800bcee:	e006      	b.n	800bcfe <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800bcf0:	2303      	movs	r3, #3
 800bcf2:	75fb      	strb	r3, [r7, #23]
 800bcf4:	e003      	b.n	800bcfe <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800bcf6:	2303      	movs	r3, #3
 800bcf8:	75fb      	strb	r3, [r7, #23]
 800bcfa:	e000      	b.n	800bcfe <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800bcfc:	bf00      	nop
  }

  return status;
 800bcfe:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd00:	4618      	mov	r0, r3
 800bd02:	371c      	adds	r7, #28
 800bd04:	46bd      	mov	sp, r7
 800bd06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd0a:	4770      	bx	lr

0800bd0c <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800bd0c:	b480      	push	{r7}
 800bd0e:	b087      	sub	sp, #28
 800bd10:	af00      	add	r7, sp, #0
 800bd12:	60f8      	str	r0, [r7, #12]
 800bd14:	60b9      	str	r1, [r7, #8]
 800bd16:	4613      	mov	r3, r2
 800bd18:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	3301      	adds	r3, #1
 800bd1e:	781b      	ldrb	r3, [r3, #0]
 800bd20:	2b03      	cmp	r3, #3
 800bd22:	d120      	bne.n	800bd66 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	781b      	ldrb	r3, [r3, #0]
 800bd28:	1e9a      	subs	r2, r3, #2
 800bd2a:	88fb      	ldrh	r3, [r7, #6]
 800bd2c:	4293      	cmp	r3, r2
 800bd2e:	bf28      	it	cs
 800bd30:	4613      	movcs	r3, r2
 800bd32:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	3302      	adds	r3, #2
 800bd38:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800bd3a:	2300      	movs	r3, #0
 800bd3c:	82fb      	strh	r3, [r7, #22]
 800bd3e:	e00b      	b.n	800bd58 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800bd40:	8afb      	ldrh	r3, [r7, #22]
 800bd42:	68fa      	ldr	r2, [r7, #12]
 800bd44:	4413      	add	r3, r2
 800bd46:	781a      	ldrb	r2, [r3, #0]
 800bd48:	68bb      	ldr	r3, [r7, #8]
 800bd4a:	701a      	strb	r2, [r3, #0]
      pdest++;
 800bd4c:	68bb      	ldr	r3, [r7, #8]
 800bd4e:	3301      	adds	r3, #1
 800bd50:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800bd52:	8afb      	ldrh	r3, [r7, #22]
 800bd54:	3302      	adds	r3, #2
 800bd56:	82fb      	strh	r3, [r7, #22]
 800bd58:	8afa      	ldrh	r2, [r7, #22]
 800bd5a:	8abb      	ldrh	r3, [r7, #20]
 800bd5c:	429a      	cmp	r2, r3
 800bd5e:	d3ef      	bcc.n	800bd40 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800bd60:	68bb      	ldr	r3, [r7, #8]
 800bd62:	2200      	movs	r2, #0
 800bd64:	701a      	strb	r2, [r3, #0]
  }
}
 800bd66:	bf00      	nop
 800bd68:	371c      	adds	r7, #28
 800bd6a:	46bd      	mov	sp, r7
 800bd6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd70:	4770      	bx	lr

0800bd72 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800bd72:	b480      	push	{r7}
 800bd74:	b085      	sub	sp, #20
 800bd76:	af00      	add	r7, sp, #0
 800bd78:	6078      	str	r0, [r7, #4]
 800bd7a:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800bd7c:	683b      	ldr	r3, [r7, #0]
 800bd7e:	881b      	ldrh	r3, [r3, #0]
 800bd80:	687a      	ldr	r2, [r7, #4]
 800bd82:	7812      	ldrb	r2, [r2, #0]
 800bd84:	4413      	add	r3, r2
 800bd86:	b29a      	uxth	r2, r3
 800bd88:	683b      	ldr	r3, [r7, #0]
 800bd8a:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	781b      	ldrb	r3, [r3, #0]
 800bd90:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	4413      	add	r3, r2
 800bd96:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800bd98:	68fb      	ldr	r3, [r7, #12]
}
 800bd9a:	4618      	mov	r0, r3
 800bd9c:	3714      	adds	r7, #20
 800bd9e:	46bd      	mov	sp, r7
 800bda0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda4:	4770      	bx	lr

0800bda6 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800bda6:	b580      	push	{r7, lr}
 800bda8:	b086      	sub	sp, #24
 800bdaa:	af00      	add	r7, sp, #0
 800bdac:	60f8      	str	r0, [r7, #12]
 800bdae:	60b9      	str	r1, [r7, #8]
 800bdb0:	4613      	mov	r3, r2
 800bdb2:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800bdb4:	2301      	movs	r3, #1
 800bdb6:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	789b      	ldrb	r3, [r3, #2]
 800bdbc:	2b01      	cmp	r3, #1
 800bdbe:	d002      	beq.n	800bdc6 <USBH_CtlReq+0x20>
 800bdc0:	2b02      	cmp	r3, #2
 800bdc2:	d00f      	beq.n	800bde4 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800bdc4:	e027      	b.n	800be16 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	68ba      	ldr	r2, [r7, #8]
 800bdca:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	88fa      	ldrh	r2, [r7, #6]
 800bdd0:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	2201      	movs	r2, #1
 800bdd6:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	2202      	movs	r2, #2
 800bddc:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800bdde:	2301      	movs	r3, #1
 800bde0:	75fb      	strb	r3, [r7, #23]
      break;
 800bde2:	e018      	b.n	800be16 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800bde4:	68f8      	ldr	r0, [r7, #12]
 800bde6:	f000 f81b 	bl	800be20 <USBH_HandleControl>
 800bdea:	4603      	mov	r3, r0
 800bdec:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800bdee:	7dfb      	ldrb	r3, [r7, #23]
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d002      	beq.n	800bdfa <USBH_CtlReq+0x54>
 800bdf4:	7dfb      	ldrb	r3, [r7, #23]
 800bdf6:	2b03      	cmp	r3, #3
 800bdf8:	d106      	bne.n	800be08 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	2201      	movs	r2, #1
 800bdfe:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	2200      	movs	r2, #0
 800be04:	761a      	strb	r2, [r3, #24]
      break;
 800be06:	e005      	b.n	800be14 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800be08:	7dfb      	ldrb	r3, [r7, #23]
 800be0a:	2b02      	cmp	r3, #2
 800be0c:	d102      	bne.n	800be14 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	2201      	movs	r2, #1
 800be12:	709a      	strb	r2, [r3, #2]
      break;
 800be14:	bf00      	nop
  }
  return status;
 800be16:	7dfb      	ldrb	r3, [r7, #23]
}
 800be18:	4618      	mov	r0, r3
 800be1a:	3718      	adds	r7, #24
 800be1c:	46bd      	mov	sp, r7
 800be1e:	bd80      	pop	{r7, pc}

0800be20 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800be20:	b580      	push	{r7, lr}
 800be22:	b086      	sub	sp, #24
 800be24:	af02      	add	r7, sp, #8
 800be26:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800be28:	2301      	movs	r3, #1
 800be2a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800be2c:	2300      	movs	r3, #0
 800be2e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	7e1b      	ldrb	r3, [r3, #24]
 800be34:	3b01      	subs	r3, #1
 800be36:	2b0a      	cmp	r3, #10
 800be38:	f200 8156 	bhi.w	800c0e8 <USBH_HandleControl+0x2c8>
 800be3c:	a201      	add	r2, pc, #4	@ (adr r2, 800be44 <USBH_HandleControl+0x24>)
 800be3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be42:	bf00      	nop
 800be44:	0800be71 	.word	0x0800be71
 800be48:	0800be8b 	.word	0x0800be8b
 800be4c:	0800bef5 	.word	0x0800bef5
 800be50:	0800bf1b 	.word	0x0800bf1b
 800be54:	0800bf53 	.word	0x0800bf53
 800be58:	0800bf7d 	.word	0x0800bf7d
 800be5c:	0800bfcf 	.word	0x0800bfcf
 800be60:	0800bff1 	.word	0x0800bff1
 800be64:	0800c02d 	.word	0x0800c02d
 800be68:	0800c053 	.word	0x0800c053
 800be6c:	0800c091 	.word	0x0800c091
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	f103 0110 	add.w	r1, r3, #16
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	795b      	ldrb	r3, [r3, #5]
 800be7a:	461a      	mov	r2, r3
 800be7c:	6878      	ldr	r0, [r7, #4]
 800be7e:	f000 f943 	bl	800c108 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	2202      	movs	r2, #2
 800be86:	761a      	strb	r2, [r3, #24]
      break;
 800be88:	e139      	b.n	800c0fe <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	795b      	ldrb	r3, [r3, #5]
 800be8e:	4619      	mov	r1, r3
 800be90:	6878      	ldr	r0, [r7, #4]
 800be92:	f000 fcc5 	bl	800c820 <USBH_LL_GetURBState>
 800be96:	4603      	mov	r3, r0
 800be98:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800be9a:	7bbb      	ldrb	r3, [r7, #14]
 800be9c:	2b01      	cmp	r3, #1
 800be9e:	d11e      	bne.n	800bede <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	7c1b      	ldrb	r3, [r3, #16]
 800bea4:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800bea8:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	8adb      	ldrh	r3, [r3, #22]
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d00a      	beq.n	800bec8 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800beb2:	7b7b      	ldrb	r3, [r7, #13]
 800beb4:	2b80      	cmp	r3, #128	@ 0x80
 800beb6:	d103      	bne.n	800bec0 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	2203      	movs	r2, #3
 800bebc:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800bebe:	e115      	b.n	800c0ec <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	2205      	movs	r2, #5
 800bec4:	761a      	strb	r2, [r3, #24]
      break;
 800bec6:	e111      	b.n	800c0ec <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800bec8:	7b7b      	ldrb	r3, [r7, #13]
 800beca:	2b80      	cmp	r3, #128	@ 0x80
 800becc:	d103      	bne.n	800bed6 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	2209      	movs	r2, #9
 800bed2:	761a      	strb	r2, [r3, #24]
      break;
 800bed4:	e10a      	b.n	800c0ec <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	2207      	movs	r2, #7
 800beda:	761a      	strb	r2, [r3, #24]
      break;
 800bedc:	e106      	b.n	800c0ec <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800bede:	7bbb      	ldrb	r3, [r7, #14]
 800bee0:	2b04      	cmp	r3, #4
 800bee2:	d003      	beq.n	800beec <USBH_HandleControl+0xcc>
 800bee4:	7bbb      	ldrb	r3, [r7, #14]
 800bee6:	2b02      	cmp	r3, #2
 800bee8:	f040 8100 	bne.w	800c0ec <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	220b      	movs	r2, #11
 800bef0:	761a      	strb	r2, [r3, #24]
      break;
 800bef2:	e0fb      	b.n	800c0ec <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800befa:	b29a      	uxth	r2, r3
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	6899      	ldr	r1, [r3, #8]
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	899a      	ldrh	r2, [r3, #12]
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	791b      	ldrb	r3, [r3, #4]
 800bf0c:	6878      	ldr	r0, [r7, #4]
 800bf0e:	f000 f93a 	bl	800c186 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	2204      	movs	r2, #4
 800bf16:	761a      	strb	r2, [r3, #24]
      break;
 800bf18:	e0f1      	b.n	800c0fe <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	791b      	ldrb	r3, [r3, #4]
 800bf1e:	4619      	mov	r1, r3
 800bf20:	6878      	ldr	r0, [r7, #4]
 800bf22:	f000 fc7d 	bl	800c820 <USBH_LL_GetURBState>
 800bf26:	4603      	mov	r3, r0
 800bf28:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800bf2a:	7bbb      	ldrb	r3, [r7, #14]
 800bf2c:	2b01      	cmp	r3, #1
 800bf2e:	d102      	bne.n	800bf36 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	2209      	movs	r2, #9
 800bf34:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800bf36:	7bbb      	ldrb	r3, [r7, #14]
 800bf38:	2b05      	cmp	r3, #5
 800bf3a:	d102      	bne.n	800bf42 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800bf3c:	2303      	movs	r3, #3
 800bf3e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800bf40:	e0d6      	b.n	800c0f0 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800bf42:	7bbb      	ldrb	r3, [r7, #14]
 800bf44:	2b04      	cmp	r3, #4
 800bf46:	f040 80d3 	bne.w	800c0f0 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	220b      	movs	r2, #11
 800bf4e:	761a      	strb	r2, [r3, #24]
      break;
 800bf50:	e0ce      	b.n	800c0f0 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	6899      	ldr	r1, [r3, #8]
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	899a      	ldrh	r2, [r3, #12]
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	795b      	ldrb	r3, [r3, #5]
 800bf5e:	2001      	movs	r0, #1
 800bf60:	9000      	str	r0, [sp, #0]
 800bf62:	6878      	ldr	r0, [r7, #4]
 800bf64:	f000 f8ea 	bl	800c13c <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800bf6e:	b29a      	uxth	r2, r3
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	2206      	movs	r2, #6
 800bf78:	761a      	strb	r2, [r3, #24]
      break;
 800bf7a:	e0c0      	b.n	800c0fe <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	795b      	ldrb	r3, [r3, #5]
 800bf80:	4619      	mov	r1, r3
 800bf82:	6878      	ldr	r0, [r7, #4]
 800bf84:	f000 fc4c 	bl	800c820 <USBH_LL_GetURBState>
 800bf88:	4603      	mov	r3, r0
 800bf8a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800bf8c:	7bbb      	ldrb	r3, [r7, #14]
 800bf8e:	2b01      	cmp	r3, #1
 800bf90:	d103      	bne.n	800bf9a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	2207      	movs	r2, #7
 800bf96:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800bf98:	e0ac      	b.n	800c0f4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800bf9a:	7bbb      	ldrb	r3, [r7, #14]
 800bf9c:	2b05      	cmp	r3, #5
 800bf9e:	d105      	bne.n	800bfac <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	220c      	movs	r2, #12
 800bfa4:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800bfa6:	2303      	movs	r3, #3
 800bfa8:	73fb      	strb	r3, [r7, #15]
      break;
 800bfaa:	e0a3      	b.n	800c0f4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800bfac:	7bbb      	ldrb	r3, [r7, #14]
 800bfae:	2b02      	cmp	r3, #2
 800bfb0:	d103      	bne.n	800bfba <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	2205      	movs	r2, #5
 800bfb6:	761a      	strb	r2, [r3, #24]
      break;
 800bfb8:	e09c      	b.n	800c0f4 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800bfba:	7bbb      	ldrb	r3, [r7, #14]
 800bfbc:	2b04      	cmp	r3, #4
 800bfbe:	f040 8099 	bne.w	800c0f4 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	220b      	movs	r2, #11
 800bfc6:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800bfc8:	2302      	movs	r3, #2
 800bfca:	73fb      	strb	r3, [r7, #15]
      break;
 800bfcc:	e092      	b.n	800c0f4 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	791b      	ldrb	r3, [r3, #4]
 800bfd2:	2200      	movs	r2, #0
 800bfd4:	2100      	movs	r1, #0
 800bfd6:	6878      	ldr	r0, [r7, #4]
 800bfd8:	f000 f8d5 	bl	800c186 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800bfe2:	b29a      	uxth	r2, r3
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	2208      	movs	r2, #8
 800bfec:	761a      	strb	r2, [r3, #24]

      break;
 800bfee:	e086      	b.n	800c0fe <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	791b      	ldrb	r3, [r3, #4]
 800bff4:	4619      	mov	r1, r3
 800bff6:	6878      	ldr	r0, [r7, #4]
 800bff8:	f000 fc12 	bl	800c820 <USBH_LL_GetURBState>
 800bffc:	4603      	mov	r3, r0
 800bffe:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800c000:	7bbb      	ldrb	r3, [r7, #14]
 800c002:	2b01      	cmp	r3, #1
 800c004:	d105      	bne.n	800c012 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	220d      	movs	r2, #13
 800c00a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800c00c:	2300      	movs	r3, #0
 800c00e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800c010:	e072      	b.n	800c0f8 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800c012:	7bbb      	ldrb	r3, [r7, #14]
 800c014:	2b04      	cmp	r3, #4
 800c016:	d103      	bne.n	800c020 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	220b      	movs	r2, #11
 800c01c:	761a      	strb	r2, [r3, #24]
      break;
 800c01e:	e06b      	b.n	800c0f8 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800c020:	7bbb      	ldrb	r3, [r7, #14]
 800c022:	2b05      	cmp	r3, #5
 800c024:	d168      	bne.n	800c0f8 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800c026:	2303      	movs	r3, #3
 800c028:	73fb      	strb	r3, [r7, #15]
      break;
 800c02a:	e065      	b.n	800c0f8 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	795b      	ldrb	r3, [r3, #5]
 800c030:	2201      	movs	r2, #1
 800c032:	9200      	str	r2, [sp, #0]
 800c034:	2200      	movs	r2, #0
 800c036:	2100      	movs	r1, #0
 800c038:	6878      	ldr	r0, [r7, #4]
 800c03a:	f000 f87f 	bl	800c13c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800c044:	b29a      	uxth	r2, r3
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	220a      	movs	r2, #10
 800c04e:	761a      	strb	r2, [r3, #24]
      break;
 800c050:	e055      	b.n	800c0fe <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	795b      	ldrb	r3, [r3, #5]
 800c056:	4619      	mov	r1, r3
 800c058:	6878      	ldr	r0, [r7, #4]
 800c05a:	f000 fbe1 	bl	800c820 <USBH_LL_GetURBState>
 800c05e:	4603      	mov	r3, r0
 800c060:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800c062:	7bbb      	ldrb	r3, [r7, #14]
 800c064:	2b01      	cmp	r3, #1
 800c066:	d105      	bne.n	800c074 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800c068:	2300      	movs	r3, #0
 800c06a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	220d      	movs	r2, #13
 800c070:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800c072:	e043      	b.n	800c0fc <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800c074:	7bbb      	ldrb	r3, [r7, #14]
 800c076:	2b02      	cmp	r3, #2
 800c078:	d103      	bne.n	800c082 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	2209      	movs	r2, #9
 800c07e:	761a      	strb	r2, [r3, #24]
      break;
 800c080:	e03c      	b.n	800c0fc <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800c082:	7bbb      	ldrb	r3, [r7, #14]
 800c084:	2b04      	cmp	r3, #4
 800c086:	d139      	bne.n	800c0fc <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	220b      	movs	r2, #11
 800c08c:	761a      	strb	r2, [r3, #24]
      break;
 800c08e:	e035      	b.n	800c0fc <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	7e5b      	ldrb	r3, [r3, #25]
 800c094:	3301      	adds	r3, #1
 800c096:	b2da      	uxtb	r2, r3
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	765a      	strb	r2, [r3, #25]
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	7e5b      	ldrb	r3, [r3, #25]
 800c0a0:	2b02      	cmp	r3, #2
 800c0a2:	d806      	bhi.n	800c0b2 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	2201      	movs	r2, #1
 800c0a8:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	2201      	movs	r2, #1
 800c0ae:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800c0b0:	e025      	b.n	800c0fe <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800c0b8:	2106      	movs	r1, #6
 800c0ba:	6878      	ldr	r0, [r7, #4]
 800c0bc:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	2200      	movs	r2, #0
 800c0c2:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	795b      	ldrb	r3, [r3, #5]
 800c0c8:	4619      	mov	r1, r3
 800c0ca:	6878      	ldr	r0, [r7, #4]
 800c0cc:	f000 f90c 	bl	800c2e8 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	791b      	ldrb	r3, [r3, #4]
 800c0d4:	4619      	mov	r1, r3
 800c0d6:	6878      	ldr	r0, [r7, #4]
 800c0d8:	f000 f906 	bl	800c2e8 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	2200      	movs	r2, #0
 800c0e0:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800c0e2:	2302      	movs	r3, #2
 800c0e4:	73fb      	strb	r3, [r7, #15]
      break;
 800c0e6:	e00a      	b.n	800c0fe <USBH_HandleControl+0x2de>

    default:
      break;
 800c0e8:	bf00      	nop
 800c0ea:	e008      	b.n	800c0fe <USBH_HandleControl+0x2de>
      break;
 800c0ec:	bf00      	nop
 800c0ee:	e006      	b.n	800c0fe <USBH_HandleControl+0x2de>
      break;
 800c0f0:	bf00      	nop
 800c0f2:	e004      	b.n	800c0fe <USBH_HandleControl+0x2de>
      break;
 800c0f4:	bf00      	nop
 800c0f6:	e002      	b.n	800c0fe <USBH_HandleControl+0x2de>
      break;
 800c0f8:	bf00      	nop
 800c0fa:	e000      	b.n	800c0fe <USBH_HandleControl+0x2de>
      break;
 800c0fc:	bf00      	nop
  }

  return status;
 800c0fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800c100:	4618      	mov	r0, r3
 800c102:	3710      	adds	r7, #16
 800c104:	46bd      	mov	sp, r7
 800c106:	bd80      	pop	{r7, pc}

0800c108 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800c108:	b580      	push	{r7, lr}
 800c10a:	b088      	sub	sp, #32
 800c10c:	af04      	add	r7, sp, #16
 800c10e:	60f8      	str	r0, [r7, #12]
 800c110:	60b9      	str	r1, [r7, #8]
 800c112:	4613      	mov	r3, r2
 800c114:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c116:	79f9      	ldrb	r1, [r7, #7]
 800c118:	2300      	movs	r3, #0
 800c11a:	9303      	str	r3, [sp, #12]
 800c11c:	2308      	movs	r3, #8
 800c11e:	9302      	str	r3, [sp, #8]
 800c120:	68bb      	ldr	r3, [r7, #8]
 800c122:	9301      	str	r3, [sp, #4]
 800c124:	2300      	movs	r3, #0
 800c126:	9300      	str	r3, [sp, #0]
 800c128:	2300      	movs	r3, #0
 800c12a:	2200      	movs	r2, #0
 800c12c:	68f8      	ldr	r0, [r7, #12]
 800c12e:	f000 fb46 	bl	800c7be <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800c132:	2300      	movs	r3, #0
}
 800c134:	4618      	mov	r0, r3
 800c136:	3710      	adds	r7, #16
 800c138:	46bd      	mov	sp, r7
 800c13a:	bd80      	pop	{r7, pc}

0800c13c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800c13c:	b580      	push	{r7, lr}
 800c13e:	b088      	sub	sp, #32
 800c140:	af04      	add	r7, sp, #16
 800c142:	60f8      	str	r0, [r7, #12]
 800c144:	60b9      	str	r1, [r7, #8]
 800c146:	4611      	mov	r1, r2
 800c148:	461a      	mov	r2, r3
 800c14a:	460b      	mov	r3, r1
 800c14c:	80fb      	strh	r3, [r7, #6]
 800c14e:	4613      	mov	r3, r2
 800c150:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d001      	beq.n	800c160 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800c15c:	2300      	movs	r3, #0
 800c15e:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c160:	7979      	ldrb	r1, [r7, #5]
 800c162:	7e3b      	ldrb	r3, [r7, #24]
 800c164:	9303      	str	r3, [sp, #12]
 800c166:	88fb      	ldrh	r3, [r7, #6]
 800c168:	9302      	str	r3, [sp, #8]
 800c16a:	68bb      	ldr	r3, [r7, #8]
 800c16c:	9301      	str	r3, [sp, #4]
 800c16e:	2301      	movs	r3, #1
 800c170:	9300      	str	r3, [sp, #0]
 800c172:	2300      	movs	r3, #0
 800c174:	2200      	movs	r2, #0
 800c176:	68f8      	ldr	r0, [r7, #12]
 800c178:	f000 fb21 	bl	800c7be <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800c17c:	2300      	movs	r3, #0
}
 800c17e:	4618      	mov	r0, r3
 800c180:	3710      	adds	r7, #16
 800c182:	46bd      	mov	sp, r7
 800c184:	bd80      	pop	{r7, pc}

0800c186 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800c186:	b580      	push	{r7, lr}
 800c188:	b088      	sub	sp, #32
 800c18a:	af04      	add	r7, sp, #16
 800c18c:	60f8      	str	r0, [r7, #12]
 800c18e:	60b9      	str	r1, [r7, #8]
 800c190:	4611      	mov	r1, r2
 800c192:	461a      	mov	r2, r3
 800c194:	460b      	mov	r3, r1
 800c196:	80fb      	strh	r3, [r7, #6]
 800c198:	4613      	mov	r3, r2
 800c19a:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c19c:	7979      	ldrb	r1, [r7, #5]
 800c19e:	2300      	movs	r3, #0
 800c1a0:	9303      	str	r3, [sp, #12]
 800c1a2:	88fb      	ldrh	r3, [r7, #6]
 800c1a4:	9302      	str	r3, [sp, #8]
 800c1a6:	68bb      	ldr	r3, [r7, #8]
 800c1a8:	9301      	str	r3, [sp, #4]
 800c1aa:	2301      	movs	r3, #1
 800c1ac:	9300      	str	r3, [sp, #0]
 800c1ae:	2300      	movs	r3, #0
 800c1b0:	2201      	movs	r2, #1
 800c1b2:	68f8      	ldr	r0, [r7, #12]
 800c1b4:	f000 fb03 	bl	800c7be <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800c1b8:	2300      	movs	r3, #0

}
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	3710      	adds	r7, #16
 800c1be:	46bd      	mov	sp, r7
 800c1c0:	bd80      	pop	{r7, pc}

0800c1c2 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800c1c2:	b580      	push	{r7, lr}
 800c1c4:	b088      	sub	sp, #32
 800c1c6:	af04      	add	r7, sp, #16
 800c1c8:	60f8      	str	r0, [r7, #12]
 800c1ca:	60b9      	str	r1, [r7, #8]
 800c1cc:	4611      	mov	r1, r2
 800c1ce:	461a      	mov	r2, r3
 800c1d0:	460b      	mov	r3, r1
 800c1d2:	80fb      	strh	r3, [r7, #6]
 800c1d4:	4613      	mov	r3, r2
 800c1d6:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d001      	beq.n	800c1e6 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800c1e2:	2300      	movs	r3, #0
 800c1e4:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c1e6:	7979      	ldrb	r1, [r7, #5]
 800c1e8:	7e3b      	ldrb	r3, [r7, #24]
 800c1ea:	9303      	str	r3, [sp, #12]
 800c1ec:	88fb      	ldrh	r3, [r7, #6]
 800c1ee:	9302      	str	r3, [sp, #8]
 800c1f0:	68bb      	ldr	r3, [r7, #8]
 800c1f2:	9301      	str	r3, [sp, #4]
 800c1f4:	2301      	movs	r3, #1
 800c1f6:	9300      	str	r3, [sp, #0]
 800c1f8:	2302      	movs	r3, #2
 800c1fa:	2200      	movs	r2, #0
 800c1fc:	68f8      	ldr	r0, [r7, #12]
 800c1fe:	f000 fade 	bl	800c7be <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800c202:	2300      	movs	r3, #0
}
 800c204:	4618      	mov	r0, r3
 800c206:	3710      	adds	r7, #16
 800c208:	46bd      	mov	sp, r7
 800c20a:	bd80      	pop	{r7, pc}

0800c20c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800c20c:	b580      	push	{r7, lr}
 800c20e:	b088      	sub	sp, #32
 800c210:	af04      	add	r7, sp, #16
 800c212:	60f8      	str	r0, [r7, #12]
 800c214:	60b9      	str	r1, [r7, #8]
 800c216:	4611      	mov	r1, r2
 800c218:	461a      	mov	r2, r3
 800c21a:	460b      	mov	r3, r1
 800c21c:	80fb      	strh	r3, [r7, #6]
 800c21e:	4613      	mov	r3, r2
 800c220:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c222:	7979      	ldrb	r1, [r7, #5]
 800c224:	2300      	movs	r3, #0
 800c226:	9303      	str	r3, [sp, #12]
 800c228:	88fb      	ldrh	r3, [r7, #6]
 800c22a:	9302      	str	r3, [sp, #8]
 800c22c:	68bb      	ldr	r3, [r7, #8]
 800c22e:	9301      	str	r3, [sp, #4]
 800c230:	2301      	movs	r3, #1
 800c232:	9300      	str	r3, [sp, #0]
 800c234:	2302      	movs	r3, #2
 800c236:	2201      	movs	r2, #1
 800c238:	68f8      	ldr	r0, [r7, #12]
 800c23a:	f000 fac0 	bl	800c7be <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800c23e:	2300      	movs	r3, #0
}
 800c240:	4618      	mov	r0, r3
 800c242:	3710      	adds	r7, #16
 800c244:	46bd      	mov	sp, r7
 800c246:	bd80      	pop	{r7, pc}

0800c248 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800c248:	b580      	push	{r7, lr}
 800c24a:	b086      	sub	sp, #24
 800c24c:	af04      	add	r7, sp, #16
 800c24e:	6078      	str	r0, [r7, #4]
 800c250:	4608      	mov	r0, r1
 800c252:	4611      	mov	r1, r2
 800c254:	461a      	mov	r2, r3
 800c256:	4603      	mov	r3, r0
 800c258:	70fb      	strb	r3, [r7, #3]
 800c25a:	460b      	mov	r3, r1
 800c25c:	70bb      	strb	r3, [r7, #2]
 800c25e:	4613      	mov	r3, r2
 800c260:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800c262:	7878      	ldrb	r0, [r7, #1]
 800c264:	78ba      	ldrb	r2, [r7, #2]
 800c266:	78f9      	ldrb	r1, [r7, #3]
 800c268:	8b3b      	ldrh	r3, [r7, #24]
 800c26a:	9302      	str	r3, [sp, #8]
 800c26c:	7d3b      	ldrb	r3, [r7, #20]
 800c26e:	9301      	str	r3, [sp, #4]
 800c270:	7c3b      	ldrb	r3, [r7, #16]
 800c272:	9300      	str	r3, [sp, #0]
 800c274:	4603      	mov	r3, r0
 800c276:	6878      	ldr	r0, [r7, #4]
 800c278:	f000 fa53 	bl	800c722 <USBH_LL_OpenPipe>

  return USBH_OK;
 800c27c:	2300      	movs	r3, #0
}
 800c27e:	4618      	mov	r0, r3
 800c280:	3708      	adds	r7, #8
 800c282:	46bd      	mov	sp, r7
 800c284:	bd80      	pop	{r7, pc}

0800c286 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800c286:	b580      	push	{r7, lr}
 800c288:	b082      	sub	sp, #8
 800c28a:	af00      	add	r7, sp, #0
 800c28c:	6078      	str	r0, [r7, #4]
 800c28e:	460b      	mov	r3, r1
 800c290:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800c292:	78fb      	ldrb	r3, [r7, #3]
 800c294:	4619      	mov	r1, r3
 800c296:	6878      	ldr	r0, [r7, #4]
 800c298:	f000 fa72 	bl	800c780 <USBH_LL_ClosePipe>

  return USBH_OK;
 800c29c:	2300      	movs	r3, #0
}
 800c29e:	4618      	mov	r0, r3
 800c2a0:	3708      	adds	r7, #8
 800c2a2:	46bd      	mov	sp, r7
 800c2a4:	bd80      	pop	{r7, pc}

0800c2a6 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800c2a6:	b580      	push	{r7, lr}
 800c2a8:	b084      	sub	sp, #16
 800c2aa:	af00      	add	r7, sp, #0
 800c2ac:	6078      	str	r0, [r7, #4]
 800c2ae:	460b      	mov	r3, r1
 800c2b0:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800c2b2:	6878      	ldr	r0, [r7, #4]
 800c2b4:	f000 f836 	bl	800c324 <USBH_GetFreePipe>
 800c2b8:	4603      	mov	r3, r0
 800c2ba:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800c2bc:	89fb      	ldrh	r3, [r7, #14]
 800c2be:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c2c2:	4293      	cmp	r3, r2
 800c2c4:	d00a      	beq.n	800c2dc <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800c2c6:	78fa      	ldrb	r2, [r7, #3]
 800c2c8:	89fb      	ldrh	r3, [r7, #14]
 800c2ca:	f003 030f 	and.w	r3, r3, #15
 800c2ce:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800c2d2:	6879      	ldr	r1, [r7, #4]
 800c2d4:	33e0      	adds	r3, #224	@ 0xe0
 800c2d6:	009b      	lsls	r3, r3, #2
 800c2d8:	440b      	add	r3, r1
 800c2da:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800c2dc:	89fb      	ldrh	r3, [r7, #14]
 800c2de:	b2db      	uxtb	r3, r3
}
 800c2e0:	4618      	mov	r0, r3
 800c2e2:	3710      	adds	r7, #16
 800c2e4:	46bd      	mov	sp, r7
 800c2e6:	bd80      	pop	{r7, pc}

0800c2e8 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800c2e8:	b480      	push	{r7}
 800c2ea:	b083      	sub	sp, #12
 800c2ec:	af00      	add	r7, sp, #0
 800c2ee:	6078      	str	r0, [r7, #4]
 800c2f0:	460b      	mov	r3, r1
 800c2f2:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800c2f4:	78fb      	ldrb	r3, [r7, #3]
 800c2f6:	2b0f      	cmp	r3, #15
 800c2f8:	d80d      	bhi.n	800c316 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800c2fa:	78fb      	ldrb	r3, [r7, #3]
 800c2fc:	687a      	ldr	r2, [r7, #4]
 800c2fe:	33e0      	adds	r3, #224	@ 0xe0
 800c300:	009b      	lsls	r3, r3, #2
 800c302:	4413      	add	r3, r2
 800c304:	685a      	ldr	r2, [r3, #4]
 800c306:	78fb      	ldrb	r3, [r7, #3]
 800c308:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800c30c:	6879      	ldr	r1, [r7, #4]
 800c30e:	33e0      	adds	r3, #224	@ 0xe0
 800c310:	009b      	lsls	r3, r3, #2
 800c312:	440b      	add	r3, r1
 800c314:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800c316:	2300      	movs	r3, #0
}
 800c318:	4618      	mov	r0, r3
 800c31a:	370c      	adds	r7, #12
 800c31c:	46bd      	mov	sp, r7
 800c31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c322:	4770      	bx	lr

0800c324 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800c324:	b480      	push	{r7}
 800c326:	b085      	sub	sp, #20
 800c328:	af00      	add	r7, sp, #0
 800c32a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800c32c:	2300      	movs	r3, #0
 800c32e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800c330:	2300      	movs	r3, #0
 800c332:	73fb      	strb	r3, [r7, #15]
 800c334:	e00f      	b.n	800c356 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800c336:	7bfb      	ldrb	r3, [r7, #15]
 800c338:	687a      	ldr	r2, [r7, #4]
 800c33a:	33e0      	adds	r3, #224	@ 0xe0
 800c33c:	009b      	lsls	r3, r3, #2
 800c33e:	4413      	add	r3, r2
 800c340:	685b      	ldr	r3, [r3, #4]
 800c342:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c346:	2b00      	cmp	r3, #0
 800c348:	d102      	bne.n	800c350 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800c34a:	7bfb      	ldrb	r3, [r7, #15]
 800c34c:	b29b      	uxth	r3, r3
 800c34e:	e007      	b.n	800c360 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800c350:	7bfb      	ldrb	r3, [r7, #15]
 800c352:	3301      	adds	r3, #1
 800c354:	73fb      	strb	r3, [r7, #15]
 800c356:	7bfb      	ldrb	r3, [r7, #15]
 800c358:	2b0f      	cmp	r3, #15
 800c35a:	d9ec      	bls.n	800c336 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800c35c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800c360:	4618      	mov	r0, r3
 800c362:	3714      	adds	r7, #20
 800c364:	46bd      	mov	sp, r7
 800c366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c36a:	4770      	bx	lr

0800c36c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800c36c:	b580      	push	{r7, lr}
 800c36e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800c370:	2201      	movs	r2, #1
 800c372:	490e      	ldr	r1, [pc, #56]	@ (800c3ac <MX_USB_HOST_Init+0x40>)
 800c374:	480e      	ldr	r0, [pc, #56]	@ (800c3b0 <MX_USB_HOST_Init+0x44>)
 800c376:	f7fe fb15 	bl	800a9a4 <USBH_Init>
 800c37a:	4603      	mov	r3, r0
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d001      	beq.n	800c384 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800c380:	f7f4 fbb7 	bl	8000af2 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800c384:	490b      	ldr	r1, [pc, #44]	@ (800c3b4 <MX_USB_HOST_Init+0x48>)
 800c386:	480a      	ldr	r0, [pc, #40]	@ (800c3b0 <MX_USB_HOST_Init+0x44>)
 800c388:	f7fe fbb9 	bl	800aafe <USBH_RegisterClass>
 800c38c:	4603      	mov	r3, r0
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d001      	beq.n	800c396 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800c392:	f7f4 fbae 	bl	8000af2 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800c396:	4806      	ldr	r0, [pc, #24]	@ (800c3b0 <MX_USB_HOST_Init+0x44>)
 800c398:	f7fe fc3d 	bl	800ac16 <USBH_Start>
 800c39c:	4603      	mov	r3, r0
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d001      	beq.n	800c3a6 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800c3a2:	f7f4 fba6 	bl	8000af2 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800c3a6:	bf00      	nop
 800c3a8:	bd80      	pop	{r7, pc}
 800c3aa:	bf00      	nop
 800c3ac:	0800c3cd 	.word	0x0800c3cd
 800c3b0:	20000290 	.word	0x20000290
 800c3b4:	20000014 	.word	0x20000014

0800c3b8 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800c3b8:	b580      	push	{r7, lr}
 800c3ba:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800c3bc:	4802      	ldr	r0, [pc, #8]	@ (800c3c8 <MX_USB_HOST_Process+0x10>)
 800c3be:	f7fe fc3b 	bl	800ac38 <USBH_Process>
}
 800c3c2:	bf00      	nop
 800c3c4:	bd80      	pop	{r7, pc}
 800c3c6:	bf00      	nop
 800c3c8:	20000290 	.word	0x20000290

0800c3cc <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800c3cc:	b480      	push	{r7}
 800c3ce:	b083      	sub	sp, #12
 800c3d0:	af00      	add	r7, sp, #0
 800c3d2:	6078      	str	r0, [r7, #4]
 800c3d4:	460b      	mov	r3, r1
 800c3d6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800c3d8:	78fb      	ldrb	r3, [r7, #3]
 800c3da:	3b01      	subs	r3, #1
 800c3dc:	2b04      	cmp	r3, #4
 800c3de:	d819      	bhi.n	800c414 <USBH_UserProcess+0x48>
 800c3e0:	a201      	add	r2, pc, #4	@ (adr r2, 800c3e8 <USBH_UserProcess+0x1c>)
 800c3e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3e6:	bf00      	nop
 800c3e8:	0800c415 	.word	0x0800c415
 800c3ec:	0800c405 	.word	0x0800c405
 800c3f0:	0800c415 	.word	0x0800c415
 800c3f4:	0800c40d 	.word	0x0800c40d
 800c3f8:	0800c3fd 	.word	0x0800c3fd
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800c3fc:	4b09      	ldr	r3, [pc, #36]	@ (800c424 <USBH_UserProcess+0x58>)
 800c3fe:	2203      	movs	r2, #3
 800c400:	701a      	strb	r2, [r3, #0]
  break;
 800c402:	e008      	b.n	800c416 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800c404:	4b07      	ldr	r3, [pc, #28]	@ (800c424 <USBH_UserProcess+0x58>)
 800c406:	2202      	movs	r2, #2
 800c408:	701a      	strb	r2, [r3, #0]
  break;
 800c40a:	e004      	b.n	800c416 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800c40c:	4b05      	ldr	r3, [pc, #20]	@ (800c424 <USBH_UserProcess+0x58>)
 800c40e:	2201      	movs	r2, #1
 800c410:	701a      	strb	r2, [r3, #0]
  break;
 800c412:	e000      	b.n	800c416 <USBH_UserProcess+0x4a>

  default:
  break;
 800c414:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800c416:	bf00      	nop
 800c418:	370c      	adds	r7, #12
 800c41a:	46bd      	mov	sp, r7
 800c41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c420:	4770      	bx	lr
 800c422:	bf00      	nop
 800c424:	20000668 	.word	0x20000668

0800c428 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800c428:	b580      	push	{r7, lr}
 800c42a:	b08a      	sub	sp, #40	@ 0x28
 800c42c:	af00      	add	r7, sp, #0
 800c42e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c430:	f107 0314 	add.w	r3, r7, #20
 800c434:	2200      	movs	r2, #0
 800c436:	601a      	str	r2, [r3, #0]
 800c438:	605a      	str	r2, [r3, #4]
 800c43a:	609a      	str	r2, [r3, #8]
 800c43c:	60da      	str	r2, [r3, #12]
 800c43e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c448:	d147      	bne.n	800c4da <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c44a:	2300      	movs	r3, #0
 800c44c:	613b      	str	r3, [r7, #16]
 800c44e:	4b25      	ldr	r3, [pc, #148]	@ (800c4e4 <HAL_HCD_MspInit+0xbc>)
 800c450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c452:	4a24      	ldr	r2, [pc, #144]	@ (800c4e4 <HAL_HCD_MspInit+0xbc>)
 800c454:	f043 0301 	orr.w	r3, r3, #1
 800c458:	6313      	str	r3, [r2, #48]	@ 0x30
 800c45a:	4b22      	ldr	r3, [pc, #136]	@ (800c4e4 <HAL_HCD_MspInit+0xbc>)
 800c45c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c45e:	f003 0301 	and.w	r3, r3, #1
 800c462:	613b      	str	r3, [r7, #16]
 800c464:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800c466:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c46a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c46c:	2300      	movs	r3, #0
 800c46e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c470:	2300      	movs	r3, #0
 800c472:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800c474:	f107 0314 	add.w	r3, r7, #20
 800c478:	4619      	mov	r1, r3
 800c47a:	481b      	ldr	r0, [pc, #108]	@ (800c4e8 <HAL_HCD_MspInit+0xc0>)
 800c47c:	f7f6 f854 	bl	8002528 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800c480:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800c484:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c486:	2302      	movs	r3, #2
 800c488:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c48a:	2300      	movs	r3, #0
 800c48c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c48e:	2300      	movs	r3, #0
 800c490:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c492:	230a      	movs	r3, #10
 800c494:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c496:	f107 0314 	add.w	r3, r7, #20
 800c49a:	4619      	mov	r1, r3
 800c49c:	4812      	ldr	r0, [pc, #72]	@ (800c4e8 <HAL_HCD_MspInit+0xc0>)
 800c49e:	f7f6 f843 	bl	8002528 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c4a2:	4b10      	ldr	r3, [pc, #64]	@ (800c4e4 <HAL_HCD_MspInit+0xbc>)
 800c4a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c4a6:	4a0f      	ldr	r2, [pc, #60]	@ (800c4e4 <HAL_HCD_MspInit+0xbc>)
 800c4a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c4ac:	6353      	str	r3, [r2, #52]	@ 0x34
 800c4ae:	2300      	movs	r3, #0
 800c4b0:	60fb      	str	r3, [r7, #12]
 800c4b2:	4b0c      	ldr	r3, [pc, #48]	@ (800c4e4 <HAL_HCD_MspInit+0xbc>)
 800c4b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c4b6:	4a0b      	ldr	r2, [pc, #44]	@ (800c4e4 <HAL_HCD_MspInit+0xbc>)
 800c4b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800c4bc:	6453      	str	r3, [r2, #68]	@ 0x44
 800c4be:	4b09      	ldr	r3, [pc, #36]	@ (800c4e4 <HAL_HCD_MspInit+0xbc>)
 800c4c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c4c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c4c6:	60fb      	str	r3, [r7, #12]
 800c4c8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800c4ca:	2200      	movs	r2, #0
 800c4cc:	2100      	movs	r1, #0
 800c4ce:	2043      	movs	r0, #67	@ 0x43
 800c4d0:	f7f5 ff48 	bl	8002364 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c4d4:	2043      	movs	r0, #67	@ 0x43
 800c4d6:	f7f5 ff71 	bl	80023bc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c4da:	bf00      	nop
 800c4dc:	3728      	adds	r7, #40	@ 0x28
 800c4de:	46bd      	mov	sp, r7
 800c4e0:	bd80      	pop	{r7, pc}
 800c4e2:	bf00      	nop
 800c4e4:	40023800 	.word	0x40023800
 800c4e8:	40020000 	.word	0x40020000

0800c4ec <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800c4ec:	b580      	push	{r7, lr}
 800c4ee:	b082      	sub	sp, #8
 800c4f0:	af00      	add	r7, sp, #0
 800c4f2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800c4fa:	4618      	mov	r0, r3
 800c4fc:	f7fe ff73 	bl	800b3e6 <USBH_LL_IncTimer>
}
 800c500:	bf00      	nop
 800c502:	3708      	adds	r7, #8
 800c504:	46bd      	mov	sp, r7
 800c506:	bd80      	pop	{r7, pc}

0800c508 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c508:	b580      	push	{r7, lr}
 800c50a:	b082      	sub	sp, #8
 800c50c:	af00      	add	r7, sp, #0
 800c50e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800c516:	4618      	mov	r0, r3
 800c518:	f7fe ffab 	bl	800b472 <USBH_LL_Connect>
}
 800c51c:	bf00      	nop
 800c51e:	3708      	adds	r7, #8
 800c520:	46bd      	mov	sp, r7
 800c522:	bd80      	pop	{r7, pc}

0800c524 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c524:	b580      	push	{r7, lr}
 800c526:	b082      	sub	sp, #8
 800c528:	af00      	add	r7, sp, #0
 800c52a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800c532:	4618      	mov	r0, r3
 800c534:	f7fe ffb4 	bl	800b4a0 <USBH_LL_Disconnect>
}
 800c538:	bf00      	nop
 800c53a:	3708      	adds	r7, #8
 800c53c:	46bd      	mov	sp, r7
 800c53e:	bd80      	pop	{r7, pc}

0800c540 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800c540:	b480      	push	{r7}
 800c542:	b083      	sub	sp, #12
 800c544:	af00      	add	r7, sp, #0
 800c546:	6078      	str	r0, [r7, #4]
 800c548:	460b      	mov	r3, r1
 800c54a:	70fb      	strb	r3, [r7, #3]
 800c54c:	4613      	mov	r3, r2
 800c54e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800c550:	bf00      	nop
 800c552:	370c      	adds	r7, #12
 800c554:	46bd      	mov	sp, r7
 800c556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c55a:	4770      	bx	lr

0800c55c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c55c:	b580      	push	{r7, lr}
 800c55e:	b082      	sub	sp, #8
 800c560:	af00      	add	r7, sp, #0
 800c562:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800c56a:	4618      	mov	r0, r3
 800c56c:	f7fe ff65 	bl	800b43a <USBH_LL_PortEnabled>
}
 800c570:	bf00      	nop
 800c572:	3708      	adds	r7, #8
 800c574:	46bd      	mov	sp, r7
 800c576:	bd80      	pop	{r7, pc}

0800c578 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c578:	b580      	push	{r7, lr}
 800c57a:	b082      	sub	sp, #8
 800c57c:	af00      	add	r7, sp, #0
 800c57e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800c586:	4618      	mov	r0, r3
 800c588:	f7fe ff65 	bl	800b456 <USBH_LL_PortDisabled>
}
 800c58c:	bf00      	nop
 800c58e:	3708      	adds	r7, #8
 800c590:	46bd      	mov	sp, r7
 800c592:	bd80      	pop	{r7, pc}

0800c594 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800c594:	b580      	push	{r7, lr}
 800c596:	b082      	sub	sp, #8
 800c598:	af00      	add	r7, sp, #0
 800c59a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800c5a2:	2b01      	cmp	r3, #1
 800c5a4:	d12a      	bne.n	800c5fc <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800c5a6:	4a18      	ldr	r2, [pc, #96]	@ (800c608 <USBH_LL_Init+0x74>)
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	4a15      	ldr	r2, [pc, #84]	@ (800c608 <USBH_LL_Init+0x74>)
 800c5b2:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c5b6:	4b14      	ldr	r3, [pc, #80]	@ (800c608 <USBH_LL_Init+0x74>)
 800c5b8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800c5bc:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800c5be:	4b12      	ldr	r3, [pc, #72]	@ (800c608 <USBH_LL_Init+0x74>)
 800c5c0:	2208      	movs	r2, #8
 800c5c2:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800c5c4:	4b10      	ldr	r3, [pc, #64]	@ (800c608 <USBH_LL_Init+0x74>)
 800c5c6:	2201      	movs	r2, #1
 800c5c8:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c5ca:	4b0f      	ldr	r3, [pc, #60]	@ (800c608 <USBH_LL_Init+0x74>)
 800c5cc:	2200      	movs	r2, #0
 800c5ce:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800c5d0:	4b0d      	ldr	r3, [pc, #52]	@ (800c608 <USBH_LL_Init+0x74>)
 800c5d2:	2202      	movs	r2, #2
 800c5d4:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c5d6:	4b0c      	ldr	r3, [pc, #48]	@ (800c608 <USBH_LL_Init+0x74>)
 800c5d8:	2200      	movs	r2, #0
 800c5da:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800c5dc:	480a      	ldr	r0, [pc, #40]	@ (800c608 <USBH_LL_Init+0x74>)
 800c5de:	f7f6 facf 	bl	8002b80 <HAL_HCD_Init>
 800c5e2:	4603      	mov	r3, r0
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d001      	beq.n	800c5ec <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800c5e8:	f7f4 fa83 	bl	8000af2 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800c5ec:	4806      	ldr	r0, [pc, #24]	@ (800c608 <USBH_LL_Init+0x74>)
 800c5ee:	f7f6 ff43 	bl	8003478 <HAL_HCD_GetCurrentFrame>
 800c5f2:	4603      	mov	r3, r0
 800c5f4:	4619      	mov	r1, r3
 800c5f6:	6878      	ldr	r0, [r7, #4]
 800c5f8:	f7fe fee6 	bl	800b3c8 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800c5fc:	2300      	movs	r3, #0
}
 800c5fe:	4618      	mov	r0, r3
 800c600:	3708      	adds	r7, #8
 800c602:	46bd      	mov	sp, r7
 800c604:	bd80      	pop	{r7, pc}
 800c606:	bf00      	nop
 800c608:	2000066c 	.word	0x2000066c

0800c60c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800c60c:	b580      	push	{r7, lr}
 800c60e:	b084      	sub	sp, #16
 800c610:	af00      	add	r7, sp, #0
 800c612:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c614:	2300      	movs	r3, #0
 800c616:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c618:	2300      	movs	r3, #0
 800c61a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800c622:	4618      	mov	r0, r3
 800c624:	f7f6 feb0 	bl	8003388 <HAL_HCD_Start>
 800c628:	4603      	mov	r3, r0
 800c62a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c62c:	7bfb      	ldrb	r3, [r7, #15]
 800c62e:	4618      	mov	r0, r3
 800c630:	f000 f95e 	bl	800c8f0 <USBH_Get_USB_Status>
 800c634:	4603      	mov	r3, r0
 800c636:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c638:	7bbb      	ldrb	r3, [r7, #14]
}
 800c63a:	4618      	mov	r0, r3
 800c63c:	3710      	adds	r7, #16
 800c63e:	46bd      	mov	sp, r7
 800c640:	bd80      	pop	{r7, pc}

0800c642 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800c642:	b580      	push	{r7, lr}
 800c644:	b084      	sub	sp, #16
 800c646:	af00      	add	r7, sp, #0
 800c648:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c64a:	2300      	movs	r3, #0
 800c64c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c64e:	2300      	movs	r3, #0
 800c650:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800c658:	4618      	mov	r0, r3
 800c65a:	f7f6 feb8 	bl	80033ce <HAL_HCD_Stop>
 800c65e:	4603      	mov	r3, r0
 800c660:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c662:	7bfb      	ldrb	r3, [r7, #15]
 800c664:	4618      	mov	r0, r3
 800c666:	f000 f943 	bl	800c8f0 <USBH_Get_USB_Status>
 800c66a:	4603      	mov	r3, r0
 800c66c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c66e:	7bbb      	ldrb	r3, [r7, #14]
}
 800c670:	4618      	mov	r0, r3
 800c672:	3710      	adds	r7, #16
 800c674:	46bd      	mov	sp, r7
 800c676:	bd80      	pop	{r7, pc}

0800c678 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800c678:	b580      	push	{r7, lr}
 800c67a:	b084      	sub	sp, #16
 800c67c:	af00      	add	r7, sp, #0
 800c67e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800c680:	2301      	movs	r3, #1
 800c682:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800c68a:	4618      	mov	r0, r3
 800c68c:	f7f6 ff02 	bl	8003494 <HAL_HCD_GetCurrentSpeed>
 800c690:	4603      	mov	r3, r0
 800c692:	2b02      	cmp	r3, #2
 800c694:	d00c      	beq.n	800c6b0 <USBH_LL_GetSpeed+0x38>
 800c696:	2b02      	cmp	r3, #2
 800c698:	d80d      	bhi.n	800c6b6 <USBH_LL_GetSpeed+0x3e>
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d002      	beq.n	800c6a4 <USBH_LL_GetSpeed+0x2c>
 800c69e:	2b01      	cmp	r3, #1
 800c6a0:	d003      	beq.n	800c6aa <USBH_LL_GetSpeed+0x32>
 800c6a2:	e008      	b.n	800c6b6 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800c6a4:	2300      	movs	r3, #0
 800c6a6:	73fb      	strb	r3, [r7, #15]
    break;
 800c6a8:	e008      	b.n	800c6bc <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800c6aa:	2301      	movs	r3, #1
 800c6ac:	73fb      	strb	r3, [r7, #15]
    break;
 800c6ae:	e005      	b.n	800c6bc <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800c6b0:	2302      	movs	r3, #2
 800c6b2:	73fb      	strb	r3, [r7, #15]
    break;
 800c6b4:	e002      	b.n	800c6bc <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800c6b6:	2301      	movs	r3, #1
 800c6b8:	73fb      	strb	r3, [r7, #15]
    break;
 800c6ba:	bf00      	nop
  }
  return  speed;
 800c6bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6be:	4618      	mov	r0, r3
 800c6c0:	3710      	adds	r7, #16
 800c6c2:	46bd      	mov	sp, r7
 800c6c4:	bd80      	pop	{r7, pc}

0800c6c6 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800c6c6:	b580      	push	{r7, lr}
 800c6c8:	b084      	sub	sp, #16
 800c6ca:	af00      	add	r7, sp, #0
 800c6cc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c6ce:	2300      	movs	r3, #0
 800c6d0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c6d2:	2300      	movs	r3, #0
 800c6d4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800c6dc:	4618      	mov	r0, r3
 800c6de:	f7f6 fe93 	bl	8003408 <HAL_HCD_ResetPort>
 800c6e2:	4603      	mov	r3, r0
 800c6e4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c6e6:	7bfb      	ldrb	r3, [r7, #15]
 800c6e8:	4618      	mov	r0, r3
 800c6ea:	f000 f901 	bl	800c8f0 <USBH_Get_USB_Status>
 800c6ee:	4603      	mov	r3, r0
 800c6f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c6f2:	7bbb      	ldrb	r3, [r7, #14]
}
 800c6f4:	4618      	mov	r0, r3
 800c6f6:	3710      	adds	r7, #16
 800c6f8:	46bd      	mov	sp, r7
 800c6fa:	bd80      	pop	{r7, pc}

0800c6fc <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c6fc:	b580      	push	{r7, lr}
 800c6fe:	b082      	sub	sp, #8
 800c700:	af00      	add	r7, sp, #0
 800c702:	6078      	str	r0, [r7, #4]
 800c704:	460b      	mov	r3, r1
 800c706:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800c70e:	78fa      	ldrb	r2, [r7, #3]
 800c710:	4611      	mov	r1, r2
 800c712:	4618      	mov	r0, r3
 800c714:	f7f6 fe9b 	bl	800344e <HAL_HCD_HC_GetXferCount>
 800c718:	4603      	mov	r3, r0
}
 800c71a:	4618      	mov	r0, r3
 800c71c:	3708      	adds	r7, #8
 800c71e:	46bd      	mov	sp, r7
 800c720:	bd80      	pop	{r7, pc}

0800c722 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800c722:	b590      	push	{r4, r7, lr}
 800c724:	b089      	sub	sp, #36	@ 0x24
 800c726:	af04      	add	r7, sp, #16
 800c728:	6078      	str	r0, [r7, #4]
 800c72a:	4608      	mov	r0, r1
 800c72c:	4611      	mov	r1, r2
 800c72e:	461a      	mov	r2, r3
 800c730:	4603      	mov	r3, r0
 800c732:	70fb      	strb	r3, [r7, #3]
 800c734:	460b      	mov	r3, r1
 800c736:	70bb      	strb	r3, [r7, #2]
 800c738:	4613      	mov	r3, r2
 800c73a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c73c:	2300      	movs	r3, #0
 800c73e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c740:	2300      	movs	r3, #0
 800c742:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800c74a:	787c      	ldrb	r4, [r7, #1]
 800c74c:	78ba      	ldrb	r2, [r7, #2]
 800c74e:	78f9      	ldrb	r1, [r7, #3]
 800c750:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800c752:	9302      	str	r3, [sp, #8]
 800c754:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800c758:	9301      	str	r3, [sp, #4]
 800c75a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c75e:	9300      	str	r3, [sp, #0]
 800c760:	4623      	mov	r3, r4
 800c762:	f7f6 fa87 	bl	8002c74 <HAL_HCD_HC_Init>
 800c766:	4603      	mov	r3, r0
 800c768:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800c76a:	7bfb      	ldrb	r3, [r7, #15]
 800c76c:	4618      	mov	r0, r3
 800c76e:	f000 f8bf 	bl	800c8f0 <USBH_Get_USB_Status>
 800c772:	4603      	mov	r3, r0
 800c774:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c776:	7bbb      	ldrb	r3, [r7, #14]
}
 800c778:	4618      	mov	r0, r3
 800c77a:	3714      	adds	r7, #20
 800c77c:	46bd      	mov	sp, r7
 800c77e:	bd90      	pop	{r4, r7, pc}

0800c780 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c780:	b580      	push	{r7, lr}
 800c782:	b084      	sub	sp, #16
 800c784:	af00      	add	r7, sp, #0
 800c786:	6078      	str	r0, [r7, #4]
 800c788:	460b      	mov	r3, r1
 800c78a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c78c:	2300      	movs	r3, #0
 800c78e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c790:	2300      	movs	r3, #0
 800c792:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800c79a:	78fa      	ldrb	r2, [r7, #3]
 800c79c:	4611      	mov	r1, r2
 800c79e:	4618      	mov	r0, r3
 800c7a0:	f7f6 fb20 	bl	8002de4 <HAL_HCD_HC_Halt>
 800c7a4:	4603      	mov	r3, r0
 800c7a6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c7a8:	7bfb      	ldrb	r3, [r7, #15]
 800c7aa:	4618      	mov	r0, r3
 800c7ac:	f000 f8a0 	bl	800c8f0 <USBH_Get_USB_Status>
 800c7b0:	4603      	mov	r3, r0
 800c7b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c7b4:	7bbb      	ldrb	r3, [r7, #14]
}
 800c7b6:	4618      	mov	r0, r3
 800c7b8:	3710      	adds	r7, #16
 800c7ba:	46bd      	mov	sp, r7
 800c7bc:	bd80      	pop	{r7, pc}

0800c7be <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800c7be:	b590      	push	{r4, r7, lr}
 800c7c0:	b089      	sub	sp, #36	@ 0x24
 800c7c2:	af04      	add	r7, sp, #16
 800c7c4:	6078      	str	r0, [r7, #4]
 800c7c6:	4608      	mov	r0, r1
 800c7c8:	4611      	mov	r1, r2
 800c7ca:	461a      	mov	r2, r3
 800c7cc:	4603      	mov	r3, r0
 800c7ce:	70fb      	strb	r3, [r7, #3]
 800c7d0:	460b      	mov	r3, r1
 800c7d2:	70bb      	strb	r3, [r7, #2]
 800c7d4:	4613      	mov	r3, r2
 800c7d6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c7d8:	2300      	movs	r3, #0
 800c7da:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c7dc:	2300      	movs	r3, #0
 800c7de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800c7e6:	787c      	ldrb	r4, [r7, #1]
 800c7e8:	78ba      	ldrb	r2, [r7, #2]
 800c7ea:	78f9      	ldrb	r1, [r7, #3]
 800c7ec:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800c7f0:	9303      	str	r3, [sp, #12]
 800c7f2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800c7f4:	9302      	str	r3, [sp, #8]
 800c7f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7f8:	9301      	str	r3, [sp, #4]
 800c7fa:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c7fe:	9300      	str	r3, [sp, #0]
 800c800:	4623      	mov	r3, r4
 800c802:	f7f6 fb13 	bl	8002e2c <HAL_HCD_HC_SubmitRequest>
 800c806:	4603      	mov	r3, r0
 800c808:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800c80a:	7bfb      	ldrb	r3, [r7, #15]
 800c80c:	4618      	mov	r0, r3
 800c80e:	f000 f86f 	bl	800c8f0 <USBH_Get_USB_Status>
 800c812:	4603      	mov	r3, r0
 800c814:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c816:	7bbb      	ldrb	r3, [r7, #14]
}
 800c818:	4618      	mov	r0, r3
 800c81a:	3714      	adds	r7, #20
 800c81c:	46bd      	mov	sp, r7
 800c81e:	bd90      	pop	{r4, r7, pc}

0800c820 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c820:	b580      	push	{r7, lr}
 800c822:	b082      	sub	sp, #8
 800c824:	af00      	add	r7, sp, #0
 800c826:	6078      	str	r0, [r7, #4]
 800c828:	460b      	mov	r3, r1
 800c82a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800c832:	78fa      	ldrb	r2, [r7, #3]
 800c834:	4611      	mov	r1, r2
 800c836:	4618      	mov	r0, r3
 800c838:	f7f6 fdf4 	bl	8003424 <HAL_HCD_HC_GetURBState>
 800c83c:	4603      	mov	r3, r0
}
 800c83e:	4618      	mov	r0, r3
 800c840:	3708      	adds	r7, #8
 800c842:	46bd      	mov	sp, r7
 800c844:	bd80      	pop	{r7, pc}

0800c846 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800c846:	b580      	push	{r7, lr}
 800c848:	b082      	sub	sp, #8
 800c84a:	af00      	add	r7, sp, #0
 800c84c:	6078      	str	r0, [r7, #4]
 800c84e:	460b      	mov	r3, r1
 800c850:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800c858:	2b01      	cmp	r3, #1
 800c85a:	d103      	bne.n	800c864 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800c85c:	78fb      	ldrb	r3, [r7, #3]
 800c85e:	4618      	mov	r0, r3
 800c860:	f000 f872 	bl	800c948 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800c864:	20c8      	movs	r0, #200	@ 0xc8
 800c866:	f7f4 feb7 	bl	80015d8 <HAL_Delay>
  return USBH_OK;
 800c86a:	2300      	movs	r3, #0
}
 800c86c:	4618      	mov	r0, r3
 800c86e:	3708      	adds	r7, #8
 800c870:	46bd      	mov	sp, r7
 800c872:	bd80      	pop	{r7, pc}

0800c874 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800c874:	b480      	push	{r7}
 800c876:	b085      	sub	sp, #20
 800c878:	af00      	add	r7, sp, #0
 800c87a:	6078      	str	r0, [r7, #4]
 800c87c:	460b      	mov	r3, r1
 800c87e:	70fb      	strb	r3, [r7, #3]
 800c880:	4613      	mov	r3, r2
 800c882:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800c88a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800c88c:	78fa      	ldrb	r2, [r7, #3]
 800c88e:	68f9      	ldr	r1, [r7, #12]
 800c890:	4613      	mov	r3, r2
 800c892:	011b      	lsls	r3, r3, #4
 800c894:	1a9b      	subs	r3, r3, r2
 800c896:	009b      	lsls	r3, r3, #2
 800c898:	440b      	add	r3, r1
 800c89a:	3317      	adds	r3, #23
 800c89c:	781b      	ldrb	r3, [r3, #0]
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d00a      	beq.n	800c8b8 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800c8a2:	78fa      	ldrb	r2, [r7, #3]
 800c8a4:	68f9      	ldr	r1, [r7, #12]
 800c8a6:	4613      	mov	r3, r2
 800c8a8:	011b      	lsls	r3, r3, #4
 800c8aa:	1a9b      	subs	r3, r3, r2
 800c8ac:	009b      	lsls	r3, r3, #2
 800c8ae:	440b      	add	r3, r1
 800c8b0:	333c      	adds	r3, #60	@ 0x3c
 800c8b2:	78ba      	ldrb	r2, [r7, #2]
 800c8b4:	701a      	strb	r2, [r3, #0]
 800c8b6:	e009      	b.n	800c8cc <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800c8b8:	78fa      	ldrb	r2, [r7, #3]
 800c8ba:	68f9      	ldr	r1, [r7, #12]
 800c8bc:	4613      	mov	r3, r2
 800c8be:	011b      	lsls	r3, r3, #4
 800c8c0:	1a9b      	subs	r3, r3, r2
 800c8c2:	009b      	lsls	r3, r3, #2
 800c8c4:	440b      	add	r3, r1
 800c8c6:	333d      	adds	r3, #61	@ 0x3d
 800c8c8:	78ba      	ldrb	r2, [r7, #2]
 800c8ca:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800c8cc:	2300      	movs	r3, #0
}
 800c8ce:	4618      	mov	r0, r3
 800c8d0:	3714      	adds	r7, #20
 800c8d2:	46bd      	mov	sp, r7
 800c8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8d8:	4770      	bx	lr

0800c8da <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800c8da:	b580      	push	{r7, lr}
 800c8dc:	b082      	sub	sp, #8
 800c8de:	af00      	add	r7, sp, #0
 800c8e0:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800c8e2:	6878      	ldr	r0, [r7, #4]
 800c8e4:	f7f4 fe78 	bl	80015d8 <HAL_Delay>
}
 800c8e8:	bf00      	nop
 800c8ea:	3708      	adds	r7, #8
 800c8ec:	46bd      	mov	sp, r7
 800c8ee:	bd80      	pop	{r7, pc}

0800c8f0 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c8f0:	b480      	push	{r7}
 800c8f2:	b085      	sub	sp, #20
 800c8f4:	af00      	add	r7, sp, #0
 800c8f6:	4603      	mov	r3, r0
 800c8f8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c8fa:	2300      	movs	r3, #0
 800c8fc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c8fe:	79fb      	ldrb	r3, [r7, #7]
 800c900:	2b03      	cmp	r3, #3
 800c902:	d817      	bhi.n	800c934 <USBH_Get_USB_Status+0x44>
 800c904:	a201      	add	r2, pc, #4	@ (adr r2, 800c90c <USBH_Get_USB_Status+0x1c>)
 800c906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c90a:	bf00      	nop
 800c90c:	0800c91d 	.word	0x0800c91d
 800c910:	0800c923 	.word	0x0800c923
 800c914:	0800c929 	.word	0x0800c929
 800c918:	0800c92f 	.word	0x0800c92f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800c91c:	2300      	movs	r3, #0
 800c91e:	73fb      	strb	r3, [r7, #15]
    break;
 800c920:	e00b      	b.n	800c93a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800c922:	2302      	movs	r3, #2
 800c924:	73fb      	strb	r3, [r7, #15]
    break;
 800c926:	e008      	b.n	800c93a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800c928:	2301      	movs	r3, #1
 800c92a:	73fb      	strb	r3, [r7, #15]
    break;
 800c92c:	e005      	b.n	800c93a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800c92e:	2302      	movs	r3, #2
 800c930:	73fb      	strb	r3, [r7, #15]
    break;
 800c932:	e002      	b.n	800c93a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800c934:	2302      	movs	r3, #2
 800c936:	73fb      	strb	r3, [r7, #15]
    break;
 800c938:	bf00      	nop
  }
  return usb_status;
 800c93a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c93c:	4618      	mov	r0, r3
 800c93e:	3714      	adds	r7, #20
 800c940:	46bd      	mov	sp, r7
 800c942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c946:	4770      	bx	lr

0800c948 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800c948:	b580      	push	{r7, lr}
 800c94a:	b084      	sub	sp, #16
 800c94c:	af00      	add	r7, sp, #0
 800c94e:	4603      	mov	r3, r0
 800c950:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800c952:	79fb      	ldrb	r3, [r7, #7]
 800c954:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800c956:	79fb      	ldrb	r3, [r7, #7]
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d102      	bne.n	800c962 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800c95c:	2300      	movs	r3, #0
 800c95e:	73fb      	strb	r3, [r7, #15]
 800c960:	e001      	b.n	800c966 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800c962:	2301      	movs	r3, #1
 800c964:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800c966:	7bfb      	ldrb	r3, [r7, #15]
 800c968:	461a      	mov	r2, r3
 800c96a:	2101      	movs	r1, #1
 800c96c:	4803      	ldr	r0, [pc, #12]	@ (800c97c <MX_DriverVbusFS+0x34>)
 800c96e:	f7f6 f8db 	bl	8002b28 <HAL_GPIO_WritePin>
}
 800c972:	bf00      	nop
 800c974:	3710      	adds	r7, #16
 800c976:	46bd      	mov	sp, r7
 800c978:	bd80      	pop	{r7, pc}
 800c97a:	bf00      	nop
 800c97c:	40020800 	.word	0x40020800

0800c980 <atoi>:
 800c980:	220a      	movs	r2, #10
 800c982:	2100      	movs	r1, #0
 800c984:	f000 b938 	b.w	800cbf8 <strtol>

0800c988 <malloc>:
 800c988:	4b02      	ldr	r3, [pc, #8]	@ (800c994 <malloc+0xc>)
 800c98a:	4601      	mov	r1, r0
 800c98c:	6818      	ldr	r0, [r3, #0]
 800c98e:	f000 b82d 	b.w	800c9ec <_malloc_r>
 800c992:	bf00      	nop
 800c994:	20000034 	.word	0x20000034

0800c998 <free>:
 800c998:	4b02      	ldr	r3, [pc, #8]	@ (800c9a4 <free+0xc>)
 800c99a:	4601      	mov	r1, r0
 800c99c:	6818      	ldr	r0, [r3, #0]
 800c99e:	f000 b99f 	b.w	800cce0 <_free_r>
 800c9a2:	bf00      	nop
 800c9a4:	20000034 	.word	0x20000034

0800c9a8 <sbrk_aligned>:
 800c9a8:	b570      	push	{r4, r5, r6, lr}
 800c9aa:	4e0f      	ldr	r6, [pc, #60]	@ (800c9e8 <sbrk_aligned+0x40>)
 800c9ac:	460c      	mov	r4, r1
 800c9ae:	6831      	ldr	r1, [r6, #0]
 800c9b0:	4605      	mov	r5, r0
 800c9b2:	b911      	cbnz	r1, 800c9ba <sbrk_aligned+0x12>
 800c9b4:	f000 f958 	bl	800cc68 <_sbrk_r>
 800c9b8:	6030      	str	r0, [r6, #0]
 800c9ba:	4621      	mov	r1, r4
 800c9bc:	4628      	mov	r0, r5
 800c9be:	f000 f953 	bl	800cc68 <_sbrk_r>
 800c9c2:	1c43      	adds	r3, r0, #1
 800c9c4:	d103      	bne.n	800c9ce <sbrk_aligned+0x26>
 800c9c6:	f04f 34ff 	mov.w	r4, #4294967295
 800c9ca:	4620      	mov	r0, r4
 800c9cc:	bd70      	pop	{r4, r5, r6, pc}
 800c9ce:	1cc4      	adds	r4, r0, #3
 800c9d0:	f024 0403 	bic.w	r4, r4, #3
 800c9d4:	42a0      	cmp	r0, r4
 800c9d6:	d0f8      	beq.n	800c9ca <sbrk_aligned+0x22>
 800c9d8:	1a21      	subs	r1, r4, r0
 800c9da:	4628      	mov	r0, r5
 800c9dc:	f000 f944 	bl	800cc68 <_sbrk_r>
 800c9e0:	3001      	adds	r0, #1
 800c9e2:	d1f2      	bne.n	800c9ca <sbrk_aligned+0x22>
 800c9e4:	e7ef      	b.n	800c9c6 <sbrk_aligned+0x1e>
 800c9e6:	bf00      	nop
 800c9e8:	20000a4c 	.word	0x20000a4c

0800c9ec <_malloc_r>:
 800c9ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c9f0:	1ccd      	adds	r5, r1, #3
 800c9f2:	f025 0503 	bic.w	r5, r5, #3
 800c9f6:	3508      	adds	r5, #8
 800c9f8:	2d0c      	cmp	r5, #12
 800c9fa:	bf38      	it	cc
 800c9fc:	250c      	movcc	r5, #12
 800c9fe:	2d00      	cmp	r5, #0
 800ca00:	4606      	mov	r6, r0
 800ca02:	db01      	blt.n	800ca08 <_malloc_r+0x1c>
 800ca04:	42a9      	cmp	r1, r5
 800ca06:	d904      	bls.n	800ca12 <_malloc_r+0x26>
 800ca08:	230c      	movs	r3, #12
 800ca0a:	6033      	str	r3, [r6, #0]
 800ca0c:	2000      	movs	r0, #0
 800ca0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ca12:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800cae8 <_malloc_r+0xfc>
 800ca16:	f000 f869 	bl	800caec <__malloc_lock>
 800ca1a:	f8d8 3000 	ldr.w	r3, [r8]
 800ca1e:	461c      	mov	r4, r3
 800ca20:	bb44      	cbnz	r4, 800ca74 <_malloc_r+0x88>
 800ca22:	4629      	mov	r1, r5
 800ca24:	4630      	mov	r0, r6
 800ca26:	f7ff ffbf 	bl	800c9a8 <sbrk_aligned>
 800ca2a:	1c43      	adds	r3, r0, #1
 800ca2c:	4604      	mov	r4, r0
 800ca2e:	d158      	bne.n	800cae2 <_malloc_r+0xf6>
 800ca30:	f8d8 4000 	ldr.w	r4, [r8]
 800ca34:	4627      	mov	r7, r4
 800ca36:	2f00      	cmp	r7, #0
 800ca38:	d143      	bne.n	800cac2 <_malloc_r+0xd6>
 800ca3a:	2c00      	cmp	r4, #0
 800ca3c:	d04b      	beq.n	800cad6 <_malloc_r+0xea>
 800ca3e:	6823      	ldr	r3, [r4, #0]
 800ca40:	4639      	mov	r1, r7
 800ca42:	4630      	mov	r0, r6
 800ca44:	eb04 0903 	add.w	r9, r4, r3
 800ca48:	f000 f90e 	bl	800cc68 <_sbrk_r>
 800ca4c:	4581      	cmp	r9, r0
 800ca4e:	d142      	bne.n	800cad6 <_malloc_r+0xea>
 800ca50:	6821      	ldr	r1, [r4, #0]
 800ca52:	1a6d      	subs	r5, r5, r1
 800ca54:	4629      	mov	r1, r5
 800ca56:	4630      	mov	r0, r6
 800ca58:	f7ff ffa6 	bl	800c9a8 <sbrk_aligned>
 800ca5c:	3001      	adds	r0, #1
 800ca5e:	d03a      	beq.n	800cad6 <_malloc_r+0xea>
 800ca60:	6823      	ldr	r3, [r4, #0]
 800ca62:	442b      	add	r3, r5
 800ca64:	6023      	str	r3, [r4, #0]
 800ca66:	f8d8 3000 	ldr.w	r3, [r8]
 800ca6a:	685a      	ldr	r2, [r3, #4]
 800ca6c:	bb62      	cbnz	r2, 800cac8 <_malloc_r+0xdc>
 800ca6e:	f8c8 7000 	str.w	r7, [r8]
 800ca72:	e00f      	b.n	800ca94 <_malloc_r+0xa8>
 800ca74:	6822      	ldr	r2, [r4, #0]
 800ca76:	1b52      	subs	r2, r2, r5
 800ca78:	d420      	bmi.n	800cabc <_malloc_r+0xd0>
 800ca7a:	2a0b      	cmp	r2, #11
 800ca7c:	d917      	bls.n	800caae <_malloc_r+0xc2>
 800ca7e:	1961      	adds	r1, r4, r5
 800ca80:	42a3      	cmp	r3, r4
 800ca82:	6025      	str	r5, [r4, #0]
 800ca84:	bf18      	it	ne
 800ca86:	6059      	strne	r1, [r3, #4]
 800ca88:	6863      	ldr	r3, [r4, #4]
 800ca8a:	bf08      	it	eq
 800ca8c:	f8c8 1000 	streq.w	r1, [r8]
 800ca90:	5162      	str	r2, [r4, r5]
 800ca92:	604b      	str	r3, [r1, #4]
 800ca94:	4630      	mov	r0, r6
 800ca96:	f000 f82f 	bl	800caf8 <__malloc_unlock>
 800ca9a:	f104 000b 	add.w	r0, r4, #11
 800ca9e:	1d23      	adds	r3, r4, #4
 800caa0:	f020 0007 	bic.w	r0, r0, #7
 800caa4:	1ac2      	subs	r2, r0, r3
 800caa6:	bf1c      	itt	ne
 800caa8:	1a1b      	subne	r3, r3, r0
 800caaa:	50a3      	strne	r3, [r4, r2]
 800caac:	e7af      	b.n	800ca0e <_malloc_r+0x22>
 800caae:	6862      	ldr	r2, [r4, #4]
 800cab0:	42a3      	cmp	r3, r4
 800cab2:	bf0c      	ite	eq
 800cab4:	f8c8 2000 	streq.w	r2, [r8]
 800cab8:	605a      	strne	r2, [r3, #4]
 800caba:	e7eb      	b.n	800ca94 <_malloc_r+0xa8>
 800cabc:	4623      	mov	r3, r4
 800cabe:	6864      	ldr	r4, [r4, #4]
 800cac0:	e7ae      	b.n	800ca20 <_malloc_r+0x34>
 800cac2:	463c      	mov	r4, r7
 800cac4:	687f      	ldr	r7, [r7, #4]
 800cac6:	e7b6      	b.n	800ca36 <_malloc_r+0x4a>
 800cac8:	461a      	mov	r2, r3
 800caca:	685b      	ldr	r3, [r3, #4]
 800cacc:	42a3      	cmp	r3, r4
 800cace:	d1fb      	bne.n	800cac8 <_malloc_r+0xdc>
 800cad0:	2300      	movs	r3, #0
 800cad2:	6053      	str	r3, [r2, #4]
 800cad4:	e7de      	b.n	800ca94 <_malloc_r+0xa8>
 800cad6:	230c      	movs	r3, #12
 800cad8:	6033      	str	r3, [r6, #0]
 800cada:	4630      	mov	r0, r6
 800cadc:	f000 f80c 	bl	800caf8 <__malloc_unlock>
 800cae0:	e794      	b.n	800ca0c <_malloc_r+0x20>
 800cae2:	6005      	str	r5, [r0, #0]
 800cae4:	e7d6      	b.n	800ca94 <_malloc_r+0xa8>
 800cae6:	bf00      	nop
 800cae8:	20000a50 	.word	0x20000a50

0800caec <__malloc_lock>:
 800caec:	4801      	ldr	r0, [pc, #4]	@ (800caf4 <__malloc_lock+0x8>)
 800caee:	f000 b8f5 	b.w	800ccdc <__retarget_lock_acquire_recursive>
 800caf2:	bf00      	nop
 800caf4:	20000b90 	.word	0x20000b90

0800caf8 <__malloc_unlock>:
 800caf8:	4801      	ldr	r0, [pc, #4]	@ (800cb00 <__malloc_unlock+0x8>)
 800cafa:	f000 b8f0 	b.w	800ccde <__retarget_lock_release_recursive>
 800cafe:	bf00      	nop
 800cb00:	20000b90 	.word	0x20000b90

0800cb04 <_strtol_l.constprop.0>:
 800cb04:	2b24      	cmp	r3, #36	@ 0x24
 800cb06:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb0a:	4686      	mov	lr, r0
 800cb0c:	4690      	mov	r8, r2
 800cb0e:	d801      	bhi.n	800cb14 <_strtol_l.constprop.0+0x10>
 800cb10:	2b01      	cmp	r3, #1
 800cb12:	d106      	bne.n	800cb22 <_strtol_l.constprop.0+0x1e>
 800cb14:	f000 f8b8 	bl	800cc88 <__errno>
 800cb18:	2316      	movs	r3, #22
 800cb1a:	6003      	str	r3, [r0, #0]
 800cb1c:	2000      	movs	r0, #0
 800cb1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb22:	4834      	ldr	r0, [pc, #208]	@ (800cbf4 <_strtol_l.constprop.0+0xf0>)
 800cb24:	460d      	mov	r5, r1
 800cb26:	462a      	mov	r2, r5
 800cb28:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cb2c:	5d06      	ldrb	r6, [r0, r4]
 800cb2e:	f016 0608 	ands.w	r6, r6, #8
 800cb32:	d1f8      	bne.n	800cb26 <_strtol_l.constprop.0+0x22>
 800cb34:	2c2d      	cmp	r4, #45	@ 0x2d
 800cb36:	d12d      	bne.n	800cb94 <_strtol_l.constprop.0+0x90>
 800cb38:	782c      	ldrb	r4, [r5, #0]
 800cb3a:	2601      	movs	r6, #1
 800cb3c:	1c95      	adds	r5, r2, #2
 800cb3e:	f033 0210 	bics.w	r2, r3, #16
 800cb42:	d109      	bne.n	800cb58 <_strtol_l.constprop.0+0x54>
 800cb44:	2c30      	cmp	r4, #48	@ 0x30
 800cb46:	d12a      	bne.n	800cb9e <_strtol_l.constprop.0+0x9a>
 800cb48:	782a      	ldrb	r2, [r5, #0]
 800cb4a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800cb4e:	2a58      	cmp	r2, #88	@ 0x58
 800cb50:	d125      	bne.n	800cb9e <_strtol_l.constprop.0+0x9a>
 800cb52:	786c      	ldrb	r4, [r5, #1]
 800cb54:	2310      	movs	r3, #16
 800cb56:	3502      	adds	r5, #2
 800cb58:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800cb5c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800cb60:	2200      	movs	r2, #0
 800cb62:	fbbc f9f3 	udiv	r9, ip, r3
 800cb66:	4610      	mov	r0, r2
 800cb68:	fb03 ca19 	mls	sl, r3, r9, ip
 800cb6c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800cb70:	2f09      	cmp	r7, #9
 800cb72:	d81b      	bhi.n	800cbac <_strtol_l.constprop.0+0xa8>
 800cb74:	463c      	mov	r4, r7
 800cb76:	42a3      	cmp	r3, r4
 800cb78:	dd27      	ble.n	800cbca <_strtol_l.constprop.0+0xc6>
 800cb7a:	1c57      	adds	r7, r2, #1
 800cb7c:	d007      	beq.n	800cb8e <_strtol_l.constprop.0+0x8a>
 800cb7e:	4581      	cmp	r9, r0
 800cb80:	d320      	bcc.n	800cbc4 <_strtol_l.constprop.0+0xc0>
 800cb82:	d101      	bne.n	800cb88 <_strtol_l.constprop.0+0x84>
 800cb84:	45a2      	cmp	sl, r4
 800cb86:	db1d      	blt.n	800cbc4 <_strtol_l.constprop.0+0xc0>
 800cb88:	fb00 4003 	mla	r0, r0, r3, r4
 800cb8c:	2201      	movs	r2, #1
 800cb8e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cb92:	e7eb      	b.n	800cb6c <_strtol_l.constprop.0+0x68>
 800cb94:	2c2b      	cmp	r4, #43	@ 0x2b
 800cb96:	bf04      	itt	eq
 800cb98:	782c      	ldrbeq	r4, [r5, #0]
 800cb9a:	1c95      	addeq	r5, r2, #2
 800cb9c:	e7cf      	b.n	800cb3e <_strtol_l.constprop.0+0x3a>
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d1da      	bne.n	800cb58 <_strtol_l.constprop.0+0x54>
 800cba2:	2c30      	cmp	r4, #48	@ 0x30
 800cba4:	bf0c      	ite	eq
 800cba6:	2308      	moveq	r3, #8
 800cba8:	230a      	movne	r3, #10
 800cbaa:	e7d5      	b.n	800cb58 <_strtol_l.constprop.0+0x54>
 800cbac:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800cbb0:	2f19      	cmp	r7, #25
 800cbb2:	d801      	bhi.n	800cbb8 <_strtol_l.constprop.0+0xb4>
 800cbb4:	3c37      	subs	r4, #55	@ 0x37
 800cbb6:	e7de      	b.n	800cb76 <_strtol_l.constprop.0+0x72>
 800cbb8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800cbbc:	2f19      	cmp	r7, #25
 800cbbe:	d804      	bhi.n	800cbca <_strtol_l.constprop.0+0xc6>
 800cbc0:	3c57      	subs	r4, #87	@ 0x57
 800cbc2:	e7d8      	b.n	800cb76 <_strtol_l.constprop.0+0x72>
 800cbc4:	f04f 32ff 	mov.w	r2, #4294967295
 800cbc8:	e7e1      	b.n	800cb8e <_strtol_l.constprop.0+0x8a>
 800cbca:	1c53      	adds	r3, r2, #1
 800cbcc:	d108      	bne.n	800cbe0 <_strtol_l.constprop.0+0xdc>
 800cbce:	2322      	movs	r3, #34	@ 0x22
 800cbd0:	f8ce 3000 	str.w	r3, [lr]
 800cbd4:	4660      	mov	r0, ip
 800cbd6:	f1b8 0f00 	cmp.w	r8, #0
 800cbda:	d0a0      	beq.n	800cb1e <_strtol_l.constprop.0+0x1a>
 800cbdc:	1e69      	subs	r1, r5, #1
 800cbde:	e006      	b.n	800cbee <_strtol_l.constprop.0+0xea>
 800cbe0:	b106      	cbz	r6, 800cbe4 <_strtol_l.constprop.0+0xe0>
 800cbe2:	4240      	negs	r0, r0
 800cbe4:	f1b8 0f00 	cmp.w	r8, #0
 800cbe8:	d099      	beq.n	800cb1e <_strtol_l.constprop.0+0x1a>
 800cbea:	2a00      	cmp	r2, #0
 800cbec:	d1f6      	bne.n	800cbdc <_strtol_l.constprop.0+0xd8>
 800cbee:	f8c8 1000 	str.w	r1, [r8]
 800cbf2:	e794      	b.n	800cb1e <_strtol_l.constprop.0+0x1a>
 800cbf4:	0800d119 	.word	0x0800d119

0800cbf8 <strtol>:
 800cbf8:	4613      	mov	r3, r2
 800cbfa:	460a      	mov	r2, r1
 800cbfc:	4601      	mov	r1, r0
 800cbfe:	4802      	ldr	r0, [pc, #8]	@ (800cc08 <strtol+0x10>)
 800cc00:	6800      	ldr	r0, [r0, #0]
 800cc02:	f7ff bf7f 	b.w	800cb04 <_strtol_l.constprop.0>
 800cc06:	bf00      	nop
 800cc08:	20000034 	.word	0x20000034

0800cc0c <memset>:
 800cc0c:	4402      	add	r2, r0
 800cc0e:	4603      	mov	r3, r0
 800cc10:	4293      	cmp	r3, r2
 800cc12:	d100      	bne.n	800cc16 <memset+0xa>
 800cc14:	4770      	bx	lr
 800cc16:	f803 1b01 	strb.w	r1, [r3], #1
 800cc1a:	e7f9      	b.n	800cc10 <memset+0x4>

0800cc1c <strncmp>:
 800cc1c:	b510      	push	{r4, lr}
 800cc1e:	b16a      	cbz	r2, 800cc3c <strncmp+0x20>
 800cc20:	3901      	subs	r1, #1
 800cc22:	1884      	adds	r4, r0, r2
 800cc24:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cc28:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800cc2c:	429a      	cmp	r2, r3
 800cc2e:	d103      	bne.n	800cc38 <strncmp+0x1c>
 800cc30:	42a0      	cmp	r0, r4
 800cc32:	d001      	beq.n	800cc38 <strncmp+0x1c>
 800cc34:	2a00      	cmp	r2, #0
 800cc36:	d1f5      	bne.n	800cc24 <strncmp+0x8>
 800cc38:	1ad0      	subs	r0, r2, r3
 800cc3a:	bd10      	pop	{r4, pc}
 800cc3c:	4610      	mov	r0, r2
 800cc3e:	e7fc      	b.n	800cc3a <strncmp+0x1e>

0800cc40 <strncpy>:
 800cc40:	b510      	push	{r4, lr}
 800cc42:	3901      	subs	r1, #1
 800cc44:	4603      	mov	r3, r0
 800cc46:	b132      	cbz	r2, 800cc56 <strncpy+0x16>
 800cc48:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800cc4c:	f803 4b01 	strb.w	r4, [r3], #1
 800cc50:	3a01      	subs	r2, #1
 800cc52:	2c00      	cmp	r4, #0
 800cc54:	d1f7      	bne.n	800cc46 <strncpy+0x6>
 800cc56:	441a      	add	r2, r3
 800cc58:	2100      	movs	r1, #0
 800cc5a:	4293      	cmp	r3, r2
 800cc5c:	d100      	bne.n	800cc60 <strncpy+0x20>
 800cc5e:	bd10      	pop	{r4, pc}
 800cc60:	f803 1b01 	strb.w	r1, [r3], #1
 800cc64:	e7f9      	b.n	800cc5a <strncpy+0x1a>
	...

0800cc68 <_sbrk_r>:
 800cc68:	b538      	push	{r3, r4, r5, lr}
 800cc6a:	4d06      	ldr	r5, [pc, #24]	@ (800cc84 <_sbrk_r+0x1c>)
 800cc6c:	2300      	movs	r3, #0
 800cc6e:	4604      	mov	r4, r0
 800cc70:	4608      	mov	r0, r1
 800cc72:	602b      	str	r3, [r5, #0]
 800cc74:	f7f4 faa2 	bl	80011bc <_sbrk>
 800cc78:	1c43      	adds	r3, r0, #1
 800cc7a:	d102      	bne.n	800cc82 <_sbrk_r+0x1a>
 800cc7c:	682b      	ldr	r3, [r5, #0]
 800cc7e:	b103      	cbz	r3, 800cc82 <_sbrk_r+0x1a>
 800cc80:	6023      	str	r3, [r4, #0]
 800cc82:	bd38      	pop	{r3, r4, r5, pc}
 800cc84:	20000b8c 	.word	0x20000b8c

0800cc88 <__errno>:
 800cc88:	4b01      	ldr	r3, [pc, #4]	@ (800cc90 <__errno+0x8>)
 800cc8a:	6818      	ldr	r0, [r3, #0]
 800cc8c:	4770      	bx	lr
 800cc8e:	bf00      	nop
 800cc90:	20000034 	.word	0x20000034

0800cc94 <__libc_init_array>:
 800cc94:	b570      	push	{r4, r5, r6, lr}
 800cc96:	4d0d      	ldr	r5, [pc, #52]	@ (800cccc <__libc_init_array+0x38>)
 800cc98:	4c0d      	ldr	r4, [pc, #52]	@ (800ccd0 <__libc_init_array+0x3c>)
 800cc9a:	1b64      	subs	r4, r4, r5
 800cc9c:	10a4      	asrs	r4, r4, #2
 800cc9e:	2600      	movs	r6, #0
 800cca0:	42a6      	cmp	r6, r4
 800cca2:	d109      	bne.n	800ccb8 <__libc_init_array+0x24>
 800cca4:	4d0b      	ldr	r5, [pc, #44]	@ (800ccd4 <__libc_init_array+0x40>)
 800cca6:	4c0c      	ldr	r4, [pc, #48]	@ (800ccd8 <__libc_init_array+0x44>)
 800cca8:	f000 f864 	bl	800cd74 <_init>
 800ccac:	1b64      	subs	r4, r4, r5
 800ccae:	10a4      	asrs	r4, r4, #2
 800ccb0:	2600      	movs	r6, #0
 800ccb2:	42a6      	cmp	r6, r4
 800ccb4:	d105      	bne.n	800ccc2 <__libc_init_array+0x2e>
 800ccb6:	bd70      	pop	{r4, r5, r6, pc}
 800ccb8:	f855 3b04 	ldr.w	r3, [r5], #4
 800ccbc:	4798      	blx	r3
 800ccbe:	3601      	adds	r6, #1
 800ccc0:	e7ee      	b.n	800cca0 <__libc_init_array+0xc>
 800ccc2:	f855 3b04 	ldr.w	r3, [r5], #4
 800ccc6:	4798      	blx	r3
 800ccc8:	3601      	adds	r6, #1
 800ccca:	e7f2      	b.n	800ccb2 <__libc_init_array+0x1e>
 800cccc:	0800d224 	.word	0x0800d224
 800ccd0:	0800d224 	.word	0x0800d224
 800ccd4:	0800d224 	.word	0x0800d224
 800ccd8:	0800d228 	.word	0x0800d228

0800ccdc <__retarget_lock_acquire_recursive>:
 800ccdc:	4770      	bx	lr

0800ccde <__retarget_lock_release_recursive>:
 800ccde:	4770      	bx	lr

0800cce0 <_free_r>:
 800cce0:	b538      	push	{r3, r4, r5, lr}
 800cce2:	4605      	mov	r5, r0
 800cce4:	2900      	cmp	r1, #0
 800cce6:	d041      	beq.n	800cd6c <_free_r+0x8c>
 800cce8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ccec:	1f0c      	subs	r4, r1, #4
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	bfb8      	it	lt
 800ccf2:	18e4      	addlt	r4, r4, r3
 800ccf4:	f7ff fefa 	bl	800caec <__malloc_lock>
 800ccf8:	4a1d      	ldr	r2, [pc, #116]	@ (800cd70 <_free_r+0x90>)
 800ccfa:	6813      	ldr	r3, [r2, #0]
 800ccfc:	b933      	cbnz	r3, 800cd0c <_free_r+0x2c>
 800ccfe:	6063      	str	r3, [r4, #4]
 800cd00:	6014      	str	r4, [r2, #0]
 800cd02:	4628      	mov	r0, r5
 800cd04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cd08:	f7ff bef6 	b.w	800caf8 <__malloc_unlock>
 800cd0c:	42a3      	cmp	r3, r4
 800cd0e:	d908      	bls.n	800cd22 <_free_r+0x42>
 800cd10:	6820      	ldr	r0, [r4, #0]
 800cd12:	1821      	adds	r1, r4, r0
 800cd14:	428b      	cmp	r3, r1
 800cd16:	bf01      	itttt	eq
 800cd18:	6819      	ldreq	r1, [r3, #0]
 800cd1a:	685b      	ldreq	r3, [r3, #4]
 800cd1c:	1809      	addeq	r1, r1, r0
 800cd1e:	6021      	streq	r1, [r4, #0]
 800cd20:	e7ed      	b.n	800ccfe <_free_r+0x1e>
 800cd22:	461a      	mov	r2, r3
 800cd24:	685b      	ldr	r3, [r3, #4]
 800cd26:	b10b      	cbz	r3, 800cd2c <_free_r+0x4c>
 800cd28:	42a3      	cmp	r3, r4
 800cd2a:	d9fa      	bls.n	800cd22 <_free_r+0x42>
 800cd2c:	6811      	ldr	r1, [r2, #0]
 800cd2e:	1850      	adds	r0, r2, r1
 800cd30:	42a0      	cmp	r0, r4
 800cd32:	d10b      	bne.n	800cd4c <_free_r+0x6c>
 800cd34:	6820      	ldr	r0, [r4, #0]
 800cd36:	4401      	add	r1, r0
 800cd38:	1850      	adds	r0, r2, r1
 800cd3a:	4283      	cmp	r3, r0
 800cd3c:	6011      	str	r1, [r2, #0]
 800cd3e:	d1e0      	bne.n	800cd02 <_free_r+0x22>
 800cd40:	6818      	ldr	r0, [r3, #0]
 800cd42:	685b      	ldr	r3, [r3, #4]
 800cd44:	6053      	str	r3, [r2, #4]
 800cd46:	4408      	add	r0, r1
 800cd48:	6010      	str	r0, [r2, #0]
 800cd4a:	e7da      	b.n	800cd02 <_free_r+0x22>
 800cd4c:	d902      	bls.n	800cd54 <_free_r+0x74>
 800cd4e:	230c      	movs	r3, #12
 800cd50:	602b      	str	r3, [r5, #0]
 800cd52:	e7d6      	b.n	800cd02 <_free_r+0x22>
 800cd54:	6820      	ldr	r0, [r4, #0]
 800cd56:	1821      	adds	r1, r4, r0
 800cd58:	428b      	cmp	r3, r1
 800cd5a:	bf04      	itt	eq
 800cd5c:	6819      	ldreq	r1, [r3, #0]
 800cd5e:	685b      	ldreq	r3, [r3, #4]
 800cd60:	6063      	str	r3, [r4, #4]
 800cd62:	bf04      	itt	eq
 800cd64:	1809      	addeq	r1, r1, r0
 800cd66:	6021      	streq	r1, [r4, #0]
 800cd68:	6054      	str	r4, [r2, #4]
 800cd6a:	e7ca      	b.n	800cd02 <_free_r+0x22>
 800cd6c:	bd38      	pop	{r3, r4, r5, pc}
 800cd6e:	bf00      	nop
 800cd70:	20000a50 	.word	0x20000a50

0800cd74 <_init>:
 800cd74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd76:	bf00      	nop
 800cd78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd7a:	bc08      	pop	{r3}
 800cd7c:	469e      	mov	lr, r3
 800cd7e:	4770      	bx	lr

0800cd80 <_fini>:
 800cd80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd82:	bf00      	nop
 800cd84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd86:	bc08      	pop	{r3}
 800cd88:	469e      	mov	lr, r3
 800cd8a:	4770      	bx	lr
